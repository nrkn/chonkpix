import { t2N, t3Factory, t5Factory } from '../lib/util.js';
const createPt = t2N;
const emptyPoint = createPt();
const createTri = t3Factory(emptyPoint);
const emptyTri = createTri();
const createPentagon = t5Factory(emptyTri);
export const createPentagonTriangles = (cx, cy, radius, angleOffset = 0) => {
    const tris = createPentagon();
    //
    const vertices = polygonPoints(5, cx, cy, radius, angleOffset);
    for (let i = 0; i < 5; i++) {
        const nextIndex = (i + 1) % 5;
        tris[i] = [vertices[i], vertices[nextIndex], [cx, cy]];
    }
    //
    return tris;
};
export const polygonPoints = (sides, cx, cy, radius, radianOffset = 0) => {
    const points = [];
    for (let i = 0; i < sides; i++) {
        const angle = (2 * Math.PI * i) / sides + radianOffset;
        const x = cx + radius * Math.cos(angle);
        const y = cy + radius * Math.sin(angle);
        points.push([x, y]);
    }
    return points;
};
export const polygonTriangles = (sides, cx, cy, radius, radianOffset = 0) => {
    const points = polygonPoints(sides, cx, cy, radius, radianOffset);
    const triangles = [];
    for (let i = 0; i < sides; i++) {
        const nextIndex = (i + 1) % sides;
        triangles.push([points[i], points[nextIndex], [cx, cy]]);
    }
    return triangles;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zYW5kYm94L3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFFMUQsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFBO0FBQ3BCLE1BQU0sVUFBVSxHQUFHLFFBQVEsRUFBRSxDQUFBO0FBQzdCLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUN2QyxNQUFNLFFBQVEsR0FBRyxTQUFTLEVBQUUsQ0FBQTtBQUM1QixNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7QUFFMUMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FDckMsRUFBVSxFQUFFLEVBQVUsRUFBRSxNQUFjLEVBQUUsV0FBVyxHQUFHLENBQUMsRUFDM0MsRUFBRTtJQUNkLE1BQU0sSUFBSSxHQUFHLGNBQWMsRUFBRSxDQUFBO0lBRTdCLEVBQUU7SUFFRixNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBRTlELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMzQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFN0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ3hELENBQUM7SUFFRCxFQUFFO0lBRUYsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FDM0IsS0FBYSxFQUNiLEVBQVUsRUFDVixFQUFVLEVBQ1YsTUFBYyxFQUNkLGVBQXVCLENBQUMsRUFDbEIsRUFBRTtJQUNSLE1BQU0sTUFBTSxHQUFTLEVBQUUsQ0FBQTtJQUV2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDL0IsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsWUFBWSxDQUFBO1FBQ3RELE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN2QyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3JCLENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQzlCLEtBQWEsRUFDYixFQUFVLEVBQ1YsRUFBVSxFQUNWLE1BQWMsRUFDZCxlQUF1QixDQUFDLEVBQ2QsRUFBRTtJQUNaLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDakUsTUFBTSxTQUFTLEdBQWEsRUFBRSxDQUFBO0lBRTlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMvQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUE7UUFFakMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzFELENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQTtBQUNsQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUMiwgVDMsIFQ1IH0gZnJvbSAnLi4vbGliL3R5cGVzLmpzJ1xuaW1wb3J0IHsgdDJOLCB0M0ZhY3RvcnksIHQ1RmFjdG9yeSB9IGZyb20gJy4uL2xpYi91dGlsLmpzJ1xuXG5jb25zdCBjcmVhdGVQdCA9IHQyTlxuY29uc3QgZW1wdHlQb2ludCA9IGNyZWF0ZVB0KClcbmNvbnN0IGNyZWF0ZVRyaSA9IHQzRmFjdG9yeShlbXB0eVBvaW50KVxuY29uc3QgZW1wdHlUcmkgPSBjcmVhdGVUcmkoKVxuY29uc3QgY3JlYXRlUGVudGFnb24gPSB0NUZhY3RvcnkoZW1wdHlUcmkpXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQZW50YWdvblRyaWFuZ2xlcyA9IChcbiAgY3g6IG51bWJlciwgY3k6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIGFuZ2xlT2Zmc2V0ID0gMFxuKTogVDU8VDM8VDI+PiA9PiB7XG4gIGNvbnN0IHRyaXMgPSBjcmVhdGVQZW50YWdvbigpXG5cbiAgLy9cblxuICBjb25zdCB2ZXJ0aWNlcyA9IHBvbHlnb25Qb2ludHMoNSwgY3gsIGN5LCByYWRpdXMsIGFuZ2xlT2Zmc2V0KVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgY29uc3QgbmV4dEluZGV4ID0gKGkgKyAxKSAlIDVcblxuICAgIHRyaXNbaV0gPSBbdmVydGljZXNbaV0sIHZlcnRpY2VzW25leHRJbmRleF0sIFtjeCwgY3ldXVxuICB9XG5cbiAgLy9cblxuICByZXR1cm4gdHJpc1xufVxuXG5leHBvcnQgY29uc3QgcG9seWdvblBvaW50cyA9IChcbiAgc2lkZXM6IG51bWJlcixcbiAgY3g6IG51bWJlcixcbiAgY3k6IG51bWJlcixcbiAgcmFkaXVzOiBudW1iZXIsXG4gIHJhZGlhbk9mZnNldDogbnVtYmVyID0gMFxuKTogVDJbXSA9PiB7XG4gIGNvbnN0IHBvaW50czogVDJbXSA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWRlczsgaSsrKSB7XG4gICAgY29uc3QgYW5nbGUgPSAoMiAqIE1hdGguUEkgKiBpKSAvIHNpZGVzICsgcmFkaWFuT2Zmc2V0XG4gICAgY29uc3QgeCA9IGN4ICsgcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpXG4gICAgY29uc3QgeSA9IGN5ICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpXG5cbiAgICBwb2ludHMucHVzaChbeCwgeV0pXG4gIH1cblxuICByZXR1cm4gcG9pbnRzXG59XG5cbmV4cG9ydCBjb25zdCBwb2x5Z29uVHJpYW5nbGVzID0gKFxuICBzaWRlczogbnVtYmVyLFxuICBjeDogbnVtYmVyLFxuICBjeTogbnVtYmVyLFxuICByYWRpdXM6IG51bWJlcixcbiAgcmFkaWFuT2Zmc2V0OiBudW1iZXIgPSAwXG4pOiBUMzxUMj5bXSA9PiB7XG4gIGNvbnN0IHBvaW50cyA9IHBvbHlnb25Qb2ludHMoc2lkZXMsIGN4LCBjeSwgcmFkaXVzLCByYWRpYW5PZmZzZXQpXG4gIGNvbnN0IHRyaWFuZ2xlczogVDM8VDI+W10gPSBbXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2lkZXM7IGkrKykge1xuICAgIGNvbnN0IG5leHRJbmRleCA9IChpICsgMSkgJSBzaWRlc1xuXG4gICAgdHJpYW5nbGVzLnB1c2goW3BvaW50c1tpXSwgcG9pbnRzW25leHRJbmRleF0sIFtjeCwgY3ldXSlcbiAgfVxuXG4gIHJldHVybiB0cmlhbmdsZXNcbn0iXX0=