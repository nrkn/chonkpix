export const generatePalette = (entryCount, hueRange, satRange, lightRange) => {
    // reserve at least lightRange entries for greys
    const used = hueRange * satRange * lightRange + lightRange;
    if (used > entryCount) {
        throw Error('Not enough entries to generate palette');
    }
    // store as rgb palette
    const size = entryCount * 3;
    const data = new Uint8Array(size);
    let entryIndex = 0;
    // as hue is circular, we exclude the end of the range eg [0..1)
    const hueStep = 1 / hueRange;
    // skip 0 saturation as it's greyscale
    const satStep = 1 / satRange; // if 3, will be 0, 0.5, 1
    // skip 0 lightness as it's black, and 1 as it's white
    const lightStep = 1 / (lightRange + 1);
    for (let h = 0; h < hueRange; h++) {
        for (let s = 0; s < satRange; s++) {
            for (let l = 0; l < lightRange; l++) {
                const index = entryIndex * 3;
                const hue = hueStep * h;
                const sat = satStep * (s + 1);
                const light = lightStep * (l + 1);
                const [r, g, b] = hslToRgb([hue, sat, light]);
                data[index] = r;
                data[index + 1] = g;
                data[index + 2] = b;
                entryIndex++;
            }
        }
    }
    const greyRange = entryCount - entryIndex;
    const greyStep = 1 / (greyRange - 1);
    // greys - produces the values we skipped in the color steps above
    for (let l = 0; l < greyRange; l++) {
        const index = entryIndex * 3;
        const [r, g, b] = hslToRgb([0, 0, l * greyStep]);
        data[index] = r;
        data[index + 1] = g;
        data[index + 2] = b;
        entryIndex++;
    }
    return {
        data,
        entryCount,
        hueRange,
        satRange,
        lightRange,
        greyRange
    };
};
//
export const indexOfClosestHsl = (palette, hsl) => {
    const [h0, s0, l0] = hsl;
    const { hueRange, satRange, lightRange, greyRange } = palette;
    const totalColorEntries = hueRange * satRange * lightRange;
    const greyStartIndex = totalColorEntries;
    // map hue (circular)
    let hCandidate = Math.round(h0 * hueRange);
    if (hCandidate === hueRange)
        hCandidate = 0;
    const hIndex = hCandidate;
    // map sat
    let sCandidate = Math.round(s0 * satRange);
    if (sCandidate < 1 || sCandidate > satRange) {
        // must be grey
        const greyIndexInGreys = Math.round(l0 * (greyRange - 1));
        return greyStartIndex + greyIndexInGreys;
    }
    const sIndex = sCandidate - 1;
    // map lightness
    let lCandidate = Math.round(l0 * (lightRange + 1));
    if (lCandidate < 1 || lCandidate > lightRange) {
        // must be grey
        const greyIndexInGreys = Math.round(l0 * (greyRange - 1));
        return greyStartIndex + greyIndexInGreys;
    }
    const lIndex = lCandidate - 1;
    //valid hIndex, sIndex, and lIndex; color within the ramps
    const colorIndex = (hIndex * (satRange * lightRange) + sIndex * lightRange + lIndex);
    return colorIndex;
};
export const indexOfClosestRgb = (palette, rgb) => indexOfClosestHsl(palette, rgbToHsl(rgb));
//
const { min, max, round } = Math;
export const hslToRgb = ([h, s, l]) => {
    let r;
    let g;
    let b;
    if (s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hueToRgb(p, q, h + 1 / 3);
        g = hueToRgb(p, q, h);
        b = hueToRgb(p, q, h - 1 / 3);
    }
    return [round(r * 255), round(g * 255), round(b * 255)];
};
const hueToRgb = (p, q, t) => {
    if (t < 0)
        t += 1;
    if (t > 1)
        t -= 1;
    if (t < 1 / 6)
        return p + (q - p) * 6 * t;
    if (t < 1 / 2)
        return q;
    if (t < 2 / 3)
        return p + (q - p) * (2 / 3 - t) * 6;
    return p;
};
export const rgbToHsl = ([r, g, b]) => {
    r /= 255;
    g /= 255;
    b /= 255;
    const vmax = max(r, g, b);
    const vmin = min(r, g, b);
    let h;
    let s;
    let l;
    h = l = (vmax + vmin) / 2;
    if (vmax === vmin) {
        return [0, 0, l]; // achromatic
    }
    const d = vmax - vmin;
    s = l > 0.5 ? d / (2 - vmax - vmin) : d / (vmax + vmin);
    if (vmax === r)
        h = (g - b) / d + (g < b ? 6 : 0);
    if (vmax === g)
        h = (b - r) / d + 2;
    if (vmax === b)
        h = (r - g) / d + 4;
    h /= 6;
    return [h, s, l];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtcGFsZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zYW5kYm94L2dlbmVyYXRlLXBhbGV0dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzdCLFVBQWtCLEVBQ2xCLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQixFQUNwQyxFQUFFO0lBQ3BCLGdEQUFnRDtJQUNoRCxNQUFNLElBQUksR0FBRyxRQUFRLEdBQUcsUUFBUSxHQUFHLFVBQVUsR0FBRyxVQUFVLENBQUE7SUFFMUQsSUFBSSxJQUFJLEdBQUcsVUFBVSxFQUFFLENBQUM7UUFDdEIsTUFBTSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQTtJQUN2RCxDQUFDO0lBRUQsdUJBQXVCO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUE7SUFDM0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFakMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFBO0lBRWxCLGdFQUFnRTtJQUNoRSxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFBO0lBQzVCLHNDQUFzQztJQUN0QyxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFBLENBQUMsMEJBQTBCO0lBQ3ZELHNEQUFzRDtJQUN0RCxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFB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QUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQ3ZELElBQUksSUFBSSxLQUFLLENBQUM7UUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqRCxJQUFJLElBQUksS0FBSyxDQUFDO1FBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDbkMsSUFBSSxJQUFJLEtBQUssQ0FBQztRQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ25DLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFTixPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNsQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUMyB9IGZyb20gJy4uL2xpYi90eXBlcy5qcydcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlUGFsZXR0ZSA9IChcbiAgZW50cnlDb3VudDogbnVtYmVyLFxuICBodWVSYW5nZTogbnVtYmVyLCBzYXRSYW5nZTogbnVtYmVyLCBsaWdodFJhbmdlOiBudW1iZXJcbik6IEdlbmVyYXRlZFBhbGV0dGUgPT4ge1xuICAvLyByZXNlcnZlIGF0IGxlYXN0IGxpZ2h0UmFuZ2UgZW50cmllcyBmb3IgZ3JleXNcbiAgY29uc3QgdXNlZCA9IGh1ZVJhbmdlICogc2F0UmFuZ2UgKiBsaWdodFJhbmdlICsgbGlnaHRSYW5nZVxuXG4gIGlmICh1c2VkID4gZW50cnlDb3VudCkge1xuICAgIHRocm93IEVycm9yKCdOb3QgZW5vdWdoIGVudHJpZXMgdG8gZ2VuZXJhdGUgcGFsZXR0ZScpXG4gIH1cblxuICAvLyBzdG9yZSBhcyByZ2IgcGFsZXR0ZVxuICBjb25zdCBzaXplID0gZW50cnlDb3VudCAqIDNcbiAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHNpemUpXG5cbiAgbGV0IGVudHJ5SW5kZXggPSAwXG5cbiAgLy8gYXMgaHVlIGlzIGNpcmN1bGFyLCB3ZSBleGNsdWRlIHRoZSBlbmQgb2YgdGhlIHJhbmdlIGVnIFswLi4xKVxuICBjb25zdCBodWVTdGVwID0gMSAvIGh1ZVJhbmdlXG4gIC8vIHNraXAgMCBzYXR1cmF0aW9uIGFzIGl0J3MgZ3JleXNjYWxlXG4gIGNvbnN0IHNhdFN0ZXAgPSAxIC8gc2F0UmFuZ2UgLy8gaWYgMywgd2lsbCBiZSAwLCAwLjUsIDFcbiAgLy8gc2tpcCAwIGxpZ2h0bmVzcyBhcyBpdCdzIGJsYWNrLCBhbmQgMSBhcyBpdCdzIHdoaXRlXG4gIGNvbnN0IGxpZ2h0U3RlcCA9IDEgLyAobGlnaHRSYW5nZSArIDEpXG5cbiAgZm9yIChsZXQgaCA9IDA7IGggPCBodWVSYW5nZTsgaCsrKSB7XG4gICAgZm9yIChsZXQgcyA9IDA7IHMgPCBzYXRSYW5nZTsgcysrKSB7XG4gICAgICBmb3IgKGxldCBsID0gMDsgbCA8IGxpZ2h0UmFuZ2U7IGwrKykge1xuICAgICAgICBjb25zdCBpbmRleCA9IGVudHJ5SW5kZXggKiAzXG4gICAgICAgIGNvbnN0IGh1ZSA9IGh1ZVN0ZXAgKiBoXG4gICAgICAgIGNvbnN0IHNhdCA9IHNhdFN0ZXAgKiAocyArIDEpXG4gICAgICAgIGNvbnN0IGxpZ2h0ID0gbGlnaHRTdGVwICogKGwgKyAxKVxuXG4gICAgICAgIGNvbnN0IFtyLCBnLCBiXSA9IGhzbFRvUmdiKFtodWUsIHNhdCwgbGlnaHRdKVxuXG4gICAgICAgIGRhdGFbaW5kZXhdID0gclxuICAgICAgICBkYXRhW2luZGV4ICsgMV0gPSBnXG4gICAgICAgIGRhdGFbaW5kZXggKyAyXSA9IGJcbiAgICAgICAgZW50cnlJbmRleCsrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZ3JleVJhbmdlID0gZW50cnlDb3VudCAtIGVudHJ5SW5kZXhcblxuICBjb25zdCBncmV5U3RlcCA9IDEgLyAoZ3JleVJhbmdlIC0gMSlcblxuICAvLyBncmV5cyAtIHByb2R1Y2VzIHRoZSB2YWx1ZXMgd2Ugc2tpcHBlZCBpbiB0aGUgY29sb3Igc3RlcHMgYWJvdmVcbiAgZm9yIChsZXQgbCA9IDA7IGwgPCBncmV5UmFuZ2U7IGwrKykge1xuICAgIGNvbnN0IGluZGV4ID0gZW50cnlJbmRleCAqIDNcblxuICAgIGNvbnN0IFtyLCBnLCBiXSA9IGhzbFRvUmdiKFswLCAwLCBsICogZ3JleVN0ZXBdKVxuXG4gICAgZGF0YVtpbmRleF0gPSByXG4gICAgZGF0YVtpbmRleCArIDFdID0gZ1xuICAgIGRhdGFbaW5kZXggKyAyXSA9IGJcblxuICAgIGVudHJ5SW5kZXgrK1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBkYXRhLFxuICAgIGVudHJ5Q291bnQsXG4gICAgaHVlUmFuZ2UsXG4gICAgc2F0UmFuZ2UsXG4gICAgbGlnaHRSYW5nZSxcbiAgICBncmV5UmFuZ2VcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBHZW5lcmF0ZWRQYWxldHRlID0ge1xuICBkYXRhOiBVaW50OEFycmF5XG4gIGVudHJ5Q291bnQ6IG51bWJlclxuICBodWVSYW5nZTogbnVtYmVyXG4gIHNhdFJhbmdlOiBudW1iZXJcbiAgbGlnaHRSYW5nZTogbnVtYmVyXG4gIGdyZXlSYW5nZTogbnVtYmVyXG59XG5cbi8vXG5cbmV4cG9ydCBjb25zdCBpbmRleE9mQ2xvc2VzdEhzbCA9IChcbiAgcGFsZXR0ZTogR2VuZXJhdGVkUGFsZXR0ZSwgaHNsOiBUM1xuKTogbnVtYmVyID0+IHtcbiAgY29uc3QgW2gwLCBzMCwgbDBdID0gaHNsXG4gIGNvbnN0IHsgaHVlUmFuZ2UsIHNhdFJhbmdlLCBsaWdodFJhbmdlLCBncmV5UmFuZ2UgfSA9IHBhbGV0dGVcblxuICBjb25zdCB0b3RhbENvbG9yRW50cmllcyA9IGh1ZVJhbmdlICogc2F0UmFuZ2UgKiBsaWdodFJhbmdlXG4gIGNvbnN0IGdyZXlTdGFydEluZGV4ID0gdG90YWxDb2xvckVudHJpZXNcblxuICAvLyBtYXAgaHVlIChjaXJjdWxhcilcbiAgbGV0IGhDYW5kaWRhdGUgPSBNYXRoLnJvdW5kKGgwICogaHVlUmFuZ2UpXG4gIGlmIChoQ2FuZGlkYXRlID09PSBodWVSYW5nZSkgaENhbmRpZGF0ZSA9IDBcbiAgY29uc3QgaEluZGV4ID0gaENhbmRpZGF0ZVxuXG4gIC8vIG1hcCBzYXRcbiAgbGV0IHNDYW5kaWRhdGUgPSBNYXRoLnJvdW5kKHMwICogc2F0UmFuZ2UpXG5cbiAgaWYgKHNDYW5kaWRhdGUgPCAxIHx8IHNDYW5kaWRhdGUgPiBzYXRSYW5nZSkge1xuICAgIC8vIG11c3QgYmUgZ3JleVxuICAgIGNvbnN0IGdyZXlJbmRleEluR3JleXMgPSBNYXRoLnJvdW5kKGwwICogKGdyZXlSYW5nZSAtIDEpKVxuXG4gICAgcmV0dXJuIGdyZXlTdGFydEluZGV4ICsgZ3JleUluZGV4SW5HcmV5c1xuICB9XG5cbiAgY29uc3Qgc0luZGV4ID0gc0NhbmRpZGF0ZSAtIDFcblxuICAvLyBtYXAgbGlnaHRuZXNzXG4gIGxldCBsQ2FuZGlkYXRlID0gTWF0aC5yb3VuZChsMCAqIChsaWdodFJhbmdlICsgMSkpXG4gIGlmIChsQ2FuZGlkYXRlIDwgMSB8fCBsQ2FuZGlkYXRlID4gbGlnaHRSYW5nZSkge1xuICAgIC8vIG11c3QgYmUgZ3JleVxuICAgIGNvbnN0IGdyZXlJbmRleEluR3JleXMgPSBNYXRoLnJvdW5kKGwwICogKGdyZXlSYW5nZSAtIDEpKVxuXG4gICAgcmV0dXJuIGdyZXlTdGFydEluZGV4ICsgZ3JleUluZGV4SW5HcmV5c1xuICB9XG4gIGNvbnN0IGxJbmRleCA9IGxDYW5kaWRhdGUgLSAxXG5cbiAgLy92YWxpZCBoSW5kZXgsIHNJbmRleCwgYW5kIGxJbmRleDsgY29sb3Igd2l0aGluIHRoZSByYW1wc1xuICBjb25zdCBjb2xvckluZGV4ID0gKFxuICAgIGhJbmRleCAqIChzYXRSYW5nZSAqIGxpZ2h0UmFuZ2UpICsgc0luZGV4ICogbGlnaHRSYW5nZSArIGxJbmRleFxuICApXG5cbiAgcmV0dXJuIGNvbG9ySW5kZXhcbn1cblxuZXhwb3J0IGNvbnN0IGluZGV4T2ZDbG9zZXN0UmdiID0gKHBhbGV0dGU6IEdlbmVyYXRlZFBhbGV0dGUsIHJnYjogVDMpOiBudW1iZXIgPT5cbiAgaW5kZXhPZkNsb3Nlc3RIc2wocGFsZXR0ZSwgcmdiVG9Ic2wocmdiKSlcblxuLy9cblxuY29uc3QgeyBtaW4sIG1heCwgcm91bmQgfSA9IE1hdGhcblxuZXhwb3J0IGNvbnN0IGhzbFRvUmdiID0gKFtoLCBzLCBsXTogVDMpOiBUMyA9PiB7XG4gIGxldCByOiBudW1iZXJcbiAgbGV0IGc6IG51bWJlclxuICBsZXQgYjogbnVtYmVyXG5cbiAgaWYgKHMgPT09IDApIHtcbiAgICByID0gZyA9IGIgPSBsIC8vIGFjaHJvbWF0aWNcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogc1xuICAgIGNvbnN0IHAgPSAyICogbCAtIHFcblxuICAgIHIgPSBodWVUb1JnYihwLCBxLCBoICsgMSAvIDMpXG4gICAgZyA9IGh1ZVRvUmdiKHAsIHEsIGgpXG4gICAgYiA9IGh1ZVRvUmdiKHAsIHEsIGggLSAxIC8gMylcbiAgfVxuXG4gIHJldHVybiBbcm91bmQociAqIDI1NSksIHJvdW5kKGcgKiAyNTUpLCByb3VuZChiICogMjU1KV1cbn1cblxuY29uc3QgaHVlVG9SZ2IgPSAocDogbnVtYmVyLCBxOiBudW1iZXIsIHQ6IG51bWJlcikgPT4ge1xuICBpZiAodCA8IDApIHQgKz0gMVxuICBpZiAodCA+IDEpIHQgLT0gMVxuICBpZiAodCA8IDEgLyA2KSByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdFxuICBpZiAodCA8IDEgLyAyKSByZXR1cm4gcVxuICBpZiAodCA8IDIgLyAzKSByZXR1cm4gcCArIChxIC0gcCkgKiAoMiAvIDMgLSB0KSAqIDZcblxuICByZXR1cm4gcFxufVxuXG5leHBvcnQgY29uc3QgcmdiVG9Ic2wgPSAoW3IsIGcsIGJdOiBUMyk6IFQzID0+IHtcbiAgciAvPSAyNTVcbiAgZyAvPSAyNTVcbiAgYiAvPSAyNTVcblxuICBjb25zdCB2bWF4ID0gbWF4KHIsIGcsIGIpXG4gIGNvbnN0IHZtaW4gPSBtaW4ociwgZywgYilcbiAgbGV0IGg6IG51bWJlclxuICBsZXQgczogbnVtYmVyXG4gIGxldCBsOiBudW1iZXJcblxuICBoID0gbCA9ICh2bWF4ICsgdm1pbikgLyAyXG5cbiAgaWYgKHZtYXggPT09IHZtaW4pIHtcbiAgICByZXR1cm4gWzAsIDAsIGxdIC8vIGFjaHJvbWF0aWNcbiAgfVxuXG4gIGNvbnN0IGQgPSB2bWF4IC0gdm1pblxuICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIHZtYXggLSB2bWluKSA6IGQgLyAodm1heCArIHZtaW4pXG4gIGlmICh2bWF4ID09PSByKSBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMClcbiAgaWYgKHZtYXggPT09IGcpIGggPSAoYiAtIHIpIC8gZCArIDJcbiAgaWYgKHZtYXggPT09IGIpIGggPSAociAtIGcpIC8gZCArIDRcbiAgaCAvPSA2XG5cbiAgcmV0dXJuIFtoLCBzLCBsXVxufVxuIl19