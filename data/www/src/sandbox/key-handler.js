// override the default key repeat behavior
export const keyHandler = (initialDelay = 500, repeatDelay = 50) => {
    let events = [];
    const isDown = {};
    const nextRepeatTime = {};
    const onKeydown = (key, now) => {
        if (isDown[key])
            return;
        isDown[key] = true;
        nextRepeatTime[key] = now + initialDelay;
        events.push(['start', key, now]);
    };
    const onKeyup = (key, now) => {
        isDown[key] = false;
        nextRepeatTime[key] = null;
        events.push(['end', key, now]);
    };
    const poll = (now) => {
        const out = events.slice();
        events = [];
        for (const key in nextRepeatTime) {
            let nextTime = nextRepeatTime[key];
            if (!nextTime)
                continue;
            let time = now - nextTime;
            if (time < 0)
                continue;
            out.push(['repeat', key, nextTime]);
            while (time > repeatDelay) {
                nextTime += repeatDelay;
                time -= repeatDelay;
                out.push(['repeat', key, nextTime]);
            }
            nextRepeatTime[key] = nextTime;
        }
        return out;
    };
    return {
        onKeydown, onKeyup, poll
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2FuZGJveC9rZXktaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSwyQ0FBMkM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQ3hCLFlBQVksR0FBRyxHQUFHLEVBQ2xCLFdBQVcsR0FBRyxFQUFFLEVBQ2hCLEVBQUU7SUFDRixJQUFJLE1BQU0sR0FBZ0IsRUFBRSxDQUFBO0lBRTVCLE1BQU0sTUFBTSxHQUFtQyxFQUFFLENBQUE7SUFDakQsTUFBTSxjQUFjLEdBQWtDLEVBQUUsQ0FBQTtJQUV4RCxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQVcsRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUM3QyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFNO1FBRXZCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDbEIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUE7UUFFeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNsQyxDQUFDLENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQVcsRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUMzQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO1FBQ25CLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUE7UUFFMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNoQyxDQUFDLENBQUE7SUFFRCxNQUFNLElBQUksR0FBRyxDQUFDLEdBQVcsRUFBZSxFQUFFO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUUxQixNQUFNLEdBQUcsRUFBRSxDQUFBO1FBRVgsS0FBSyxNQUFNLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUNqQyxJQUFJLFFBQVEsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUE7WUFFbEMsSUFBSSxDQUFDLFFBQVE7Z0JBQUUsU0FBUTtZQUV2QixJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFBO1lBRXpCLElBQUksSUFBSSxHQUFHLENBQUM7Z0JBQUUsU0FBUTtZQUV0QixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBRW5DLE9BQU8sSUFBSSxHQUFHLFdBQVcsRUFBRSxDQUFDO2dCQUMxQixRQUFRLElBQUksV0FBVyxDQUFBO2dCQUN2QixJQUFJLElBQUksV0FBVyxDQUFBO2dCQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBQ3JDLENBQUM7WUFFRCxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFBO1FBQ2hDLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQTtJQUNaLENBQUMsQ0FBQTtJQUVELE9BQU87UUFDTCxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUk7S0FDekIsQ0FBQTtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vbGliL3R5cGVzLmpzJ1xuXG50eXBlIEtleUhhbmRsZXJFdmVudCA9ICdzdGFydCcgfCAnZW5kJyB8ICdyZXBlYXQnXG5cbnR5cGUgRXZlbnREYXRhID0gW3R5cGU6IEtleUhhbmRsZXJFdmVudCwga2V5OiBzdHJpbmcsIHRpbWU6IG51bWJlcl1cblxuLy8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQga2V5IHJlcGVhdCBiZWhhdmlvclxuZXhwb3J0IGNvbnN0IGtleUhhbmRsZXIgPSAoXG4gIGluaXRpYWxEZWxheSA9IDUwMCwgXG4gIHJlcGVhdERlbGF5ID0gNTBcbikgPT4ge1xuICBsZXQgZXZlbnRzOiBFdmVudERhdGFbXSA9IFtdXG5cbiAgY29uc3QgaXNEb3duOiBSZWNvcmQ8c3RyaW5nLCBNYXliZTxib29sZWFuPj4gPSB7fVxuICBjb25zdCBuZXh0UmVwZWF0VGltZTogUmVjb3JkPHN0cmluZywgTWF5YmU8bnVtYmVyPj4gPSB7fVxuXG4gIGNvbnN0IG9uS2V5ZG93biA9IChrZXk6IHN0cmluZywgbm93OiBudW1iZXIpID0+IHtcbiAgICBpZiAoaXNEb3duW2tleV0pIHJldHVyblxuXG4gICAgaXNEb3duW2tleV0gPSB0cnVlXG4gICAgbmV4dFJlcGVhdFRpbWVba2V5XSA9IG5vdyArIGluaXRpYWxEZWxheVxuXG4gICAgZXZlbnRzLnB1c2goWydzdGFydCcsIGtleSwgbm93XSlcbiAgfVxuXG4gIGNvbnN0IG9uS2V5dXAgPSAoa2V5OiBzdHJpbmcsIG5vdzogbnVtYmVyKSA9PiB7XG4gICAgaXNEb3duW2tleV0gPSBmYWxzZVxuICAgIG5leHRSZXBlYXRUaW1lW2tleV0gPSBudWxsXG5cbiAgICBldmVudHMucHVzaChbJ2VuZCcsIGtleSwgbm93XSlcbiAgfVxuXG4gIGNvbnN0IHBvbGwgPSAobm93OiBudW1iZXIpOiBFdmVudERhdGFbXSA9PiB7XG4gICAgY29uc3Qgb3V0ID0gZXZlbnRzLnNsaWNlKClcblxuICAgIGV2ZW50cyA9IFtdXG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXh0UmVwZWF0VGltZSkge1xuICAgICAgbGV0IG5leHRUaW1lID0gbmV4dFJlcGVhdFRpbWVba2V5XVxuXG4gICAgICBpZiAoIW5leHRUaW1lKSBjb250aW51ZVxuXG4gICAgICBsZXQgdGltZSA9IG5vdyAtIG5leHRUaW1lXG5cbiAgICAgIGlmICh0aW1lIDwgMCkgY29udGludWVcblxuICAgICAgb3V0LnB1c2goWydyZXBlYXQnLCBrZXksIG5leHRUaW1lXSlcblxuICAgICAgd2hpbGUgKHRpbWUgPiByZXBlYXREZWxheSkge1xuICAgICAgICBuZXh0VGltZSArPSByZXBlYXREZWxheVxuICAgICAgICB0aW1lIC09IHJlcGVhdERlbGF5XG4gICAgICAgIG91dC5wdXNoKFsncmVwZWF0Jywga2V5LCBuZXh0VGltZV0pXG4gICAgICB9XG5cbiAgICAgIG5leHRSZXBlYXRUaW1lW2tleV0gPSBuZXh0VGltZVxuICAgIH1cblxuICAgIHJldHVybiBvdXRcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25LZXlkb3duLCBvbktleXVwLCBwb2xsXG4gIH1cbn1cbiJdfQ==