// override the default key repeat behavior
export const keyHandler = (initialDelay = 500, repeatDelay = 50) => {
    let events = [];
    const isDown = {};
    const nextRepeatTime = {};
    const onKeydown = (key, now) => {
        if (isDown[key])
            return;
        isDown[key] = true;
        nextRepeatTime[key] = now + initialDelay;
        events.push(['start', key, now]);
    };
    const onKeyup = (key, now) => {
        isDown[key] = false;
        nextRepeatTime[key] = null;
        events.push(['end', key, now]);
    };
    const poll = (now) => {
        const out = events.slice();
        events = [];
        for (const key in nextRepeatTime) {
            let nextTime = nextRepeatTime[key];
            if (!nextTime)
                continue;
            let time = now - nextTime;
            if (time < 0)
                continue;
            out.push(['repeat', key, nextTime]);
            while (time > repeatDelay) {
                nextTime += repeatDelay;
                time -= repeatDelay;
                out.push(['repeat', key, nextTime]);
            }
            nextRepeatTime[key] = nextTime;
        }
        return out;
    };
    return {
        onKeydown, onKeyup, poll
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2FuZGJveC9rZXktaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSwyQ0FBMkM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQ3hCLFlBQVksR0FBRyxHQUFHLEVBQ2xCLFdBQVcsR0FBRyxFQUFFLEVBQ2hCLEVBQUU7SUFDRixJQUFJLE1BQU0sR0FBZ0IsRUFBRSxDQUFBO0lBRTVCLE1BQU0sTUFBTSxHQUFtQyxFQUFFLENBQUE7SUFDakQsTUFBTSxjQUFjLEdBQWtDLEVBQUUsQ0FBQTtJQUV4RCxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQVcsRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUM3QyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFNO1FBRXZCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDbEIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUE7UUFFeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNsQyxDQUFDLENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQVcsRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUMzQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO1FBQ25CLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUE7UUFFMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNoQyxDQUFDLENBQUE7SUFFRCxNQUFNLElBQUksR0FBRyxDQUFDLEdBQVcsRUFBZSxFQUFFO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUUxQixNQUFNLEdBQUcsRUFBRSxDQUFBO1FBRVgsS0FBSyxNQUFNLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUNqQyxJQUFJLFFBQVEsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUE7WUFFbEMsSUFBSSxDQUFDLFFBQVE7Z0JBQUUsU0FBUTtZQUV2QixJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFBO1lBRXpCLElBQUksSUFBSSxHQUFHLENBQUM7Z0JBQUUsU0FBUTtZQUV0QixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBRW5DLE9BQU8sSUFBSSxHQUFHLFdBQVcsRUFBRSxDQUFDO2dCQUMxQixRQUFRLElBQUksV0FBVyxDQUFBO2dCQUN2QixJQUFJLElBQUksV0FBVyxDQUFBO2dCQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBQ3JDLENBQUM7WUFFRCxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFBO1FBQ2hDLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQTtJQUNaLENBQUMsQ0FBQTtJQUVELE9BQU87UUFDTCxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUk7S0FDekIsQ0FBQTtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1heWJlIH0gZnJvbSAnLi4vbGliL3R5cGVzLmpzJ1xyXG5cclxudHlwZSBLZXlIYW5kbGVyRXZlbnQgPSAnc3RhcnQnIHwgJ2VuZCcgfCAncmVwZWF0J1xyXG5cclxudHlwZSBFdmVudERhdGEgPSBbdHlwZTogS2V5SGFuZGxlckV2ZW50LCBrZXk6IHN0cmluZywgdGltZTogbnVtYmVyXVxyXG5cclxuLy8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQga2V5IHJlcGVhdCBiZWhhdmlvclxyXG5leHBvcnQgY29uc3Qga2V5SGFuZGxlciA9IChcclxuICBpbml0aWFsRGVsYXkgPSA1MDAsIFxyXG4gIHJlcGVhdERlbGF5ID0gNTBcclxuKSA9PiB7XHJcbiAgbGV0IGV2ZW50czogRXZlbnREYXRhW10gPSBbXVxyXG5cclxuICBjb25zdCBpc0Rvd246IFJlY29yZDxzdHJpbmcsIE1heWJlPGJvb2xlYW4+PiA9IHt9XHJcbiAgY29uc3QgbmV4dFJlcGVhdFRpbWU6IFJlY29yZDxzdHJpbmcsIE1heWJlPG51bWJlcj4+ID0ge31cclxuXHJcbiAgY29uc3Qgb25LZXlkb3duID0gKGtleTogc3RyaW5nLCBub3c6IG51bWJlcikgPT4ge1xyXG4gICAgaWYgKGlzRG93bltrZXldKSByZXR1cm5cclxuXHJcbiAgICBpc0Rvd25ba2V5XSA9IHRydWVcclxuICAgIG5leHRSZXBlYXRUaW1lW2tleV0gPSBub3cgKyBpbml0aWFsRGVsYXlcclxuXHJcbiAgICBldmVudHMucHVzaChbJ3N0YXJ0Jywga2V5LCBub3ddKVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgb25LZXl1cCA9IChrZXk6IHN0cmluZywgbm93OiBudW1iZXIpID0+IHtcclxuICAgIGlzRG93bltrZXldID0gZmFsc2VcclxuICAgIG5leHRSZXBlYXRUaW1lW2tleV0gPSBudWxsXHJcblxyXG4gICAgZXZlbnRzLnB1c2goWydlbmQnLCBrZXksIG5vd10pXHJcbiAgfVxyXG5cclxuICBjb25zdCBwb2xsID0gKG5vdzogbnVtYmVyKTogRXZlbnREYXRhW10gPT4ge1xyXG4gICAgY29uc3Qgb3V0ID0gZXZlbnRzLnNsaWNlKClcclxuXHJcbiAgICBldmVudHMgPSBbXVxyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG5leHRSZXBlYXRUaW1lKSB7XHJcbiAgICAgIGxldCBuZXh0VGltZSA9IG5leHRSZXBlYXRUaW1lW2tleV1cclxuXHJcbiAgICAgIGlmICghbmV4dFRpbWUpIGNvbnRpbnVlXHJcblxyXG4gICAgICBsZXQgdGltZSA9IG5vdyAtIG5leHRUaW1lXHJcblxyXG4gICAgICBpZiAodGltZSA8IDApIGNvbnRpbnVlXHJcblxyXG4gICAgICBvdXQucHVzaChbJ3JlcGVhdCcsIGtleSwgbmV4dFRpbWVdKVxyXG5cclxuICAgICAgd2hpbGUgKHRpbWUgPiByZXBlYXREZWxheSkge1xyXG4gICAgICAgIG5leHRUaW1lICs9IHJlcGVhdERlbGF5XHJcbiAgICAgICAgdGltZSAtPSByZXBlYXREZWxheVxyXG4gICAgICAgIG91dC5wdXNoKFsncmVwZWF0Jywga2V5LCBuZXh0VGltZV0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG5leHRSZXBlYXRUaW1lW2tleV0gPSBuZXh0VGltZVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXRcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBvbktleWRvd24sIG9uS2V5dXAsIHBvbGxcclxuICB9XHJcbn1cclxuIl19