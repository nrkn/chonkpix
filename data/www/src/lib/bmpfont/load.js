import { loadImage } from '../image/load.js';
import { findSizeSlug, parseSizeSlug } from '../slug.js';
import { assrt, assrtInt } from '../util.js';
const fontPath = 'data';
export const monoFontFiles = [
    'ATI_SmallW_6x8',
    'EverexME_5x8',
    'HP_100LX_6x8',
    'Portfolio_6x8',
    'TsengEVA_132_6x8',
    'IBM_EGA_8x8',
    'IBM_VGA_8x14',
    'IBM_VGA_8x16',
    'IBM_VGA_9x8',
    'IBM_VGA_9x14',
    'IBM_VGA_9x16'
];
export const loadFontMono = async (name) => {
    const image = await loadImage(`${fontPath}/Bm437_${name}.png`);
    const sizeSlug = assrt(findSizeSlug(name), 'Expected size slug');
    const [width, height] = parseSizeSlug(sizeSlug);
    const cols = assrtInt(image.width / width);
    const rows = assrtInt(image.height / height);
    const font = {
        type: 'mono',
        width,
        height,
        leading: 0, // built into the bitmap glyphs
        image: image,
        rects: {},
        advance: 0, // built into the bitmap glyphs
        fallback: 127
    };
    for (let r = 0; r < rows; r++) {
        const rowIndex = r * cols;
        for (let c = 0; c < cols; c++) {
            const charCode = rowIndex + c;
            font.rects[charCode] = [c * width, r * height, width, height];
        }
    }
    return font;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYm1wZm9udC9sb2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUN4RCxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUc1QyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUE7QUFFdkIsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHO0lBQzNCLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsY0FBYztJQUNkLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLGNBQWM7SUFDZCxjQUFjO0lBQ2QsYUFBYTtJQUNiLGNBQWM7SUFDZCxjQUFjO0NBQ04sQ0FBQTtBQUlWLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQUUsSUFBa0IsRUFBRSxFQUFFO0lBQ3ZELE1BQU0sS0FBSyxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsUUFBUSxVQUFVLElBQUksTUFBTSxDQUFDLENBQUE7SUFDOUQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFBO0lBQ2hFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBRS9DLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFBO0lBQzFDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBRTVDLE1BQU0sSUFBSSxHQUFhO1FBQ3JCLElBQUksRUFBRSxNQUFNO1FBQ1osS0FBSztRQUNMLE1BQU07UUFDTixPQUFPLEVBQUUsQ0FBQyxFQUFFLCtCQUErQjtRQUMzQyxLQUFLLEVBQUUsS0FBSztRQUNaLEtBQUssRUFBRSxFQUFFO1FBQ1QsT0FBTyxFQUFFLENBQUMsRUFBRSwrQkFBK0I7UUFDM0MsUUFBUSxFQUFFLEdBQUc7S0FDZCxDQUFBO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDekIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzlCLE1BQU0sUUFBUSxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUE7WUFFN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDL0QsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRJbWFnZSB9IGZyb20gJy4uL2ltYWdlL2xvYWQuanMnXHJcbmltcG9ydCB7IGZpbmRTaXplU2x1ZywgcGFyc2VTaXplU2x1ZyB9IGZyb20gJy4uL3NsdWcuanMnXHJcbmltcG9ydCB7IGFzc3J0LCBhc3NydEludCB9IGZyb20gJy4uL3V0aWwuanMnXHJcbmltcG9ydCB7IEJtcEZvbnRNIH0gZnJvbSAnLi90eXBlcy5qcydcclxuXHJcbmNvbnN0IGZvbnRQYXRoID0gJ2RhdGEnXHJcblxyXG5leHBvcnQgY29uc3QgbW9ub0ZvbnRGaWxlcyA9IFtcclxuICAnQVRJX1NtYWxsV182eDgnLFxyXG4gICdFdmVyZXhNRV81eDgnLFxyXG4gICdIUF8xMDBMWF82eDgnLFxyXG4gICdQb3J0Zm9saW9fNng4JyxcclxuICAnVHNlbmdFVkFfMTMyXzZ4OCcsXHJcbiAgJ0lCTV9FR0FfOHg4JyxcclxuICAnSUJNX1ZHQV84eDE0JyxcclxuICAnSUJNX1ZHQV84eDE2JyxcclxuICAnSUJNX1ZHQV85eDgnLFxyXG4gICdJQk1fVkdBXzl4MTQnLFxyXG4gICdJQk1fVkdBXzl4MTYnXHJcbl0gYXMgY29uc3RcclxuXHJcbmV4cG9ydCB0eXBlIE1vbm9Gb250TmFtZSA9IHR5cGVvZiBtb25vRm9udEZpbGVzW251bWJlcl1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkRm9udE1vbm8gPSBhc3luYyAobmFtZTogTW9ub0ZvbnROYW1lKSA9PiB7XHJcbiAgY29uc3QgaW1hZ2UgPSBhd2FpdCBsb2FkSW1hZ2UoYCR7Zm9udFBhdGh9L0JtNDM3XyR7bmFtZX0ucG5nYClcclxuICBjb25zdCBzaXplU2x1ZyA9IGFzc3J0KGZpbmRTaXplU2x1ZyhuYW1lKSwgJ0V4cGVjdGVkIHNpemUgc2x1ZycpXHJcbiAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gcGFyc2VTaXplU2x1ZyhzaXplU2x1ZylcclxuXHJcbiAgY29uc3QgY29scyA9IGFzc3J0SW50KGltYWdlLndpZHRoIC8gd2lkdGgpXHJcbiAgY29uc3Qgcm93cyA9IGFzc3J0SW50KGltYWdlLmhlaWdodCAvIGhlaWdodClcclxuXHJcbiAgY29uc3QgZm9udDogQm1wRm9udE0gPSB7XHJcbiAgICB0eXBlOiAnbW9ubycsXHJcbiAgICB3aWR0aCxcclxuICAgIGhlaWdodCxcclxuICAgIGxlYWRpbmc6IDAsIC8vIGJ1aWx0IGludG8gdGhlIGJpdG1hcCBnbHlwaHNcclxuICAgIGltYWdlOiBpbWFnZSxcclxuICAgIHJlY3RzOiB7fSxcclxuICAgIGFkdmFuY2U6IDAsIC8vIGJ1aWx0IGludG8gdGhlIGJpdG1hcCBnbHlwaHNcclxuICAgIGZhbGxiYWNrOiAxMjdcclxuICB9XHJcblxyXG4gIGZvciAobGV0IHIgPSAwOyByIDwgcm93czsgcisrKSB7XHJcbiAgICBjb25zdCByb3dJbmRleCA9IHIgKiBjb2xzXHJcbiAgICBmb3IgKGxldCBjID0gMDsgYyA8IGNvbHM7IGMrKykge1xyXG4gICAgICBjb25zdCBjaGFyQ29kZSA9IHJvd0luZGV4ICsgY1xyXG5cclxuICAgICAgZm9udC5yZWN0c1tjaGFyQ29kZV0gPSBbYyAqIHdpZHRoLCByICogaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0XVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZvbnRcclxufVxyXG4iXX0=