import { loadImage } from '../image/load.js';
import { findSizeSlug, parseSizeSlug } from '../slug.js';
import { assrt, assrtInt } from '../util.js';
const fontPath = 'data';
export const monoFontFiles = [
    'ATI_SmallW_6x8',
    'EverexME_5x8',
    'HP_100LX_6x8',
    'Portfolio_6x8',
    'TsengEVA_132_6x8',
    'IBM_EGA_8x8',
    'IBM_VGA_8x14',
    'IBM_VGA_8x16',
    'IBM_VGA_9x8',
    'IBM_VGA_9x14',
    'IBM_VGA_9x16'
];
export const loadFontMono = async (name) => {
    const image = await loadImage(`${fontPath}/Bm437_${name}.png`);
    const sizeSlug = assrt(findSizeSlug(name), 'Expected size slug');
    const [width, height] = parseSizeSlug(sizeSlug);
    const cols = assrtInt(image.width / width);
    const rows = assrtInt(image.height / height);
    const font = {
        type: 'mono',
        width,
        height,
        leading: 0, // built into the bitmap glyphs
        image: image,
        rects: {},
        advance: 0, // built into the bitmap glyphs
        fallback: 127
    };
    for (let r = 0; r < rows; r++) {
        const rowIndex = r * cols;
        for (let c = 0; c < cols; c++) {
            const charCode = rowIndex + c;
            font.rects[charCode] = [c * width, r * height, width, height];
        }
    }
    return font;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvYm1wZm9udC9sb2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUN4RCxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUc1QyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUE7QUFFdkIsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHO0lBQzNCLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsY0FBYztJQUNkLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLGNBQWM7SUFDZCxjQUFjO0lBQ2QsYUFBYTtJQUNiLGNBQWM7SUFDZCxjQUFjO0NBQ04sQ0FBQTtBQUlWLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQUUsSUFBa0IsRUFBRSxFQUFFO0lBQ3ZELE1BQU0sS0FBSyxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsUUFBUSxVQUFVLElBQUksTUFBTSxDQUFDLENBQUE7SUFDOUQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFBO0lBQ2hFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBRS9DLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFBO0lBQzFDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBRTVDLE1BQU0sSUFBSSxHQUFhO1FBQ3JCLElBQUksRUFBRSxNQUFNO1FBQ1osS0FBSztRQUNMLE1BQU07UUFDTixPQUFPLEVBQUUsQ0FBQyxFQUFFLCtCQUErQjtRQUMzQyxLQUFLLEVBQUUsS0FBSztRQUNaLEtBQUssRUFBRSxFQUFFO1FBQ1QsT0FBTyxFQUFFLENBQUMsRUFBRSwrQkFBK0I7UUFDM0MsUUFBUSxFQUFFLEdBQUc7S0FDZCxDQUFBO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDekIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzlCLE1BQU0sUUFBUSxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUE7WUFFN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDL0QsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRJbWFnZSB9IGZyb20gJy4uL2ltYWdlL2xvYWQuanMnXG5pbXBvcnQgeyBmaW5kU2l6ZVNsdWcsIHBhcnNlU2l6ZVNsdWcgfSBmcm9tICcuLi9zbHVnLmpzJ1xuaW1wb3J0IHsgYXNzcnQsIGFzc3J0SW50IH0gZnJvbSAnLi4vdXRpbC5qcydcbmltcG9ydCB7IEJtcEZvbnRNIH0gZnJvbSAnLi90eXBlcy5qcydcblxuY29uc3QgZm9udFBhdGggPSAnZGF0YSdcblxuZXhwb3J0IGNvbnN0IG1vbm9Gb250RmlsZXMgPSBbXG4gICdBVElfU21hbGxXXzZ4OCcsXG4gICdFdmVyZXhNRV81eDgnLFxuICAnSFBfMTAwTFhfNng4JyxcbiAgJ1BvcnRmb2xpb182eDgnLFxuICAnVHNlbmdFVkFfMTMyXzZ4OCcsXG4gICdJQk1fRUdBXzh4OCcsXG4gICdJQk1fVkdBXzh4MTQnLFxuICAnSUJNX1ZHQV84eDE2JyxcbiAgJ0lCTV9WR0FfOXg4JyxcbiAgJ0lCTV9WR0FfOXgxNCcsXG4gICdJQk1fVkdBXzl4MTYnXG5dIGFzIGNvbnN0XG5cbmV4cG9ydCB0eXBlIE1vbm9Gb250TmFtZSA9IHR5cGVvZiBtb25vRm9udEZpbGVzW251bWJlcl1cblxuZXhwb3J0IGNvbnN0IGxvYWRGb250TW9ubyA9IGFzeW5jIChuYW1lOiBNb25vRm9udE5hbWUpID0+IHtcbiAgY29uc3QgaW1hZ2UgPSBhd2FpdCBsb2FkSW1hZ2UoYCR7Zm9udFBhdGh9L0JtNDM3XyR7bmFtZX0ucG5nYClcbiAgY29uc3Qgc2l6ZVNsdWcgPSBhc3NydChmaW5kU2l6ZVNsdWcobmFtZSksICdFeHBlY3RlZCBzaXplIHNsdWcnKVxuICBjb25zdCBbd2lkdGgsIGhlaWdodF0gPSBwYXJzZVNpemVTbHVnKHNpemVTbHVnKVxuXG4gIGNvbnN0IGNvbHMgPSBhc3NydEludChpbWFnZS53aWR0aCAvIHdpZHRoKVxuICBjb25zdCByb3dzID0gYXNzcnRJbnQoaW1hZ2UuaGVpZ2h0IC8gaGVpZ2h0KVxuXG4gIGNvbnN0IGZvbnQ6IEJtcEZvbnRNID0ge1xuICAgIHR5cGU6ICdtb25vJyxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbGVhZGluZzogMCwgLy8gYnVpbHQgaW50byB0aGUgYml0bWFwIGdseXBoc1xuICAgIGltYWdlOiBpbWFnZSxcbiAgICByZWN0czoge30sXG4gICAgYWR2YW5jZTogMCwgLy8gYnVpbHQgaW50byB0aGUgYml0bWFwIGdseXBoc1xuICAgIGZhbGxiYWNrOiAxMjdcbiAgfVxuXG4gIGZvciAobGV0IHIgPSAwOyByIDwgcm93czsgcisrKSB7XG4gICAgY29uc3Qgcm93SW5kZXggPSByICogY29sc1xuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY29sczsgYysrKSB7XG4gICAgICBjb25zdCBjaGFyQ29kZSA9IHJvd0luZGV4ICsgY1xuXG4gICAgICBmb250LnJlY3RzW2NoYXJDb2RlXSA9IFtjICogd2lkdGgsIHIgKiBoZWlnaHQsIHdpZHRoLCBoZWlnaHRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvbnRcbn1cbiJdfQ==