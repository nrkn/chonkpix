import { clampRect } from './util.js';
export const imageQuery = (imageData, predicate, rect = [0, 0, imageData.width, imageData.height]) => {
    rect = clampRect(imageData.width, imageData.height, rect);
    const [x0, y0, w, h] = rect;
    const x1 = x0 + w;
    const y1 = y0 + h;
    for (let y = y0; y < y1; y++) {
        for (let x = x0; x < x1; x++) {
            const i = (y * imageData.width + x) * 4;
            const r = imageData.data[i];
            const g = imageData.data[i + 1];
            const b = imageData.data[i + 2];
            const a = imageData.data[i + 3];
            if (predicate(r, g, b, a, x, y, i)) {
                return [x, y];
            }
        }
    }
    return null;
};
export const imageQueryAll = (imageData, predicate, rect = [0, 0, imageData.width, imageData.height]) => {
    rect = clampRect(imageData.width, imageData.height, rect);
    const [x0, y0, w, h] = rect;
    const x1 = x0 + w;
    const y1 = y0 + h;
    const pts = [];
    for (let y = y0; y < y1; y++) {
        for (let x = x0; x < x1; x++) {
            const i = (y * imageData.width + x) * 4;
            const r = imageData.data[i];
            const g = imageData.data[i + 1];
            const b = imageData.data[i + 2];
            const a = imageData.data[i + 3];
            if (predicate(r, g, b, a, x, y, i)) {
                pts.push([x, y]);
            }
        }
    }
    return pts;
};
export const rowQuery = (imageData, predicate, rect = [0, 0, imageData.width, imageData.height]) => {
    rect = clampRect(imageData.width, imageData.height, rect);
    const [x0, y0, w, h] = rect;
    const x1 = x0 + w;
    const y1 = y0 + h;
    const rows = [];
    let inRow = false;
    let rowY = 0;
    let rowStart = 0;
    let rowEnd = 0;
    for (let y = y0; y < y1; y++) {
        for (let x = x0; x < x1; x++) {
            const i = (y * imageData.width + x) * 4;
            const r = imageData.data[i];
            const g = imageData.data[i + 1];
            const b = imageData.data[i + 2];
            const a = imageData.data[i + 3];
            if (predicate(r, g, b, a, x, y, i)) {
                if (!inRow) {
                    inRow = true;
                    rowY = y;
                    rowStart = x;
                    rowEnd = x;
                }
                else {
                    rowEnd = x;
                }
            }
            else {
                if (inRow) {
                    rows.push([rowY, rowStart, rowEnd]);
                    inRow = false;
                }
            }
        }
        if (inRow) {
            rows.push([rowY, rowStart, rowEnd]);
            inRow = false;
        }
    }
    return rows;
};
//# sourceMappingURL=data:application/json;base64,