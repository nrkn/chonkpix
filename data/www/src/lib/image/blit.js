import { clampRow, clampRows, clampTransfer } from './util.js';
// directly copy pixels from one image to another
export const blit = (src, dest, transfer = [
    0, 0, src.width, src.height, 0, 0
]) => {
    const [sx, sy, sw, sh, dx, dy] = clampTransfer(src.width, src.height, dest.width, dest.height, transfer);
    for (let j = 0; j < sh; j++) {
        const y = j + sy;
        const rowIndex = y * src.width;
        const startIndex = (rowIndex + sx) * 4;
        const endIndex = startIndex + sw * 4;
        const row = src.data.subarray(startIndex, endIndex);
        const destRowIndex = (j + dy) * dest.width * 4;
        const destStartIndex = (destRowIndex + dx * 4);
        dest.data.set(row, destStartIndex);
    }
    return dest;
};
// copies rows from one image to another
// much faster than blit or composite etc when the amount of src to be copied
// is sparse
export const blitRows = (src, srcRows, dest, dx = 0, dy = 0) => {
    srcRows = clampRows(srcRows, src.width, src.height);
    for (let i = 0; i < srcRows.length; i++) {
        const srcRow = srcRows[i];
        const srcW = srcRow[2] - srcRow[1] + 1;
        const destRow = clampRow([srcRow[0] + dy, srcRow[1] + dx, srcRow[2] + dx], dest.width, dest.height);
        if (!destRow)
            continue;
        const destW = destRow[2] - destRow[1] + 1;
        const w = Math.min(srcW, destW);
        const srcIndex = (srcRow[0] * src.width + srcRow[1]) * 4;
        const destIndex = (destRow[0] * dest.width + destRow[1]) * 4;
        const srcPixels = src.data.subarray(srcIndex, srcIndex + w * 4);
        dest.data.set(srcPixels, destIndex);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxpdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvaW1hZ2UvYmxpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFOUQsaURBQWlEO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUNsQixHQUFjLEVBQUUsSUFBZSxFQUMvQixXQUFlO0lBQ2IsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7Q0FDbEMsRUFDRCxFQUFFO0lBQ0YsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsYUFBYSxDQUM1QyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FDekQsQ0FBQTtJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2hCLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFBO1FBRTlCLE1BQU0sVUFBVSxHQUFHLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN0QyxNQUFNLFFBQVEsR0FBRyxVQUFVLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUVwQyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFFbkQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDOUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBRTlDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDLENBQUE7QUFFRCx3Q0FBd0M7QUFDeEMsNkVBQTZFO0FBQzdFLFlBQVk7QUFDWixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDdEIsR0FBYyxFQUFFLE9BQW1CLEVBQUUsSUFBZSxFQUNwRCxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQ2QsRUFBRTtJQUNGLE9BQU8sR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRW5ELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3pCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRXRDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FDdEIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FDMUUsQ0FBQTtRQUVELElBQUksQ0FBQyxPQUFPO1lBQUUsU0FBUTtRQUV0QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUV6QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUUvQixNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN4RCxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUU1RCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUUvRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDckMsQ0FBQztBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFQ2IH0gZnJvbSAnLi4vdHlwZXMuanMnXHJcbmltcG9ydCB7IFJvdyB9IGZyb20gJy4vdHlwZXMuanMnXHJcbmltcG9ydCB7IGNsYW1wUm93LCBjbGFtcFJvd3MsIGNsYW1wVHJhbnNmZXIgfSBmcm9tICcuL3V0aWwuanMnXHJcblxyXG4vLyBkaXJlY3RseSBjb3B5IHBpeGVscyBmcm9tIG9uZSBpbWFnZSB0byBhbm90aGVyXHJcbmV4cG9ydCBjb25zdCBibGl0ID0gKFxyXG4gIHNyYzogSW1hZ2VEYXRhLCBkZXN0OiBJbWFnZURhdGEsXHJcbiAgdHJhbnNmZXI6IFQ2ID0gW1xyXG4gICAgMCwgMCwgc3JjLndpZHRoLCBzcmMuaGVpZ2h0LCAwLCAwXHJcbiAgXVxyXG4pID0+IHtcclxuICBjb25zdCBbc3gsIHN5LCBzdywgc2gsIGR4LCBkeV0gPSBjbGFtcFRyYW5zZmVyKFxyXG4gICAgc3JjLndpZHRoLCBzcmMuaGVpZ2h0LCBkZXN0LndpZHRoLCBkZXN0LmhlaWdodCwgdHJhbnNmZXJcclxuICApXHJcblxyXG4gIGZvciAobGV0IGogPSAwOyBqIDwgc2g7IGorKykge1xyXG4gICAgY29uc3QgeSA9IGogKyBzeVxyXG4gICAgY29uc3Qgcm93SW5kZXggPSB5ICogc3JjLndpZHRoXHJcblxyXG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IChyb3dJbmRleCArIHN4KSAqIDRcclxuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHN3ICogNFxyXG5cclxuICAgIGNvbnN0IHJvdyA9IHNyYy5kYXRhLnN1YmFycmF5KHN0YXJ0SW5kZXgsIGVuZEluZGV4KVxyXG5cclxuICAgIGNvbnN0IGRlc3RSb3dJbmRleCA9IChqICsgZHkpICogZGVzdC53aWR0aCAqIDRcclxuICAgIGNvbnN0IGRlc3RTdGFydEluZGV4ID0gKGRlc3RSb3dJbmRleCArIGR4ICogNClcclxuXHJcbiAgICBkZXN0LmRhdGEuc2V0KHJvdywgZGVzdFN0YXJ0SW5kZXgpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGVzdFxyXG59XHJcblxyXG4vLyBjb3BpZXMgcm93cyBmcm9tIG9uZSBpbWFnZSB0byBhbm90aGVyXHJcbi8vIG11Y2ggZmFzdGVyIHRoYW4gYmxpdCBvciBjb21wb3NpdGUgZXRjIHdoZW4gdGhlIGFtb3VudCBvZiBzcmMgdG8gYmUgY29waWVkXHJcbi8vIGlzIHNwYXJzZVxyXG5leHBvcnQgY29uc3QgYmxpdFJvd3MgPSAoXHJcbiAgc3JjOiBJbWFnZURhdGEsIHNyY1Jvd3M6IFJvdzxhbnk+W10sIGRlc3Q6IEltYWdlRGF0YSxcclxuICBkeCA9IDAsIGR5ID0gMFxyXG4pID0+IHtcclxuICBzcmNSb3dzID0gY2xhbXBSb3dzKHNyY1Jvd3MsIHNyYy53aWR0aCwgc3JjLmhlaWdodClcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcmNSb3dzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBzcmNSb3cgPSBzcmNSb3dzW2ldXHJcbiAgICBjb25zdCBzcmNXID0gc3JjUm93WzJdIC0gc3JjUm93WzFdICsgMVxyXG5cclxuICAgIGNvbnN0IGRlc3RSb3cgPSBjbGFtcFJvdyhcclxuICAgICAgW3NyY1Jvd1swXSArIGR5LCBzcmNSb3dbMV0gKyBkeCwgc3JjUm93WzJdICsgZHhdLCBkZXN0LndpZHRoLCBkZXN0LmhlaWdodFxyXG4gICAgKVxyXG5cclxuICAgIGlmICghZGVzdFJvdykgY29udGludWVcclxuXHJcbiAgICBjb25zdCBkZXN0VyA9IGRlc3RSb3dbMl0gLSBkZXN0Um93WzFdICsgMVxyXG5cclxuICAgIGNvbnN0IHcgPSBNYXRoLm1pbihzcmNXLCBkZXN0VylcclxuXHJcbiAgICBjb25zdCBzcmNJbmRleCA9IChzcmNSb3dbMF0gKiBzcmMud2lkdGggKyBzcmNSb3dbMV0pICogNFxyXG4gICAgY29uc3QgZGVzdEluZGV4ID0gKGRlc3RSb3dbMF0gKiBkZXN0LndpZHRoICsgZGVzdFJvd1sxXSkgKiA0XHJcblxyXG4gICAgY29uc3Qgc3JjUGl4ZWxzID0gc3JjLmRhdGEuc3ViYXJyYXkoc3JjSW5kZXgsIHNyY0luZGV4ICsgdyAqIDQpXHJcblxyXG4gICAgZGVzdC5kYXRhLnNldChzcmNQaXhlbHMsIGRlc3RJbmRleClcclxuICB9XHJcbn1cclxuIl19