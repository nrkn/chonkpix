import { clampRow, clampRows, clampTransfer } from './util.js';
// directly copy pixels from one image to another
export const blit = (src, dest, transfer = [
    0, 0, src.width, src.height, 0, 0
]) => {
    const [sx, sy, sw, sh, dx, dy] = clampTransfer(src.width, src.height, dest.width, dest.height, transfer);
    for (let j = 0; j < sh; j++) {
        const y = j + sy;
        const rowIndex = y * src.width;
        const startIndex = (rowIndex + sx) * 4;
        const endIndex = startIndex + sw * 4;
        const row = src.data.subarray(startIndex, endIndex);
        const destRowIndex = (j + dy) * dest.width * 4;
        const destStartIndex = (destRowIndex + dx * 4);
        dest.data.set(row, destStartIndex);
    }
    return dest;
};
// copies rows from one image to another
// much faster than blit or composite etc when the amount of src to be copied
// is sparse
export const blitRows = (src, srcRows, dest, dx = 0, dy = 0) => {
    srcRows = clampRows(srcRows, src.width, src.height);
    for (let i = 0; i < srcRows.length; i++) {
        const srcRow = srcRows[i];
        const srcW = srcRow[2] - srcRow[1] + 1;
        const destRow = clampRow([srcRow[0] + dy, srcRow[1] + dx, srcRow[2] + dx], dest.width, dest.height);
        if (!destRow)
            continue;
        const destW = destRow[2] - destRow[1] + 1;
        const w = Math.min(srcW, destW);
        const srcIndex = (srcRow[0] * src.width + srcRow[1]) * 4;
        const destIndex = (destRow[0] * dest.width + destRow[1]) * 4;
        const srcPixels = src.data.subarray(srcIndex, srcIndex + w * 4);
        dest.data.set(srcPixels, destIndex);
    }
};
// when the source and dest have the same width, and you want to blit a number 
// of full rows from one to the other, you can do it in a single copy
export const blitFullWidth = (src, dest, sy, sh, dy) => {
    if (src.width !== dest.width) {
        throw Error('Source and destination must have the same width');
    }
    if (sy < 0) {
        sh += sy;
        dy -= sy;
        sy = 0;
    }
    if (sy + sh > src.height) {
        sh = src.height - sy;
    }
    if (dy + sh > dest.height) {
        sh = dest.height - dy;
    }
    const srcIndex = sy * src.width * 4;
    const srcSize = sh * src.width * 4;
    const destIndex = dy * dest.width * 4;
    dest.data.set(src.data.subarray(srcIndex, srcIndex + srcSize), destIndex);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxpdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvaW1hZ2UvYmxpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFOUQsaURBQWlEO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUNsQixHQUFjLEVBQUUsSUFBZSxFQUMvQixXQUFlO0lBQ2IsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7Q0FDbEMsRUFDRCxFQUFFO0lBQ0YsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsYUFBYSxDQUM1QyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FDekQsQ0FBQTtJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUM1QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2hCLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFBO1FBRTlCLE1BQU0sVUFBVSxHQUFHLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN0QyxNQUFNLFFBQVEsR0FBRyxVQUFVLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUVwQyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFFbkQs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QztJQUVELElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDekIsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFBO0lBQ3RCLENBQUM7SUFFRCxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzFCLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQTtJQUN2QixDQUFDO0lBRUQsTUFBTSxRQUFRLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBQ25DLE1BQU0sT0FBTyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUVsQyxNQUFNLFNBQVMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7SUFFckMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsR0FBRyxPQUFPLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQTtBQUMzRSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUNiB9IGZyb20gJy4uL3R5cGVzLmpzJ1xuaW1wb3J0IHsgUm93IH0gZnJvbSAnLi90eXBlcy5qcydcbmltcG9ydCB7IGNsYW1wUm93LCBjbGFtcFJvd3MsIGNsYW1wVHJhbnNmZXIgfSBmcm9tICcuL3V0aWwuanMnXG5cbi8vIGRpcmVjdGx5IGNvcHkgcGl4ZWxzIGZyb20gb25lIGltYWdlIHRvIGFub3RoZXJcbmV4cG9ydCBjb25zdCBibGl0ID0gKFxuICBzcmM6IEltYWdlRGF0YSwgZGVzdDogSW1hZ2VEYXRhLFxuICB0cmFuc2ZlcjogVDYgPSBbXG4gICAgMCwgMCwgc3JjLndpZHRoLCBzcmMuaGVpZ2h0LCAwLCAwXG4gIF1cbikgPT4ge1xuICBjb25zdCBbc3gsIHN5LCBzdywgc2gsIGR4LCBkeV0gPSBjbGFtcFRyYW5zZmVyKFxuICAgIHNyYy53aWR0aCwgc3JjLmhlaWdodCwgZGVzdC53aWR0aCwgZGVzdC5oZWlnaHQsIHRyYW5zZmVyXG4gIClcblxuICBmb3IgKGxldCBqID0gMDsgaiA8IHNoOyBqKyspIHtcbiAgICBjb25zdCB5ID0gaiArIHN5XG4gICAgY29uc3Qgcm93SW5kZXggPSB5ICogc3JjLndpZHRoXG5cbiAgICBjb25zdCBzdGFydEluZGV4ID0gKHJvd0luZGV4ICsgc3gpICogNFxuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHN3ICogNFxuXG4gICAgY29uc3Qgcm93ID0gc3JjLmRhdGEuc3ViYXJyYXkoc3RhcnRJbmRleCwgZW5kSW5kZXgpXG5cbiAgICBjb25zdCBkZXN0Um93SW5kZXggPSAoaiArIGR5KSAqIGRlc3Qud2lkdGggKiA0XG4gICAgY29uc3QgZGVzdFN0YXJ0SW5kZXggPSAoZGVzdFJvd0luZGV4ICsgZHggKiA0KVxuXG4gICAgZGVzdC5kYXRhLnNldChyb3csIGRlc3RTdGFydEluZGV4KVxuICB9XG5cbiAgcmV0dXJuIGRlc3Rcbn1cblxuLy8gY29waWVzIHJvd3MgZnJvbSBvbmUgaW1hZ2UgdG8gYW5vdGhlclxuLy8gbXVjaCBmYXN0ZXIgdGhhbiBibGl0IG9yIGNvbXBvc2l0ZSBldGMgd2hlbiB0aGUgYW1vdW50IG9mIHNyYyB0byBiZSBjb3BpZWRcbi8vIGlzIHNwYXJzZVxuZXhwb3J0IGNvbnN0IGJsaXRSb3dzID0gKFxuICBzcmM6IEltYWdlRGF0YSwgc3JjUm93czogUm93PGFueT5bXSwgZGVzdDogSW1hZ2VEYXRhLFxuICBkeCA9IDAsIGR5ID0gMFxuKSA9PiB7XG4gIHNyY1Jvd3MgPSBjbGFtcFJvd3Moc3JjUm93cywgc3JjLndpZHRoLCBzcmMuaGVpZ2h0KVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjUm93cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNyY1JvdyA9IHNyY1Jvd3NbaV1cbiAgICBjb25zdCBzcmNXID0gc3JjUm93WzJdIC0gc3JjUm93WzFdICsgMVxuXG4gICAgY29uc3QgZGVzdFJvdyA9IGNsYW1wUm93KFxuICAgICAgW3NyY1Jvd1swXSArIGR5LCBzcmNSb3dbMV0gKyBkeCwgc3JjUm93WzJdICsgZHhdLCBkZXN0LndpZHRoLCBkZXN0LmhlaWdodFxuICAgIClcblxuICAgIGlmICghZGVzdFJvdykgY29udGludWVcblxuICAgIGNvbnN0IGRlc3RXID0gZGVzdFJvd1syXSAtIGRlc3RSb3dbMV0gKyAxXG5cbiAgICBjb25zdCB3ID0gTWF0aC5taW4oc3JjVywgZGVzdFcpXG5cbiAgICBjb25zdCBzcmNJbmRleCA9IChzcmNSb3dbMF0gKiBzcmMud2lkdGggKyBzcmNSb3dbMV0pICogNFxuICAgIGNvbnN0IGRlc3RJbmRleCA9IChkZXN0Um93WzBdICogZGVzdC53aWR0aCArIGRlc3RSb3dbMV0pICogNFxuXG4gICAgY29uc3Qgc3JjUGl4ZWxzID0gc3JjLmRhdGEuc3ViYXJyYXkoc3JjSW5kZXgsIHNyY0luZGV4ICsgdyAqIDQpXG5cbiAgICBkZXN0LmRhdGEuc2V0KHNyY1BpeGVscywgZGVzdEluZGV4KVxuICB9XG59XG5cbi8vIHdoZW4gdGhlIHNvdXJjZSBhbmQgZGVzdCBoYXZlIHRoZSBzYW1lIHdpZHRoLCBhbmQgeW91IHdhbnQgdG8gYmxpdCBhIG51bWJlciBcbi8vIG9mIGZ1bGwgcm93cyBmcm9tIG9uZSB0byB0aGUgb3RoZXIsIHlvdSBjYW4gZG8gaXQgaW4gYSBzaW5nbGUgY29weVxuZXhwb3J0IGNvbnN0IGJsaXRGdWxsV2lkdGggPSAoXG4gIHNyYzogSW1hZ2VEYXRhLCBkZXN0OiBJbWFnZURhdGEsIHN5OiBudW1iZXIsIHNoOiBudW1iZXIsIGR5OiBudW1iZXJcbikgPT4ge1xuICBpZiAoc3JjLndpZHRoICE9PSBkZXN0LndpZHRoKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1NvdXJjZSBhbmQgZGVzdGluYXRpb24gbXVzdCBoYXZlIHRoZSBzYW1lIHdpZHRoJylcbiAgfVxuXG4gIGlmIChzeSA8IDApIHtcbiAgICBzaCArPSBzeVxuICAgIGR5IC09IHN5XG4gICAgc3kgPSAwXG4gIH1cblxuICBpZiAoc3kgKyBzaCA+IHNyYy5oZWlnaHQpIHtcbiAgICBzaCA9IHNyYy5oZWlnaHQgLSBzeVxuICB9XG5cbiAgaWYgKGR5ICsgc2ggPiBkZXN0LmhlaWdodCkge1xuICAgIHNoID0gZGVzdC5oZWlnaHQgLSBkeVxuICB9XG5cbiAgY29uc3Qgc3JjSW5kZXggPSBzeSAqIHNyYy53aWR0aCAqIDRcbiAgY29uc3Qgc3JjU2l6ZSA9IHNoICogc3JjLndpZHRoICogNFxuXG4gIGNvbnN0IGRlc3RJbmRleCA9IGR5ICogZGVzdC53aWR0aCAqIDRcblxuICBkZXN0LmRhdGEuc2V0KHNyYy5kYXRhLnN1YmFycmF5KHNyY0luZGV4LCBzcmNJbmRleCArIHNyY1NpemUpLCBkZXN0SW5kZXgpXG59Il19