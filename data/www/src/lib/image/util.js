export const clampTransfer = (srcW, srcH, destW, destH, transfer) => {
    let [sx, sy, sw, sh, dx, dy] = transfer;
    if (sx < 0) {
        sw += sx;
        dx -= sx;
        sx = 0;
    }
    if (sy < 0) {
        sh += sy;
        dy -= sy;
        sy = 0;
    }
    if (sx + sw > srcW) {
        sw = srcW - sx;
    }
    if (sy + sh > srcH) {
        sh = srcH - sy;
    }
    if (dx < 0) {
        sw += dx;
        sx -= dx;
        dx = 0;
    }
    if (dy < 0) {
        sh += dy;
        sy -= dy;
        dy = 0;
    }
    if (dx + sw > destW) {
        sw = destW - dx;
    }
    if (dy + sh > destH) {
        sh = destH - dy;
    }
    if (sw < 0)
        sw = 0;
    if (sh < 0)
        sh = 0;
    return [sx, sy, sw, sh, dx, dy];
};
export const clampRect = (srcW, srcH, rect) => {
    let [x, y, w, h] = rect;
    if (x < 0) {
        w += x;
        x = 0;
    }
    if (y < 0) {
        h += y;
        y = 0;
    }
    if (x + w > srcW) {
        w = srcW - x;
    }
    if (y + h > srcH) {
        h = srcH - y;
    }
    if (w < 0)
        w = 0;
    if (h < 0)
        h = 0;
    return [x, y, w, h];
};
export const clampRows = (rows, w, h) => rows.reduce((acc, [y, x0, x1, ...args]) => {
    if (y < 0 || y >= h)
        return acc;
    let x0c = Math.max(x0, 0);
    let x1c = Math.min(x1, w);
    if (x0c > x1c)
        return acc;
    acc.push([y, x0c, x1c, ...args]);
    return acc;
}, []);
export const clampRow = (row, w, h) => {
    const [y, x0, x1, ...args] = row;
    if (y < 0 || y >= h)
        return null;
    let x0c = Math.max(x0, 0);
    let x1c = Math.min(x1, w);
    if (x0c > x1c)
        return null;
    return [y, x0c, x1c, ...args];
};
export const pointsToIndices = (w, h, channels) => (points) => points.reduce((acc, [x, y]) => {
    if (x < 0 || x >= w || y < 0 || y >= h)
        return acc;
    acc.push((y * w + x) * channels);
    return acc;
}, []);
export const pset = (image, x, y, color) => {
    const view = new Uint32Array(image.data.buffer);
    const index = y * image.width + x;
    view[index] = color;
};
export const pget = (image, x, y) => {
    const view = new Uint32Array(image.data.buffer);
    const index = y * image.width + x;
    return view[index];
};
//# sourceMappingURL=data:application/json;base64,