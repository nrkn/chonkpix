export const clampTransfer = (srcW, srcH, destW, destH, transfer) => {
    let [sx, sy, sw, sh, dx, dy] = transfer;
    if (sx < 0) {
        sw += sx;
        dx -= sx;
        sx = 0;
    }
    if (sy < 0) {
        sh += sy;
        dy -= sy;
        sy = 0;
    }
    if (sx + sw > srcW) {
        sw = srcW - sx;
    }
    if (sy + sh > srcH) {
        sh = srcH - sy;
    }
    if (dx < 0) {
        sw += dx;
        sx -= dx;
        dx = 0;
    }
    if (dy < 0) {
        sh += dy;
        sy -= dy;
        dy = 0;
    }
    if (dx + sw > destW) {
        sw = destW - dx;
    }
    if (dy + sh > destH) {
        sh = destH - dy;
    }
    if (sw < 0)
        sw = 0;
    if (sh < 0)
        sh = 0;
    return [sx, sy, sw, sh, dx, dy];
};
export const clampRect = (srcW, srcH, rect) => {
    let [x, y, w, h] = rect;
    if (x < 0) {
        w += x;
        x = 0;
    }
    if (y < 0) {
        h += y;
        y = 0;
    }
    if (x + w > srcW) {
        w = srcW - x;
    }
    if (y + h > srcH) {
        h = srcH - y;
    }
    if (w < 0)
        w = 0;
    if (h < 0)
        h = 0;
    return [x, y, w, h];
};
export const clampRows = (rows, w, h) => rows.reduce((acc, [y, x0, x1, ...args]) => {
    if (y < 0 || y >= h)
        return acc;
    let x0c = Math.max(x0, 0);
    let x1c = Math.min(x1, w);
    if (x0c > x1c)
        return acc;
    acc.push([y, x0c, x1c, ...args]);
    return acc;
}, []);
export const clampRow = (row, w, h) => {
    const [y, x0, x1, ...args] = row;
    if (y < 0 || y >= h)
        return null;
    let x0c = Math.max(x0, 0);
    let x1c = Math.min(x1, w);
    if (x0c > x1c)
        return null;
    return [y, x0c, x1c, ...args];
};
export const pointsToIndices = (w, h, channels) => (points) => points.reduce((acc, [x, y]) => {
    if (x < 0 || x >= w || y < 0 || y >= h)
        return acc;
    acc.push((y * w + x) * channels);
    return acc;
}, []);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvaW1hZ2UvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FDM0IsSUFBWSxFQUFFLElBQVksRUFBRSxLQUFhLEVBQUUsS0FBYSxFQUN4RCxRQUFZLEVBQ1IsRUFBRTtJQUNOLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQTtJQUV2QyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNYLEVBQUUsSUFBSSxFQUFFLENBQUE7UUFDUixFQUFFLElBQUksRUFBRSxDQUFBO1FBQ1IsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNSLENBQUM7SUFFRCxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNYLEVBQUUsSUFBSSxFQUFFLENBQUE7UUFDUixFQUFFLElBQUksRUFBRSxDQUFBO1FBQ1IsRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUNSLENBQUM7SUFFRCxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDbkIsRUFBRSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDaEIsQ0FBQztJQUVELElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUNuQixFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtJQUNoQixDQUFDO0lBRUQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDWCxFQUFFLElBQUksRUFBRSxDQUFBO1FBQ1IsRUFBRSxJQUFJLEVBQUUsQ0FBQTtRQUNSLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDUixDQUFDO0lBRUQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDWCxFQUFFLElBQUksRUFB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RSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUE7SUFFaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUE7SUFFaEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDekIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFekIsSUFBSSxHQUFHLEdBQUcsR0FBRztRQUFFLE9BQU8sSUFBSSxDQUFBO0lBRTFCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBYSxDQUFBO0FBQzNDLENBQUMsQ0FBQTtBQUdELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsUUFBZ0IsRUFBRSxFQUFFLENBQ3hFLENBQUMsTUFBWSxFQUFFLEVBQUUsQ0FDZixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sR0FBRyxDQUFBO0lBRWxELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFBO0lBRWhDLE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyxFQUFFLEVBQWMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm93IH0gZnJvbSAnLi90eXBlcy5qcydcclxuaW1wb3J0IHsgVDIsIFQ0LCBUNiB9IGZyb20gJy4uL3R5cGVzLmpzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IGNsYW1wVHJhbnNmZXIgPSAoXHJcbiAgc3JjVzogbnVtYmVyLCBzcmNIOiBudW1iZXIsIGRlc3RXOiBudW1iZXIsIGRlc3RIOiBudW1iZXIsXHJcbiAgdHJhbnNmZXI6IFQ2XHJcbik6IFQ2ID0+IHtcclxuICBsZXQgW3N4LCBzeSwgc3csIHNoLCBkeCwgZHldID0gdHJhbnNmZXJcclxuXHJcbiAgaWYgKHN4IDwgMCkge1xyXG4gICAgc3cgKz0gc3hcclxuICAgIGR4IC09IHN4XHJcbiAgICBzeCA9IDBcclxuICB9XHJcblxyXG4gIGlmIChzeSA8IDApIHtcclxuICAgIHNoICs9IHN5XHJcbiAgICBkeSAtPSBzeVxyXG4gICAgc3kgPSAwXHJcbiAgfVxyXG5cclxuICBpZiAoc3ggKyBzdyA+IHNyY1cpIHtcclxuICAgIHN3ID0gc3JjVyAtIHN4XHJcbiAgfVxyXG5cclxuICBpZiAoc3kgKyBzaCA+IHNyY0gpIHtcclxuICAgIHNoID0gc3JjSCAtIHN5XHJcbiAgfVxyXG5cclxuICBpZiAoZHggPCAwKSB7XHJcbiAgICBzdyArPSBkeFxyXG4gICAgc3ggLT0gZHhcclxuICAgIGR4ID0gMFxyXG4gIH1cclxuXHJcbiAgaWYgKGR5IDwgMCkge1xyXG4gICAgc2ggKz0gZHlcclxuICAgIHN5IC09IGR5XHJcbiAgICBkeSA9IDBcclxuICB9XHJcblxyXG4gIGlmIChkeCArIHN3ID4gZGVzdFcpIHtcclxuICAgIHN3ID0gZGVzdFcgLSBkeFxyXG4gIH1cclxuXHJcbiAgaWYgKGR5ICsgc2ggPiBkZXN0SCkge1xyXG4gICAgc2ggPSBkZXN0SCAtIGR5XHJcbiAgfVxyXG5cclxuICBpZiAoc3cgPCAwKSBzdyA9IDBcclxuICBpZiAoc2ggPCAwKSBzaCA9IDBcclxuXHJcbiAgcmV0dXJuIFtzeCwgc3ksIHN3LCBzaCwgZHgsIGR5XVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2xhbXBSZWN0ID0gKHNyY1c6IG51bWJlciwgc3JjSDogbnVtYmVyLCByZWN0OiBUNCk6IFQ0ID0+IHtcclxuICBsZXQgW3gsIHksIHcsIGhdID0gcmVjdFxyXG5cclxuICBpZiAoeCA8IDApIHtcclxuICAgIHcgKz0geFxyXG4gICAgeCA9IDBcclxuICB9XHJcblxyXG4gIGlmICh5IDwgMCkge1xyXG4gICAgaCArPSB5XHJcbiAgICB5ID0gMFxyXG4gIH1cclxuXHJcbiAgaWYgKHggKyB3ID4gc3JjVykge1xyXG4gICAgdyA9IHNyY1cgLSB4XHJcbiAgfVxyXG5cclxuICBpZiAoeSArIGggPiBzcmNIKSB7XHJcbiAgICBoID0gc3JjSCAtIHlcclxuICB9XHJcblxyXG4gIGlmICh3IDwgMCkgdyA9IDBcclxuICBpZiAoaCA8IDApIGggPSAwXHJcblxyXG4gIHJldHVybiBbeCwgeSwgdywgaF1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNsYW1wUm93cyA9IDxBcmc+KHJvd3M6IFJvdzxBcmc+W10sIHc6IG51bWJlciwgaDogbnVtYmVyKSA9PlxyXG4gIHJvd3MucmVkdWNlKChhY2MsIFt5LCB4MCwgeDEsIC4uLmFyZ3NdKSA9PiB7XHJcbiAgICBpZiAoeSA8IDAgfHwgeSA+PSBoKSByZXR1cm4gYWNjXHJcblxyXG4gICAgbGV0IHgwYyA9IE1hdGgubWF4KHgwLCAwKVxyXG4gICAgbGV0IHgxYyA9IE1hdGgubWluKHgxLCB3KVxyXG5cclxuICAgIGlmICh4MGMgPiB4MWMpIHJldHVybiBhY2NcclxuXHJcbiAgICBhY2MucHVzaChbeSwgeDBjLCB4MWMsIC4uLmFyZ3NdKVxyXG5cclxuICAgIHJldHVybiBhY2NcclxuICB9LCBbXSBhcyBSb3c8QXJnPltdKVxyXG5cclxuZXhwb3J0IGNvbnN0IGNsYW1wUm93ID0gPEFyZz4ocm93OiBSb3c8QXJnPiwgdzogbnVtYmVyLCBoOiBudW1iZXIpID0+IHtcclxuICBjb25zdCBbeSwgeDAsIHgxLCAuLi5hcmdzXSA9IHJvd1xyXG5cclxuICBpZiAoeSA8IDAgfHwgeSA+PSBoKSByZXR1cm4gbnVsbFxyXG5cclxuICBsZXQgeDBjID0gTWF0aC5tYXgoeDAsIDApXHJcbiAgbGV0IHgxYyA9IE1hdGgubWluKHgxLCB3KVxyXG5cclxuICBpZiAoeDBjID4geDFjKSByZXR1cm4gbnVsbFxyXG5cclxuICByZXR1cm4gW3ksIHgwYywgeDFjLCAuLi5hcmdzXSBhcyBSb3c8QXJnPlxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHBvaW50c1RvSW5kaWNlcyA9ICh3OiBudW1iZXIsIGg6IG51bWJlciwgY2hhbm5lbHM6IG51bWJlcikgPT5cclxuICAocG9pbnRzOiBUMltdKSA9PlxyXG4gICAgcG9pbnRzLnJlZHVjZSgoYWNjLCBbeCwgeV0pID0+IHtcclxuICAgICAgaWYgKHggPCAwIHx8IHggPj0gdyB8fCB5IDwgMCB8fCB5ID49IGgpIHJldHVybiBhY2NcclxuXHJcbiAgICAgIGFjYy5wdXNoKCh5ICogdyArIHgpICogY2hhbm5lbHMpXHJcblxyXG4gICAgICByZXR1cm4gYWNjXHJcbiAgICB9LCBbXSBhcyBudW1iZXJbXSlcclxuIl19