import { clampRect } from './util.js';
// nearest neighbor scaling
export const pointResize = (src, dest, srcRect = [0, 0, src.width, src.height], destRect = [0, 0, dest.width, dest.height]) => {
    const [sx, sy, sw, sh] = clampRect(src.width, src.height, srcRect);
    const [dx, dy, dw, dh] = clampRect(dest.width, dest.height, destRect);
    const scaleW = sw / dw;
    const scaleH = sh / dh;
    const srcData = new Uint32Array(src.data.buffer);
    const destData = new Uint32Array(dest.data.buffer);
    for (let y = 0; y < dh; y++) {
        const srcY = Math.floor(y * scaleH) + sy;
        for (let x = 0; x < dw; x++) {
            const srcX = Math.floor(x * scaleW) + sx;
            const srcIndex = srcY * src.width + srcX;
            const destIndex = (y + dy) * dest.width + (x + dx);
            destData[destIndex] = srcData[srcIndex];
        }
    }
    return dest;
};
export const bilinearResize = (src, dest, srcRect = [0, 0, src.width, src.height], destRect = [0, 0, dest.width, dest.height]) => {
    const [sx, sy, sw, sh] = clampRect(src.width, src.height, srcRect);
    const [dx, dy, dw, dh] = clampRect(dest.width, dest.height, destRect);
    const srcData = new Uint32Array(src.data.buffer);
    const destData = new Uint32Array(dest.data.buffer);
    // These are the scale factors from dest -> src dimensions
    const scaleW = sw / dw;
    const scaleH = sh / dh;
    // Helper to safely fetch a pixel (as 32-bit) at (x, y) from srcData
    function getPixel(x, y) {
        // Clamp to edges to avoid sampling out of range
        x = Math.max(0, Math.min(src.width - 1, x));
        y = Math.max(0, Math.min(src.height - 1, y));
        return srcData[y * src.width + x];
    }
    for (let y = 0; y < dh; y++) {
        // Floating-point Y position in source
        const srcY = (y + 0.5) * scaleH - 0.5 + sy;
        // Integer Y positions and fractional part
        const y0 = Math.floor(srcY);
        const yFrac = srcY - y0;
        const y1 = y0 + 1;
        for (let x = 0; x < dw; x++) {
            // Floating-point X position in source
            const srcX = (x + 0.5) * scaleW - 0.5 + sx;
            // Integer X positions and fractional part
            const x0 = Math.floor(srcX);
            const xFrac = srcX - x0;
            const x1 = x0 + 1;
            // Fetch the four nearest pixels in the source
            // c00 = top-left, c10 = top-right, c01 = bottom-left, c11 = bottom-right
            const c00 = getPixel(x0, y0);
            const c10 = getPixel(x1, y0);
            const c01 = getPixel(x0, y1);
            const c11 = getPixel(x1, y1);
            // Extract RGBA components from each 32-bit pixel
            const r00 = c00 & 0xFF;
            const g00 = (c00 >> 8) & 0xFF;
            const b00 = (c00 >> 16) & 0xFF;
            const a00 = (c00 >> 24) & 0xFF;
            const r10 = c10 & 0xFF;
            const g10 = (c10 >> 8) & 0xFF;
            const b10 = (c10 >> 16) & 0xFF;
            const a10 = (c10 >> 24) & 0xFF;
            const r01 = c01 & 0xFF;
            const g01 = (c01 >> 8) & 0xFF;
            const b01 = (c01 >> 16) & 0xFF;
            const a01 = (c01 >> 24) & 0xFF;
            const r11 = c11 & 0xFF;
            const g11 = (c11 >> 8) & 0xFF;
            const b11 = (c11 >> 16) & 0xFF;
            const a11 = (c11 >> 24) & 0xFF;
            // Bilinear interpolation in X, then in Y:
            //   out = c00*(1-xFrac)*(1-yFrac) + c10*xFrac*(1-yFrac) +
            //         c01*(1-xFrac)*yFrac     + c11*xFrac*yFrac
            const r = Math.round(r00 * (1 - xFrac) * (1 - yFrac) +
                r10 * (xFrac) * (1 - yFrac) +
                r01 * (1 - xFrac) * (yFrac) +
                r11 * (xFrac) * (yFrac));
            const g = Math.round(g00 * (1 - xFrac) * (1 - yFrac) +
                g10 * (xFrac) * (1 - yFrac) +
                g01 * (1 - xFrac) * (yFrac) +
                g11 * (xFrac) * (yFrac));
            const b = Math.round(b00 * (1 - xFrac) * (1 - yFrac) +
                b10 * (xFrac) * (1 - yFrac) +
                b01 * (1 - xFrac) * (yFrac) +
                b11 * (xFrac) * (yFrac));
            const a = Math.round(a00 * (1 - xFrac) * (1 - yFrac) +
                a10 * (xFrac) * (1 - yFrac) +
                a01 * (1 - xFrac) * (yFrac) +
                a11 * (xFrac) * (yFrac));
            // Pack RGBA back into a 32-bit integer (assuming little-endian RGBA layout).
            // If your environment uses BGRA or ABGR, reorder accordingly.
            const rgba = (a << 24) |
                (b << 16) |
                (g << 8) |
                (r);
            const destIndex = (y + dy) * dest.width + (x + dx);
            destData[destIndex] = rgba;
        }
    }
    return dest;
};
/*
// compute vector index from matrix one
    function ivect(ix, iy, w) {
        // byte array, r,g,b,a
        return((ix + w * iy) * 4);
    }

    function bilinear(srcImg, destImg, scale) {
        // c.f.: wikipedia english article on bilinear interpolation
        // taking the unit square, the inner loop looks like this
        // note: there's a function call inside the double loop to this one
        // maybe a performance killer, optimize this whole code as you need
        function inner(f00, f10, f01, f11, x, y) {
            var un_x = 1.0 - x; var un_y = 1.0 - y;
            return (f00 * un_x * un_y + f10 * x * un_y + f01 * un_x * y + f11 * x * y);
        }
        var i, j;
        var iyv, iy0, iy1, ixv, ix0, ix1;
        var idxD, idxS00, idxS10, idxS01, idxS11;
        var dx, dy;
        var r, g, b, a;
        for (i = 0; i < destImg.height; ++i) {
            iyv = i / scale;
            iy0 = Math.floor(iyv);
            // Math.ceil can go over bounds
            iy1 = ( Math.ceil(iyv) > (srcImg.height-1) ? (srcImg.height-1) : Math.ceil(iyv) );
            for (j = 0; j < destImg.width; ++j) {
                ixv = j / scale;
                ix0 = Math.floor(ixv);
                // Math.ceil can go over bounds
                ix1 = ( Math.ceil(ixv) > (srcImg.width-1) ? (srcImg.width-1) : Math.ceil(ixv) );
                idxD = ivect(j, i, destImg.width);
                // matrix to vector indices
                idxS00 = ivect(ix0, iy0, srcImg.width);
                idxS10 = ivect(ix1, iy0, srcImg.width);
                idxS01 = ivect(ix0, iy1, srcImg.width);
                idxS11 = ivect(ix1, iy1, srcImg.width);
                // overall coordinates to unit square
                dx = ixv - ix0; dy = iyv - iy0;
                // I let the r, g, b, a on purpose for debugging
                r = inner(srcImg.data[idxS00], srcImg.data[idxS10],
                    srcImg.data[idxS01], srcImg.data[idxS11], dx, dy);
                destImg.data[idxD] = r;

                g = inner(srcImg.data[idxS00+1], srcImg.data[idxS10+1],
                    srcImg.data[idxS01+1], srcImg.data[idxS11+1], dx, dy);
                destImg.data[idxD+1] = g;

                b = inner(srcImg.data[idxS00+2], srcImg.data[idxS10+2],
                    srcImg.data[idxS01+2], srcImg.data[idxS11+2], dx, dy);
                destImg.data[idxD+2] = b;

                a = inner(srcImg.data[idxS00+3], srcImg.data[idxS10+3],
                    srcImg.data[idxS01+3], srcImg.data[idxS11+3], dx, dy);
                destImg.data[idxD+3] = a;
            }
        }
    }
*/
//# sourceMappingURL=data:application/json;base64,