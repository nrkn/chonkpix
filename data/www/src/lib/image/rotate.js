export const drawRotated = (src, srcCx, srcCy, dest, destCx, destCy, radians) => {
    const srcData = src.data;
    const destData = dest.data;
    const srcWidth = src.width;
    const srcHeight = src.height;
    const destWidth = dest.width;
    const destHeight = dest.height;
    const cos = Math.cos(radians);
    const sin = Math.sin(radians);
    const [minX, minY, maxX, maxY] = computeRotatedBoundingBox(srcWidth, srcHeight, srcCx, srcCy, destCx, destCy, radians, destWidth, destHeight);
    for (let dy = minY; dy < maxY; dy++) {
        for (let dx = minX; dx < maxX; dx++) {
            const x = dx - destCx;
            const y = dy - destCy;
            const sxFloat = x * cos + y * sin + srcCx;
            const syFloat = -x * sin + y * cos + srcCy;
            const sx = Math.round(sxFloat);
            const sy = Math.round(syFloat);
            if (sx >= 0 && sx < srcWidth && sy >= 0 && sy < srcHeight) {
                const srcIndex = (sy * srcWidth + sx) * 4;
                const destIndex = (dy * destWidth + dx) * 4;
                destData[destIndex + 0] = srcData[srcIndex + 0];
                destData[destIndex + 1] = srcData[srcIndex + 1];
                destData[destIndex + 2] = srcData[srcIndex + 2];
                destData[destIndex + 3] = srcData[srcIndex + 3];
            }
        }
    }
    return dest;
};
export const drawRotatedAndScaled = (src, srcCx, srcCy, dest, destCx, destCy, radians, srcScale = 1) => {
    const srcWidth = src.width;
    const srcHeight = src.height;
    const destWidth = dest.width;
    const destHeight = dest.height;
    const cos = Math.cos(radians);
    const sin = Math.sin(radians);
    const [minX, minY, maxX, maxY] = computeRotatedBoundingBox(srcWidth, srcHeight, srcCx, srcCy, destCx, destCy, radians, destWidth, destHeight);
    for (let dy = minY; dy < maxY; dy++) {
        for (let dx = minX; dx < maxX; dx++) {
            const x = dx - destCx;
            const y = dy - destCy;
            // const sxFloat = x * cos + y * sin + srcCx
            // const syFloat = -x * sin + y * cos + srcCy
            // const sx = Math.round(sxFloat / srcScale)
            // const sy = Math.round(syFloat / srcScale)
            const scaledX = (x / srcScale);
            const scaledY = (y / srcScale);
            const sxFloat = scaledX * cos + scaledY * sin + srcCx;
            const syFloat = -scaledX * sin + scaledY * cos + srcCy;
            const sx = Math.round(sxFloat);
            const sy = Math.round(syFloat);
            if (sx >= 0 && sx < srcWidth && sy >= 0 && sy < srcHeight) {
                const srcIndex = (sy * srcWidth + sx) * 4;
                const destIndex = (dy * destWidth + dx) * 4;
                dest.data[destIndex + 0] = src.data[srcIndex + 0];
                dest.data[destIndex + 1] = src.data[srcIndex + 1];
                dest.data[destIndex + 2] = src.data[srcIndex + 2];
                dest.data[destIndex + 3] = src.data[srcIndex + 3];
            }
        }
    }
    return dest;
};
export const computeRotatedBoundingBox = (srcWidth, srcHeight, srcCx, srcCy, destCx, destCy, radians, destWidth, destHeight) => {
    const cos = Math.cos(radians);
    const sin = Math.sin(radians);
    const corners = [
        [0, 0],
        [srcWidth, 0],
        [srcWidth, srcHeight],
        [0, srcHeight]
    ];
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (const corner of corners) {
        const lx = corner[0] - srcCx;
        const ly = corner[1] - srcCy;
        const rx = lx * cos - ly * sin;
        const ry = lx * sin + ly * cos;
        const dx = rx + destCx;
        const dy = ry + destCy;
        if (dx < minX)
            minX = dx;
        if (dx > maxX)
            maxX = dx;
        if (dy < minY)
            minY = dy;
        if (dy > maxY)
            maxY = dy;
    }
    let intMinX = Math.floor(minX);
    let intMinY = Math.floor(minY);
    let intMaxX = Math.ceil(maxX);
    let intMaxY = Math.ceil(maxY);
    intMinX = Math.max(0, Math.min(intMinX, destWidth - 1));
    intMinY = Math.max(0, Math.min(intMinY, destHeight - 1));
    intMaxX = Math.max(0, Math.min(intMaxX, destWidth));
    intMaxY = Math.max(0, Math.min(intMaxY, destHeight));
    return [intMinX, intMinY, intMaxX, intMaxY];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9pbWFnZS9yb3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQ3pCLEdBQWMsRUFBRSxLQUFhLEVBQUUsS0FBYSxFQUM1QyxJQUFlLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFDL0MsT0FBZSxFQUNmLEVBQUU7SUFDRixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFBO0lBQ3hCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7SUFFMUIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQTtJQUMxQixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFBO0lBQzVCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDNUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUU5QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzdCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFN0IsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLHlCQUF5QixDQUN4RCxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQzFELFNBQVMsRUFBRSxVQUFVLENBQ3RCLENBQUE7SUFFRCxLQUFLLElBQUksRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDcEMsS0FBSyxJQUFJLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxHQUFHLElBQUksRUFBRSxFQUFF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QUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUE7SUFDbkQsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUE7SUFFcEQsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQzdDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkcmF3Um90YXRlZCA9IChcclxuICBzcmM6IEltYWdlRGF0YSwgc3JjQ3g6IG51bWJlciwgc3JjQ3k6IG51bWJlcixcclxuICBkZXN0OiBJbWFnZURhdGEsIGRlc3RDeDogbnVtYmVyLCBkZXN0Q3k6IG51bWJlcixcclxuICByYWRpYW5zOiBudW1iZXJcclxuKSA9PiB7XHJcbiAgY29uc3Qgc3JjRGF0YSA9IHNyYy5kYXRhXHJcbiAgY29uc3QgZGVzdERhdGEgPSBkZXN0LmRhdGFcclxuXHJcbiAgY29uc3Qgc3JjV2lkdGggPSBzcmMud2lkdGhcclxuICBjb25zdCBzcmNIZWlnaHQgPSBzcmMuaGVpZ2h0XHJcbiAgY29uc3QgZGVzdFdpZHRoID0gZGVzdC53aWR0aFxyXG4gIGNvbnN0IGRlc3RIZWlnaHQgPSBkZXN0LmhlaWdodFxyXG5cclxuICBjb25zdCBjb3MgPSBNYXRoLmNvcyhyYWRpYW5zKVxyXG4gIGNvbnN0IHNpbiA9IE1hdGguc2luKHJhZGlhbnMpXHJcblxyXG4gIGNvbnN0IFttaW5YLCBtaW5ZLCBtYXhYLCBtYXhZXSA9IGNvbXB1dGVSb3RhdGVkQm91bmRpbmdCb3goXHJcbiAgICBzcmNXaWR0aCwgc3JjSGVpZ2h0LCBzcmNDeCwgc3JjQ3ksIGRlc3RDeCwgZGVzdEN5LCByYWRpYW5zLFxyXG4gICAgZGVzdFdpZHRoLCBkZXN0SGVpZ2h0XHJcbiAgKVxyXG5cclxuICBmb3IgKGxldCBkeSA9IG1pblk7IGR5IDwgbWF4WTsgZHkrKykge1xyXG4gICAgZm9yIChsZXQgZHggPSBtaW5YOyBkeCA8IG1heFg7IGR4KyspIHtcclxuICAgICAgY29uc3QgeCA9IGR4IC0gZGVzdEN4XHJcbiAgICAgIGNvbnN0IHkgPSBkeSAtIGRlc3RDeVxyXG5cclxuICAgICAgY29uc3Qgc3hGbG9hdCA9IHggKiBjb3MgKyB5ICogc2luICsgc3JjQ3hcclxuICAgICAgY29uc3Qgc3lGbG9hdCA9IC14ICogc2luICsgeSAqIGNvcyArIHNyY0N5XHJcblxyXG4gICAgICBjb25zdCBzeCA9IE1hdGgucm91bmQoc3hGbG9hdClcclxuICAgICAgY29uc3Qgc3kgPSBNYXRoLnJvdW5kKHN5RmxvYXQpXHJcblxyXG4gICAgICBpZiAoc3ggPj0gMCAmJiBzeCA8IHNyY1dpZHRoICYmIHN5ID49IDAgJiYgc3kgPCBzcmNIZWlnaHQpIHtcclxuICAgICAgICBjb25zdCBzcmNJbmRleCA9IChzeSAqIHNyY1dpZHRoICsgc3gpICogNFxyXG4gICAgICAgIGNvbnN0IGRlc3RJbmRleCA9IChkeSAqIGRlc3RXaWR0aCArIGR4KSAqIDRcclxuXHJcbiAgICAgICAgZGVzdERhdGFbZGVzdEluZGV4ICsgMF0gPSBzcmNEYXRhW3NyY0luZGV4ICsgMF1cclxuICAgICAgICBkZXN0RGF0YVtkZXN0SW5kZXggKyAxXSA9IHNyY0RhdGFbc3JjSW5kZXggKyAxXVxyXG4gICAgICAgIGRlc3REYXRhW2Rlc3RJbmRleCArIDJdID0gc3JjRGF0YVtzcmNJbmRleCArIDJdXHJcbiAgICAgICAgZGVzdERhdGFbZGVzdEluZGV4ICsgM10gPSBzcmNEYXRhW3NyY0luZGV4ICsgM11cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRlc3RcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRyYXdSb3RhdGVkQW5kU2NhbGVkID0gKFxyXG4gIHNyYzogSW1hZ2VEYXRhLCBzcmNDeDogbnVtYmVyLCBzcmNDeTogbnVtYmVyLFxyXG4gIGRlc3Q6IEltYWdlRGF0YSwgZGVzdEN4OiBudW1iZXIsIGRlc3RDeTogbnVtYmVyLFxyXG4gIHJhZGlhbnM6IG51bWJlciwgc3JjU2NhbGUgPSAxXHJcbikgPT4ge1xyXG4gIGNvbnN0IHNyY1dpZHRoID0gc3JjLndpZHRoXHJcbiAgY29uc3Qgc3JjSGVpZ2h0ID0gc3JjLmhlaWdodFxyXG4gIGNvbnN0IGRlc3RXaWR0aCA9IGRlc3Qud2lkdGhcclxuICBjb25zdCBkZXN0SGVpZ2h0ID0gZGVzdC5oZWlnaHRcclxuXHJcbiAgY29uc3QgY29zID0gTWF0aC5jb3MocmFkaWFucylcclxuICBjb25zdCBzaW4gPSBNYXRoLnNpbihyYWRpYW5zKVxyXG5cclxuICBjb25zdCBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0gPSBjb21wdXRlUm90YXRlZEJvdW5kaW5nQm94KFxyXG4gICAgc3JjV2lkdGgsIHNyY0hlaWdodCwgc3JjQ3gsIHNyY0N5LCBkZXN0Q3gsIGRlc3RDeSwgcmFkaWFucyxcclxuICAgIGRlc3RXaWR0aCwgZGVzdEhlaWdodFxyXG4gIClcclxuXHJcbiAgZm9yIChsZXQgZHkgPSBtaW5ZOyBkeSA8IG1heFk7IGR5KyspIHtcclxuICAgIGZvciAobGV0IGR4ID0gbWluWDsgZHggPCBtYXhYOyBkeCsrKSB7XHJcbiAgICAgIGNvbnN0IHggPSBkeCAtIGRlc3RDeFxyXG4gICAgICBjb25zdCB5ID0gZHkgLSBkZXN0Q3lcclxuXHJcbiAgICAgIC8vIGNvbnN0IHN4RmxvYXQgPSB4ICogY29zICsgeSAqIHNpbiArIHNyY0N4XHJcbiAgICAgIC8vIGNvbnN0IHN5RmxvYXQgPSAteCAqIHNpbiArIHkgKiBjb3MgKyBzcmNDeVxyXG5cclxuICAgICAgLy8gY29uc3Qgc3ggPSBNYXRoLnJvdW5kKHN4RmxvYXQgLyBzcmNTY2FsZSlcclxuICAgICAgLy8gY29uc3Qgc3kgPSBNYXRoLnJvdW5kKHN5RmxvYXQgLyBzcmNTY2FsZSlcclxuICAgICAgY29uc3Qgc2NhbGVkWCA9ICh4IC8gc3JjU2NhbGUpXHJcbiAgICAgIGNvbnN0IHNjYWxlZFkgPSAoeSAvIHNyY1NjYWxlKVxyXG5cclxuICAgICAgY29uc3Qgc3hGbG9hdCA9IHNjYWxlZFggKiBjb3MgKyBzY2FsZWRZICogc2luICsgc3JjQ3hcclxuICAgICAgY29uc3Qgc3lGbG9hdCA9IC1zY2FsZWRYICogc2luICsgc2NhbGVkWSAqIGNvcyArIHNyY0N5XHJcblxyXG4gICAgICBjb25zdCBzeCA9IE1hdGgucm91bmQoc3hGbG9hdClcclxuICAgICAgY29uc3Qgc3kgPSBNYXRoLnJvdW5kKHN5RmxvYXQpXHJcblxyXG4gICAgICBpZiAoc3ggPj0gMCAmJiBzeCA8IHNyY1dpZHRoICYmIHN5ID49IDAgJiYgc3kgPCBzcmNIZWlnaHQpIHtcclxuICAgICAgICBjb25zdCBzcmNJbmRleCA9IChzeSAqIHNyY1dpZHRoICsgc3gpICogNFxyXG4gICAgICAgIGNvbnN0IGRlc3RJbmRleCA9IChkeSAqIGRlc3RXaWR0aCArIGR4KSAqIDRcclxuXHJcbiAgICAgICAgZGVzdC5kYXRhW2Rlc3RJbmRleCArIDBdID0gc3JjLmRhdGFbc3JjSW5kZXggKyAwXVxyXG4gICAgICAgIGRlc3QuZGF0YVtkZXN0SW5kZXggKyAxXSA9IHNyYy5kYXRhW3NyY0luZGV4ICsgMV1cclxuICAgICAgICBkZXN0LmRhdGFbZGVzdEluZGV4ICsgMl0gPSBzcmMuZGF0YVtzcmNJbmRleCArIDJdXHJcbiAgICAgICAgZGVzdC5kYXRhW2Rlc3RJbmRleCArIDNdID0gc3JjLmRhdGFbc3JjSW5kZXggKyAzXVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGVzdFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY29tcHV0ZVJvdGF0ZWRCb3VuZGluZ0JveCA9IChcclxuICBzcmNXaWR0aDogbnVtYmVyLFxyXG4gIHNyY0hlaWdodDogbnVtYmVyLFxyXG4gIHNyY0N4OiBudW1iZXIsXHJcbiAgc3JjQ3k6IG51bWJlcixcclxuICBkZXN0Q3g6IG51bWJlcixcclxuICBkZXN0Q3k6IG51bWJlcixcclxuICByYWRpYW5zOiBudW1iZXIsXHJcbiAgZGVzdFdpZHRoOiBudW1iZXIsXHJcbiAgZGVzdEhlaWdodDogbnVtYmVyXHJcbikgPT4ge1xyXG4gIGNvbnN0IGNvcyA9IE1hdGguY29zKHJhZGlhbnMpXHJcbiAgY29uc3Qgc2luID0gTWF0aC5zaW4ocmFkaWFucylcclxuXHJcbiAgY29uc3QgY29ybmVycyA9IFtcclxuICAgIFswLCAwXSxcclxuICAgIFtzcmNXaWR0aCwgMF0sXHJcbiAgICBbc3JjV2lkdGgsIHNyY0hlaWdodF0sXHJcbiAgICBbMCwgc3JjSGVpZ2h0XVxyXG4gIF1cclxuXHJcbiAgbGV0IG1pblggPSBJbmZpbml0eVxyXG4gIGxldCBtaW5ZID0gSW5maW5pdHlcclxuICBsZXQgbWF4WCA9IC1JbmZpbml0eVxyXG4gIGxldCBtYXhZID0gLUluZmluaXR5XHJcblxyXG4gIGZvciAoY29uc3QgY29ybmVyIG9mIGNvcm5lcnMpIHtcclxuICAgIGNvbnN0IGx4ID0gY29ybmVyWzBdIC0gc3JjQ3hcclxuICAgIGNvbnN0IGx5ID0gY29ybmVyWzFdIC0gc3JjQ3lcclxuXHJcbiAgICBjb25zdCByeCA9IGx4ICogY29zIC0gbHkgKiBzaW5cclxuICAgIGNvbnN0IHJ5ID0gbHggKiBzaW4gKyBseSAqIGNvc1xyXG5cclxuICAgIGNvbnN0IGR4ID0gcnggKyBkZXN0Q3hcclxuICAgIGNvbnN0IGR5ID0gcnkgKyBkZXN0Q3lcclxuXHJcbiAgICBpZiAoZHggPCBtaW5YKSBtaW5YID0gZHhcclxuICAgIGlmIChkeCA+IG1heFgpIG1heFggPSBkeFxyXG4gICAgaWYgKGR5IDwgbWluWSkgbWluWSA9IGR5XHJcbiAgICBpZiAoZHkgPiBtYXhZKSBtYXhZID0gZHlcclxuICB9XHJcblxyXG4gIGxldCBpbnRNaW5YID0gTWF0aC5mbG9vcihtaW5YKVxyXG4gIGxldCBpbnRNaW5ZID0gTWF0aC5mbG9vcihtaW5ZKVxyXG4gIGxldCBpbnRNYXhYID0gTWF0aC5jZWlsKG1heFgpXHJcbiAgbGV0IGludE1heFkgPSBNYXRoLmNlaWwobWF4WSlcclxuXHJcbiAgaW50TWluWCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGludE1pblgsIGRlc3RXaWR0aCAtIDEpKVxyXG4gIGludE1pblkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihpbnRNaW5ZLCBkZXN0SGVpZ2h0IC0gMSkpXHJcbiAgaW50TWF4WCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGludE1heFgsIGRlc3RXaWR0aCkpXHJcbiAgaW50TWF4WSA9IE1hdGgubWF4KDAsIE1hdGgubWluKGludE1heFksIGRlc3RIZWlnaHQpKVxyXG5cclxuICByZXR1cm4gW2ludE1pblgsIGludE1pblksIGludE1heFgsIGludE1heFldXHJcbn1cclxuIl19