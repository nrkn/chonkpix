import { clampRect, clampRows } from './util.js';
export const fill = (dest, color, rect = [0, 0, dest.width, dest.height]) => {
    const [x, y, w, h] = clampRect(dest.width, dest.height, rect);
    const row = new Uint32Array(w).fill(color);
    const data = new Uint32Array(dest.data.buffer);
    for (let j = 0; j < h; j++) {
        const rowIndex = (y + j) * dest.width + x;
        data.set(row, rowIndex);
    }
    return dest;
};
export const fillIndices = (src, dest, color) => {
    const data = new Uint32Array(dest.data.buffer);
    for (let i = 0; i < src.length; i++) {
        data[src[i]] = color;
    }
    return dest;
};
export const fillRows = (src, dest, color) => {
    src = clampRows(src, dest.width, dest.height);
    const data = new Uint32Array(dest.data.buffer);
    for (let i = 0; i < src.length; i++) {
        const [y, x0, x1] = src[i];
        const w = x1 - x0 + 1;
        const row = new Uint32Array(w).fill(color);
        const rowIndex = y * dest.width + x0;
        data.set(row, rowIndex);
    }
    return dest;
};
export const fillRow = (dest, color, y, x0 = 0, x1 = dest.width - 1) => {
    if (y < 0 || y >= dest.height) {
        return;
    }
    if (x0 > x1) {
        [x0, x1] = [x1, x0];
    }
    x0 = x0 < 0 ? 0 : x0;
    x1 = x1 >= dest.width ? dest.width - 1 : x1;
    const w = x1 - x0 + 1;
    const pixels = new Uint32Array(w).fill(color);
    const data = new Uint32Array(dest.data.buffer);
    data.set(pixels, y * dest.width + x0);
    return dest;
};
export const fillCol = (dest, color, x, y0 = 0, y1 = dest.height - 1) => {
    if (x < 0 || x >= dest.width) {
        return;
    }
    if (y0 > y1) {
        [y0, y1] = [y1, y0];
    }
    y0 = y0 < 0 ? 0 : y0;
    y1 = y1 >= dest.height ? dest.height - 1 : y1;
    const h = y1 - y0 + 1;
    const data = new Uint32Array(dest.data.buffer);
    let index = y0 * dest.width + x;
    for (let i = 0; i < h; i++) {
        data[index] = color;
        index += dest.width;
    }
    return dest;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvaW1hZ2UvZmlsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVoRCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FDbEIsSUFBZSxFQUFFLEtBQWEsRUFBRSxPQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDMUUsRUFBRTtJQUNGLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBRTdELE1BQU0sR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUMxQyxNQUFNLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRTlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMzQixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDekIsR0FBYSxFQUFFLElBQWUsRUFBRSxLQUFhLEVBQzdDLEVBQUU7SUFDRixNQUFNLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRTlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFHLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUN0QixDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDdEIsR0FBZSxFQUFFLElBQWUsRUFBRSxLQUFhLEVBQy9DLEVBQUU7SUFDRixHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUU3QyxNQUFNLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRTlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzFCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3JCLE1BQU0sR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMxQyxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUE7UUFFcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDekIsQ0FBQztJ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cy5qcydcbmltcG9ydCB7IFQ0IH0gZnJvbSAnLi4vdHlwZXMuanMnXG5pbXBvcnQgeyBjbGFtcFJlY3QsIGNsYW1wUm93cyB9IGZyb20gJy4vdXRpbC5qcydcblxuZXhwb3J0IGNvbnN0IGZpbGwgPSAoXG4gIGRlc3Q6IEltYWdlRGF0YSwgY29sb3I6IG51bWJlciwgcmVjdDogVDQgPSBbMCwgMCwgZGVzdC53aWR0aCwgZGVzdC5oZWlnaHRdXG4pID0+IHtcbiAgY29uc3QgW3gsIHksIHcsIGhdID0gY2xhbXBSZWN0KGRlc3Qud2lkdGgsIGRlc3QuaGVpZ2h0LCByZWN0KVxuXG4gIGNvbnN0IHJvdyA9IG5ldyBVaW50MzJBcnJheSh3KS5maWxsKGNvbG9yKVxuICBjb25zdCBkYXRhID0gbmV3IFVpbnQzMkFycmF5KGRlc3QuZGF0YS5idWZmZXIpXG5cbiAgZm9yIChsZXQgaiA9IDA7IGogPCBoOyBqKyspIHtcbiAgICBjb25zdCByb3dJbmRleCA9ICh5ICsgaikgKiBkZXN0LndpZHRoICsgeFxuICAgIGRhdGEuc2V0KHJvdywgcm93SW5kZXgpXG4gIH1cblxuICByZXR1cm4gZGVzdFxufVxuXG5leHBvcnQgY29uc3QgZmlsbEluZGljZXMgPSAoIFxuICBzcmM6IG51bWJlcltdLCBkZXN0OiBJbWFnZURhdGEsIGNvbG9yOiBudW1iZXIgXG4pID0+IHtcbiAgY29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheShkZXN0LmRhdGEuYnVmZmVyKVxuXG4gIGZvciggbGV0IGkgPSAwOyBpIDwgc3JjLmxlbmd0aDsgaSsrICkge1xuICAgIGRhdGFbc3JjW2ldXSA9IGNvbG9yXG4gIH1cblxuICByZXR1cm4gZGVzdFxufVxuXG5leHBvcnQgY29uc3QgZmlsbFJvd3MgPSAoXG4gIHNyYzogUm93PGFueT5bXSwgZGVzdDogSW1hZ2VEYXRhLCBjb2xvcjogbnVtYmVyXG4pID0+IHtcbiAgc3JjID0gY2xhbXBSb3dzKHNyYywgZGVzdC53aWR0aCwgZGVzdC5oZWlnaHQpXG5cbiAgY29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheShkZXN0LmRhdGEuYnVmZmVyKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgW3ksIHgwLCB4MV0gPSBzcmNbaV1cbiAgICBjb25zdCB3ID0geDEgLSB4MCArIDFcbiAgICBjb25zdCByb3cgPSBuZXcgVWludDMyQXJyYXkodykuZmlsbChjb2xvcilcbiAgICBjb25zdCByb3dJbmRleCA9IHkgKiBkZXN0LndpZHRoICsgeDBcblxuICAgIGRhdGEuc2V0KHJvdywgcm93SW5kZXgpXG4gIH1cblxuICByZXR1cm4gZGVzdFxufVxuXG5leHBvcnQgY29uc3QgZmlsbFJvdyA9ICggXG4gIGRlc3Q6IEltYWdlRGF0YSwgY29sb3I6IG51bWJlciwgXG4gIHk6IG51bWJlciwgeDAgPSAwLCB4MSA9IGRlc3Qud2lkdGggLSAxXG4pID0+IHtcbiAgaWYoIHkgPCAwIHx8IHkgPj0gZGVzdC5oZWlnaHQgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiggeDAgPiB4MSApe1xuICAgIFsgeDAsIHgxIF0gPSBbIHgxLCB4MCBdXG4gIH1cblxuICB4MCA9IHgwIDwgMCA/IDAgOiB4MFxuICB4MSA9IHgxID49IGRlc3Qud2lkdGggPyBkZXN0LndpZHRoIC0gMSA6IHgxXG5cbiAgY29uc3QgdyA9IHgxIC0geDAgKyAxXG4gIGNvbnN0IHBpeGVscyA9IG5ldyBVaW50MzJBcnJheSh3KS5maWxsKGNvbG9yKVxuICBjb25zdCBkYXRhID0gbmV3IFVpbnQzMkFycmF5KGRlc3QuZGF0YS5idWZmZXIpXG5cbiAgZGF0YS5zZXQocGl4ZWxzLCB5ICogZGVzdC53aWR0aCArIHgwKVxuXG4gIHJldHVybiBkZXN0XG59XG5cbmV4cG9ydCBjb25zdCBmaWxsQ29sID0gKFxuICBkZXN0OiBJbWFnZURhdGEsIGNvbG9yOiBudW1iZXIsIFxuICB4OiBudW1iZXIsIHkwID0gMCwgeTEgPSBkZXN0LmhlaWdodCAtIDFcbikgPT4ge1xuICBpZiggeCA8IDAgfHwgeCA+PSBkZXN0LndpZHRoICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYoIHkwID4geTEgKXtcbiAgICBbIHkwLCB5MSBdID0gWyB5MSwgeTAgXVxuICB9XG5cbiAgeTAgPSB5MCA8IDAgPyAwIDogeTBcbiAgeTEgPSB5MSA+PSBkZXN0LmhlaWdodCA/IGRlc3QuaGVpZ2h0IC0gMSA6IHkxXG5cbiAgY29uc3QgaCA9IHkxIC0geTAgKyAxXG4gIGNvbnN0IGRhdGEgPSBuZXcgVWludDMyQXJyYXkoZGVzdC5kYXRhLmJ1ZmZlcilcblxuICBsZXQgaW5kZXggPSB5MCAqIGRlc3Qud2lkdGggKyB4XG4gIFxuICBmb3IoIGxldCBpID0gMDsgaSA8IGg7IGkrKyApe1xuICAgIGRhdGFbaW5kZXhdID0gY29sb3JcbiAgICBcbiAgICBpbmRleCArPSBkZXN0LndpZHRoXG4gIH1cblxuICByZXR1cm4gZGVzdFxufSJdfQ==