export const maybe = (value) => value !== null && value !== undefined;
export const assrt = (value, message = 'Expected value, saw null or undefined') => {
    if (maybe(value))
        return value;
    throw Error(message);
};
export const assrtInt = (value, message = `Expected integer, saw ${value}`) => {
    if (!Number.isInteger(value))
        throw Error(message);
    return value;
};
export const assrtPositive = (value, message = `Expected positive number, saw ${value}`) => {
    if (value < 0)
        throw Error(message);
    return value;
};
// tuple factories
export const t2Factory = (defaultValue) => (a = defaultValue, b = a) => [a, b];
export const t3Factory = (defaultValue) => (a = defaultValue, b = a, c = a) => [a, b, c];
export const t4Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a) => [a, b, c, d];
export const t5Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a, e = a) => [a, b, c, d, e];
export const t6Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a, e = a, f = a) => [
    a, b, c, d, e, f
];
export const t7Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a, e = a, f = a, g = a) => [
    a, b, c, d, e, f, g
];
export const t8Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a, e = a, f = a, g = a, h = a) => [a, b, c, d, e, f, g, h];
// for number tuples
export const t2N = t2Factory(0);
export const t3N = t3Factory(0);
export const t4N = t4Factory(0);
export const t5N = t5Factory(0);
export const t6N = t6Factory(0);
export const t7N = t7Factory(0);
export const t8N = t8Factory(0);
export const lerp = (a, b, t) => a + (b - a) * t;
export const wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));
export const orientation = (w, h) => w >= h ? 'landscape' : 'portrait';
// for debugging - eg when inside a raf - we only want first few logs, not for
// it to keep spewing multiple logs out every frame
export const limitedLogger = (maxLogs = 10, logger = console.log) => {
    let logs = 0;
    let paused = false;
    const pause = () => {
        paused = true;
    };
    const resume = () => {
        paused = false;
    };
    const reset = (max = 10) => {
        maxLogs = max;
        logs = 0;
    };
    const log = (...data) => {
        if (paused || (logs >= maxLogs)) {
            return;
        }
        logger(logs, ...data);
        logs++;
    };
    return { pause, resume, reset, log };
};
//# sourceMappingURL=data:application/json;base64,