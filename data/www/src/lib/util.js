export const maybe = (value) => value !== null && value !== undefined;
export const assrt = (value, message = 'Expected value, saw null or undefined') => {
    if (maybe(value))
        return value;
    throw Error(message);
};
export const assrtInt = (value, message = `Expected integer, saw ${value}`) => {
    if (!Number.isInteger(value))
        throw Error(message);
    return value;
};
export const assrtPositive = (value, message = `Expected positive number, saw ${value}`) => {
    if (value < 0)
        throw Error(message);
    return value;
};
// tuple factories
export const t2Factory = (defaultValue) => (a = defaultValue, b = a) => [a, b];
export const t3Factory = (defaultValue) => (a = defaultValue, b = a, c = a) => [a, b, c];
export const t4Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a) => [a, b, c, d];
export const t5Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a, e = a) => [a, b, c, d, e];
export const t6Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a, e = a, f = a) => [
    a, b, c, d, e, f
];
// for number tuples
export const t2N = t2Factory(0);
export const t3N = t3Factory(0);
export const t4N = t4Factory(0);
export const t5N = t5Factory(0);
export const t6N = t6Factory(0);
export const lerp = (a, b, t) => a + (b - a) * t;
export const wait = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));
export const orientation = (w, h) => w >= h ? 'landscape' : 'portrait';
// for debugging - eg when inside a raf - we only want first few logs, not for
// it to keep spewing multiple logs out every frame
export const limitedLogger = (maxLogs = 10, logger = console.log) => {
    let logs = 0;
    let paused = false;
    const pause = () => {
        paused = true;
    };
    const resume = () => {
        paused = false;
    };
    const reset = (max = 10) => {
        maxLogs = max;
        logs = 0;
    };
    const log = (...data) => {
        if (paused || (logs >= maxLogs)) {
            return;
        }
        logger(logs, ...data);
        logs++;
    };
    return { pause, resume, reset, log };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBSSxLQUFlLEVBQWMsRUFBRSxDQUN0RCxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQUE7QUFFdkMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQ25CLEtBQWUsRUFBRSxPQUFPLEdBQUcsdUNBQXVDLEVBQy9ELEVBQUU7SUFDTCxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQTtJQUU5QixNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUN0QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDdEIsS0FBYSxFQUFFLE9BQU8sR0FBRyx5QkFBeUIsS0FBSyxFQUFFLEVBQ2pELEVBQUU7SUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFBRSxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUVsRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUMzQixLQUFhLEVBQUUsT0FBTyxHQUFHLGlDQUFpQyxLQUFLLEVBQUUsRUFDekQsRUFBRTtJQUNWLElBQUksS0FBSyxHQUFHLENBQUM7UUFBRSxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUVuQyxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUMsQ0FBQTtBQUVELGtCQUFrQjtBQUNsQixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBSSxZQUFlLEVBQUUsRUFBRSxDQUM5QyxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFNUMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUksWUFBZSxFQUFFLEVBQUUsQ0FDOUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRXRELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFJLFlBQWUsRUFBRSxFQUFFLENBQzlDLENBQUMsQ0FBQyxHQUFHLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUVoRSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBSSxZQUFlLEVBQUUsRUFBRSxDQUM5QyxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFMUUsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUksWUFBZSxFQUFFLEVBQUUsQ0FDOUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBUyxFQUFFLENBQUM7SUFDOUQsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0NBQ2pCLENBQUE7QUFFSCxvQkFBb0I7QUFDcEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMvQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0IsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMvQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBRS9CLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBRXhFLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRS9FLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQWUsRUFBRSxDQUMvRCxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQTtBQUVuQyw4RUFBOEU7QUFDOUUsbURBQW1EO0FBQ25ELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQU8sR0FBRyxFQUFFLEVBQUUsTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUNsRSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUE7SUFDWixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUE7SUFFbEIsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO1FBQ2pCLE1BQU0sR0FBRyxJQUFJLENBQUE7SUFDZixDQUFDLENBQUE7SUFFRCxNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUU7UUFDbEIsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUNoQixDQUFDLENBQUE7SUFFRCxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRTtRQUN6QixPQUFPLEdBQUcsR0FBRyxDQUFBO1FBQ2IsSUFBSSxHQUFHLENBQUMsQ0FBQTtJQUNWLENBQUMsQ0FBQTtJQUVELE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFXLEVBQUUsRUFBRTtRQUM3QixJQUFJLE1BQU0sSUFBSSxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ2hDLE9BQU07UUFDUixDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQ3JCLElBQUksRUFBRSxDQUFBO0lBQ1IsQ0FBQyxDQUFBO0lBRUQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFBO0FBQ3RDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1heWJlLCBPcmllbnRhdGlvbiwgVDIsIFQzLCBUNCwgVDUsIFQ2IH0gZnJvbSAnLi90eXBlcy5qcydcblxuZXhwb3J0IGNvbnN0IG1heWJlID0gPFQ+KHZhbHVlOiBNYXliZTxUPik6IHZhbHVlIGlzIFQgPT5cbiAgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZFxuXG5leHBvcnQgY29uc3QgYXNzcnQgPSA8VD4oXG4gIHZhbHVlOiBNYXliZTxUPiwgbWVzc2FnZSA9ICdFeHBlY3RlZCB2YWx1ZSwgc2F3IG51bGwgb3IgdW5kZWZpbmVkJ1xuKTogVCA9PiB7XG4gIGlmIChtYXliZSh2YWx1ZSkpIHJldHVybiB2YWx1ZVxuXG4gIHRocm93IEVycm9yKG1lc3NhZ2UpXG59XG5cbmV4cG9ydCBjb25zdCBhc3NydEludCA9IChcbiAgdmFsdWU6IG51bWJlciwgbWVzc2FnZSA9IGBFeHBlY3RlZCBpbnRlZ2VyLCBzYXcgJHt2YWx1ZX1gXG4pOiBudW1iZXIgPT4ge1xuICBpZiAoIU51bWJlci5pc0ludGVnZXIodmFsdWUpKSB0aHJvdyBFcnJvcihtZXNzYWdlKVxuXG4gIHJldHVybiB2YWx1ZVxufVxuXG5leHBvcnQgY29uc3QgYXNzcnRQb3NpdGl2ZSA9IChcbiAgdmFsdWU6IG51bWJlciwgbWVzc2FnZSA9IGBFeHBlY3RlZCBwb3NpdGl2ZSBudW1iZXIsIHNhdyAke3ZhbHVlfWBcbik6IG51bWJlciA9PiB7XG4gIGlmICh2YWx1ZSA8IDApIHRocm93IEVycm9yKG1lc3NhZ2UpXG5cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8vIHR1cGxlIGZhY3Rvcmllc1xuZXhwb3J0IGNvbnN0IHQyRmFjdG9yeSA9IDxUPihkZWZhdWx0VmFsdWU6IFQpID0+XG4gIChhID0gZGVmYXVsdFZhbHVlLCBiID0gYSk6IFQyPFQ+ID0+IFthLCBiXVxuXG5leHBvcnQgY29uc3QgdDNGYWN0b3J5ID0gPFQ+KGRlZmF1bHRWYWx1ZTogVCkgPT5cbiAgKGEgPSBkZWZhdWx0VmFsdWUsIGIgPSBhLCBjID0gYSk6IFQzPFQ+ID0+IFthLCBiLCBjXVxuXG5leHBvcnQgY29uc3QgdDRGYWN0b3J5ID0gPFQ+KGRlZmF1bHRWYWx1ZTogVCkgPT5cbiAgKGEgPSBkZWZhdWx0VmFsdWUsIGIgPSBhLCBjID0gYSwgZCA9IGEpOiBUNDxUPiA9PiBbYSwgYiwgYywgZF1cblxuZXhwb3J0IGNvbnN0IHQ1RmFjdG9yeSA9IDxUPihkZWZhdWx0VmFsdWU6IFQpID0+XG4gIChhID0gZGVmYXVsdFZhbHVlLCBiID0gYSwgYyA9IGEsIGQgPSBhLCBlID0gYSk6IFQ1PFQ+ID0+IFthLCBiLCBjLCBkLCBlXVxuXG5leHBvcnQgY29uc3QgdDZGYWN0b3J5ID0gPFQ+KGRlZmF1bHRWYWx1ZTogVCkgPT5cbiAgKGEgPSBkZWZhdWx0VmFsdWUsIGIgPSBhLCBjID0gYSwgZCA9IGEsIGUgPSBhLCBmID0gYSk6IFQ2PFQ+ID0+IFtcbiAgICBhLCBiLCBjLCBkLCBlLCBmXG4gIF1cblxuLy8gZm9yIG51bWJlciB0dXBsZXNcbmV4cG9ydCBjb25zdCB0Mk4gPSB0MkZhY3RvcnkoMClcbmV4cG9ydCBjb25zdCB0M04gPSB0M0ZhY3RvcnkoMClcbmV4cG9ydCBjb25zdCB0NE4gPSB0NEZhY3RvcnkoMClcbmV4cG9ydCBjb25zdCB0NU4gPSB0NUZhY3RvcnkoMClcbmV4cG9ydCBjb25zdCB0Nk4gPSB0NkZhY3RvcnkoMClcblxuZXhwb3J0IGNvbnN0IGxlcnAgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHQ6IG51bWJlcikgPT4gYSArIChiIC0gYSkgKiB0XG5cbmV4cG9ydCBjb25zdCB3YWl0ID0gKG1zID0gMCkgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSlcblxuZXhwb3J0IGNvbnN0IG9yaWVudGF0aW9uID0gKHc6IG51bWJlciwgaDogbnVtYmVyKTogT3JpZW50YXRpb24gPT5cbiAgdyA+PSBoID8gJ2xhbmRzY2FwZScgOiAncG9ydHJhaXQnXG5cbi8vIGZvciBkZWJ1Z2dpbmcgLSBlZyB3aGVuIGluc2lkZSBhIHJhZiAtIHdlIG9ubHkgd2FudCBmaXJzdCBmZXcgbG9ncywgbm90IGZvclxuLy8gaXQgdG8ga2VlcCBzcGV3aW5nIG11bHRpcGxlIGxvZ3Mgb3V0IGV2ZXJ5IGZyYW1lXG5leHBvcnQgY29uc3QgbGltaXRlZExvZ2dlciA9IChtYXhMb2dzID0gMTAsIGxvZ2dlciA9IGNvbnNvbGUubG9nKSA9PiB7XG4gIGxldCBsb2dzID0gMFxuICBsZXQgcGF1c2VkID0gZmFsc2VcblxuICBjb25zdCBwYXVzZSA9ICgpID0+IHtcbiAgICBwYXVzZWQgPSB0cnVlXG4gIH1cblxuICBjb25zdCByZXN1bWUgPSAoKSA9PiB7XG4gICAgcGF1c2VkID0gZmFsc2VcbiAgfVxuXG4gIGNvbnN0IHJlc2V0ID0gKG1heCA9IDEwKSA9PiB7XG4gICAgbWF4TG9ncyA9IG1heFxuICAgIGxvZ3MgPSAwXG4gIH1cblxuICBjb25zdCBsb2cgPSAoLi4uZGF0YTogYW55W10pID0+IHtcbiAgICBpZiAocGF1c2VkIHx8IChsb2dzID49IG1heExvZ3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsb2dnZXIobG9ncywgLi4uZGF0YSlcbiAgICBsb2dzKytcbiAgfVxuXG4gIHJldHVybiB7IHBhdXNlLCByZXN1bWUsIHJlc2V0LCBsb2cgfVxufVxuIl19