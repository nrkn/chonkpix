export const assrt = (value, message = 'Expected value, saw null or undefined') => {
    if (value === null || value === undefined)
        throw Error(message);
    return value;
};
export const maybe = (value) => value !== null && value !== undefined;
export const assrtInt = (value, message = `Expected integer, saw ${value}`) => {
    if (!Number.isInteger(value))
        throw Error(message);
    return value;
};
export const assrtPositive = (value, message = `Expected positive number, saw ${value}`) => {
    if (value < 0)
        throw Error(message);
    return value;
};
// tuple factories
export const t2Factory = (defaultValue) => (a = defaultValue, b = a) => [a, b];
export const t3Factory = (defaultValue) => (a = defaultValue, b = a, c = a) => [a, b, c];
export const t4Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a) => [a, b, c, d];
export const t5Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a, e = a) => [a, b, c, d, e];
export const t6Factory = (defaultValue) => (a = defaultValue, b = a, c = a, d = a, e = a, f = a) => [
    a, b, c, d, e, f
];
// for number tuples
export const t2N = t2Factory(0);
export const t3N = t3Factory(0);
export const t4N = t4Factory(0);
export const t5N = t5Factory(0);
export const t6N = t6Factory(0);
export const lerp = (a, b, t) => a + (b - a) * t;
// for debugging - eg when inside a raf - we only want first few logs, not for
// it to keep spewing multiple logs out every frame
export const limitedLogger = (maxLogs = 10, logger = console.log) => {
    let logs = 0;
    let paused = false;
    const pause = () => {
        paused = true;
    };
    const resume = () => {
        paused = false;
    };
    const reset = (max = 10) => {
        maxLogs = max;
        logs = 0;
    };
    const log = (...data) => {
        if (paused || (logs === maxLogs)) {
            return;
        }
        logger(logs, ...data);
        logs++;
    };
    return { pause, resume, reset, log };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FDbkIsS0FBZSxFQUFFLE9BQU8sR0FBRyx1Q0FBdUMsRUFDL0QsRUFBRTtJQUNMLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUztRQUFFLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRS9ELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUksS0FBZSxFQUFjLEVBQUUsQ0FDdEQsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUyxDQUFBO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixLQUFhLEVBQUUsT0FBTyxHQUFHLHlCQUF5QixLQUFLLEVBQUUsRUFDakQsRUFBRTtJQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUFFLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRWxELE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQzNCLEtBQWEsRUFBRSxPQUFPLEdBQUcsaUNBQWlDLEtBQUssRUFBRSxFQUN6RCxFQUFFO0lBQ1YsSUFBSSxLQUFLLEdBQUcsQ0FBQztRQUFFLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRW5DLE9BQU8sS0FBSyxDQUFBO0FBQ2QsQ0FBQyxDQUFBO0FBRUQsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFJLFlBQWUsRUFBRSxFQUFFLENBQzlDLENBQUMsQ0FBQyxHQUFHLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUU1QyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBSSxZQUFlLEVBQUUsRUFBRSxDQUM5QyxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFdEQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUksWUFBZSxFQUFFLEVBQUUsQ0FDOUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBRWhFLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFJLFlBQWUsRUFBRSxFQUFFLENBQzlDLENBQUMsQ0FBQyxHQUFHLFlBQVksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUUxRSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBSSxZQUFlLEVBQUUsRUFBRSxDQUM5QyxDQUFDLENBQUMsR0FBRyxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFTLEVBQUUsQ0FBQztJQUM5RCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Q0FDakIsQ0FBQTtBQUVILG9CQUFvQjtBQUNwQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0IsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMvQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFFL0IsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7QUFFeEUsOEVBQThFO0FBQzlFLG1EQUFtRDtBQUNuRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDbEUsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFBO0lBQ1osSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBRWxCLE1BQU0sS0FBSyxHQUFHLEdBQUcsRUFBRTtRQUNqQixNQUFNLEdBQUcsSUFBSSxDQUFBO0lBQ2YsQ0FBQyxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFO1FBQ2xCLE1BQU0sR0FBRyxLQUFLLENBQUE7SUFDaEIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDekIsT0FBTyxHQUFHLEdBQUcsQ0FBQTtRQUNiLElBQUksR0FBRyxDQUFDLENBQUE7SUFDVixDQUFDLENBQUE7SUFFRCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBVyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxNQUFNLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNqQyxPQUFNO1FBQ1IsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUNyQixJQUFJLEVBQUUsQ0FBQTtJQUNSLENBQUMsQ0FBQTtJQUVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQTtBQUN0QyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXliZSwgVDIsIFQzLCBUNCwgVDUsIFQ2IH0gZnJvbSAnLi90eXBlcy5qcydcclxuXHJcbmV4cG9ydCBjb25zdCBhc3NydCA9IDxUPihcclxuICB2YWx1ZTogTWF5YmU8VD4sIG1lc3NhZ2UgPSAnRXhwZWN0ZWQgdmFsdWUsIHNhdyBudWxsIG9yIHVuZGVmaW5lZCdcclxuKTogVCA9PiB7XHJcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHRocm93IEVycm9yKG1lc3NhZ2UpXHJcblxyXG4gIHJldHVybiB2YWx1ZVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbWF5YmUgPSA8VD4odmFsdWU6IE1heWJlPFQ+KTogdmFsdWUgaXMgVCA9PlxyXG4gIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWRcclxuXHJcbmV4cG9ydCBjb25zdCBhc3NydEludCA9IChcclxuICB2YWx1ZTogbnVtYmVyLCBtZXNzYWdlID0gYEV4cGVjdGVkIGludGVnZXIsIHNhdyAke3ZhbHVlfWBcclxuKTogbnVtYmVyID0+IHtcclxuICBpZiAoIU51bWJlci5pc0ludGVnZXIodmFsdWUpKSB0aHJvdyBFcnJvcihtZXNzYWdlKVxyXG5cclxuICByZXR1cm4gdmFsdWVcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGFzc3J0UG9zaXRpdmUgPSAoXHJcbiAgdmFsdWU6IG51bWJlciwgbWVzc2FnZSA9IGBFeHBlY3RlZCBwb3NpdGl2ZSBudW1iZXIsIHNhdyAke3ZhbHVlfWBcclxuKTogbnVtYmVyID0+IHtcclxuICBpZiAodmFsdWUgPCAwKSB0aHJvdyBFcnJvcihtZXNzYWdlKVxyXG5cclxuICByZXR1cm4gdmFsdWVcclxufVxyXG5cclxuLy8gdHVwbGUgZmFjdG9yaWVzXHJcbmV4cG9ydCBjb25zdCB0MkZhY3RvcnkgPSA8VD4oZGVmYXVsdFZhbHVlOiBUKSA9PlxyXG4gIChhID0gZGVmYXVsdFZhbHVlLCBiID0gYSk6IFQyPFQ+ID0+IFthLCBiXVxyXG5cclxuZXhwb3J0IGNvbnN0IHQzRmFjdG9yeSA9IDxUPihkZWZhdWx0VmFsdWU6IFQpID0+XHJcbiAgKGEgPSBkZWZhdWx0VmFsdWUsIGIgPSBhLCBjID0gYSk6IFQzPFQ+ID0+IFthLCBiLCBjXVxyXG5cclxuZXhwb3J0IGNvbnN0IHQ0RmFjdG9yeSA9IDxUPihkZWZhdWx0VmFsdWU6IFQpID0+XHJcbiAgKGEgPSBkZWZhdWx0VmFsdWUsIGIgPSBhLCBjID0gYSwgZCA9IGEpOiBUNDxUPiA9PiBbYSwgYiwgYywgZF1cclxuXHJcbmV4cG9ydCBjb25zdCB0NUZhY3RvcnkgPSA8VD4oZGVmYXVsdFZhbHVlOiBUKSA9PlxyXG4gIChhID0gZGVmYXVsdFZhbHVlLCBiID0gYSwgYyA9IGEsIGQgPSBhLCBlID0gYSk6IFQ1PFQ+ID0+IFthLCBiLCBjLCBkLCBlXVxyXG5cclxuZXhwb3J0IGNvbnN0IHQ2RmFjdG9yeSA9IDxUPihkZWZhdWx0VmFsdWU6IFQpID0+XHJcbiAgKGEgPSBkZWZhdWx0VmFsdWUsIGIgPSBhLCBjID0gYSwgZCA9IGEsIGUgPSBhLCBmID0gYSk6IFQ2PFQ+ID0+IFtcclxuICAgIGEsIGIsIGMsIGQsIGUsIGZcclxuICBdXHJcblxyXG4vLyBmb3IgbnVtYmVyIHR1cGxlc1xyXG5leHBvcnQgY29uc3QgdDJOID0gdDJGYWN0b3J5KDApXHJcbmV4cG9ydCBjb25zdCB0M04gPSB0M0ZhY3RvcnkoMClcclxuZXhwb3J0IGNvbnN0IHQ0TiA9IHQ0RmFjdG9yeSgwKVxyXG5leHBvcnQgY29uc3QgdDVOID0gdDVGYWN0b3J5KDApXHJcbmV4cG9ydCBjb25zdCB0Nk4gPSB0NkZhY3RvcnkoMClcclxuXHJcbmV4cG9ydCBjb25zdCBsZXJwID0gKGE6IG51bWJlciwgYjogbnVtYmVyLCB0OiBudW1iZXIpID0+IGEgKyAoYiAtIGEpICogdFxyXG5cclxuLy8gZm9yIGRlYnVnZ2luZyAtIGVnIHdoZW4gaW5zaWRlIGEgcmFmIC0gd2Ugb25seSB3YW50IGZpcnN0IGZldyBsb2dzLCBub3QgZm9yXHJcbi8vIGl0IHRvIGtlZXAgc3Bld2luZyBtdWx0aXBsZSBsb2dzIG91dCBldmVyeSBmcmFtZVxyXG5leHBvcnQgY29uc3QgbGltaXRlZExvZ2dlciA9IChtYXhMb2dzID0gMTAsIGxvZ2dlciA9IGNvbnNvbGUubG9nKSA9PiB7XHJcbiAgbGV0IGxvZ3MgPSAwXHJcbiAgbGV0IHBhdXNlZCA9IGZhbHNlXHJcblxyXG4gIGNvbnN0IHBhdXNlID0gKCkgPT4ge1xyXG4gICAgcGF1c2VkID0gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVzdW1lID0gKCkgPT4ge1xyXG4gICAgcGF1c2VkID0gZmFsc2VcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlc2V0ID0gKG1heCA9IDEwKSA9PiB7XHJcbiAgICBtYXhMb2dzID0gbWF4XHJcbiAgICBsb2dzID0gMFxyXG4gIH1cclxuXHJcbiAgY29uc3QgbG9nID0gKC4uLmRhdGE6IGFueVtdKSA9PiB7XHJcbiAgICBpZiAocGF1c2VkIHx8IChsb2dzID09PSBtYXhMb2dzKSkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICBsb2dnZXIobG9ncywgLi4uZGF0YSlcclxuICAgIGxvZ3MrK1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgcGF1c2UsIHJlc3VtZSwgcmVzZXQsIGxvZyB9XHJcbn1cclxuIl19