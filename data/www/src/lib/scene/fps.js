import { fontImageToPoints, layoutTextLine, textLayoutToIndices } from '../bmpfont/layout.js';
import { loadFontMono } from '../bmpfont/load.js';
import { createColor } from '../image/color.js';
import { fill, fillIndices } from '../image/fill.js';
import { maybe } from '../util.js';
export const fpsSceneHelper = () => {
    let isActive = false;
    let font;
    let fontPts = {};
    const init = async (_state) => {
        font = await loadFontMono('EverexME_5x8');
        fontPts = fontImageToPoints(font);
        isActive = true;
    };
    const update = (state) => {
        if (!maybe(font))
            throw Error('Expected font');
        if (!maybe(fontPts))
            throw Error('Expected fontPts');
        const buffer = state.view.getBuffer();
        const { width } = buffer;
        const padding = 2;
        const frameTime = state.time.getFrameTime();
        const fps = Math.round(1000 / frameTime);
        const fpsText = `${fps} fps (${frameTime.toFixed(1)}ms)`;
        const fpsW = font.width * fpsText.length + padding * 2;
        const fpsH = font.height + padding * 2;
        const fpsX = width - fpsW - padding;
        const fpsY = padding;
        const fpsBg = createColor(0x00, 0x78, 0xd4);
        const fpsFg = createColor(0xff, 0xd7, 0x00);
        fill(buffer, fpsBg, [fpsX, fpsY, fpsW, fpsH]);
        const fpsLayout = layoutTextLine(font, fpsText);
        const fpsIndices = textLayoutToIndices(buffer, fpsX + padding, fpsY + padding, fontPts, fpsLayout);
        fillIndices(fpsIndices, buffer, fpsFg);
    };
    const quit = async (_state) => {
        font = null;
        fontPts = {};
        isActive = false;
    };
    const setActive = (active) => {
        isActive = active;
    };
    return { init, update, quit, setActive };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnBzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zY2VuZS9mcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFDdkQsTUFBTSxzQkFBc0IsQ0FBQTtBQUM3QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFakQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQy9DLE9BQU8sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFcEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUVsQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsR0FBVSxFQUFFO0lBQ3hDLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQTtJQUNwQixJQUFJLElBQXFCLENBQUE7SUFDekIsSUFBSSxPQUFPLEdBQWdDLEVBQUUsQ0FBQTtJQUU3QyxNQUFNLElBQUksR0FBRyxLQUFLLEVBQUUsTUFBYSxFQUFFLEVBQUU7UUFDbkMsSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ3pDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVqQyxRQUFRLEdBQUcsSUFBSSxDQUFBO0lBQ2pCLENBQUMsQ0FBQTtJQUVELE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFBRSxNQUFNLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUFFLE1BQU0sS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFFcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNyQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBRXhCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQTtRQUVqQixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFBO1FBQ3hDLE1BQU0sT0FBTyxHQUFHLEdBQUcsR0FBRyxTQUFTLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtRQUV4RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQTtRQUN0RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUE7UUFDdEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxPQUFPLENBQUE7UUFDbkMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFBO1FBRXBCLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzNDLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRTNDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUU3QyxNQUFNLFNBQVMsR0FBRyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBRS9DLE1BQU0sVUFBVSxHQUFHLG1CQUFtQixDQUNwQyxNQUFNLEVBQUUsSUFBSSxHQUFHLE9BQU8sRUFBRSxJQUFJLEdBQUcsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQzNELENBQUE7UUFFRCxXQUFXLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUN4QyxDQUFDLENBQUE7SUFFRCxNQUFNLElBQUksR0FBRyxLQUFLLEVBQUUsTUFBYSxFQUFFLEVBQUU7UUFDbkMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNYLE9BQU8sR0FBRyxFQUFFLENBQUE7UUFFWixRQUFRLEdBQUcsS0FBSyxDQUFBO0lBQ2xCLENBQUMsQ0FBQTtJQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBZSxFQUFFLEVBQUU7UUFDcEMsUUFBUSxHQUFHLE1BQU0sQ0FBQTtJQUNuQixDQUFDLENBQUE7SUFFRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUE7QUFDMUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBmb250SW1hZ2VUb1BvaW50cywgbGF5b3V0VGV4dExpbmUsIHRleHRMYXlvdXRUb0luZGljZXNcclxufSBmcm9tICcuLi9ibXBmb250L2xheW91dC5qcydcclxuaW1wb3J0IHsgbG9hZEZvbnRNb25vIH0gZnJvbSAnLi4vYm1wZm9udC9sb2FkLmpzJ1xyXG5pbXBvcnQgeyBCbXBGb250TSB9IGZyb20gJy4uL2JtcGZvbnQvdHlwZXMuanMnXHJcbmltcG9ydCB7IGNyZWF0ZUNvbG9yIH0gZnJvbSAnLi4vaW1hZ2UvY29sb3IuanMnXHJcbmltcG9ydCB7IGZpbGwsIGZpbGxJbmRpY2VzIH0gZnJvbSAnLi4vaW1hZ2UvZmlsbC5qcydcclxuaW1wb3J0IHsgTWF5YmUsIFNjZW5lLCBTdGF0ZSwgVDIgfSBmcm9tICcuLi90eXBlcy5qcydcclxuaW1wb3J0IHsgbWF5YmUgfSBmcm9tICcuLi91dGlsLmpzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IGZwc1NjZW5lSGVscGVyID0gKCk6IFNjZW5lID0+IHtcclxuICBsZXQgaXNBY3RpdmUgPSBmYWxzZVxyXG4gIGxldCBmb250OiBNYXliZTxCbXBGb250TT5cclxuICBsZXQgZm9udFB0czogUmVjb3JkPG51bWJlciwgTWF5YmU8VDJbXT4+ID0ge31cclxuXHJcbiAgY29uc3QgaW5pdCA9IGFzeW5jIChfc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgICBmb250ID0gYXdhaXQgbG9hZEZvbnRNb25vKCdFdmVyZXhNRV81eDgnKVxyXG4gICAgZm9udFB0cyA9IGZvbnRJbWFnZVRvUG9pbnRzKGZvbnQpXHJcblxyXG4gICAgaXNBY3RpdmUgPSB0cnVlXHJcbiAgfVxyXG5cclxuICBjb25zdCB1cGRhdGUgPSAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgICBpZiAoIW1heWJlKGZvbnQpKSB0aHJvdyBFcnJvcignRXhwZWN0ZWQgZm9udCcpXHJcbiAgICBpZiAoIW1heWJlKGZvbnRQdHMpKSB0aHJvdyBFcnJvcignRXhwZWN0ZWQgZm9udFB0cycpXHJcblxyXG4gICAgY29uc3QgYnVmZmVyID0gc3RhdGUudmlldy5nZXRCdWZmZXIoKVxyXG4gICAgY29uc3QgeyB3aWR0aCB9ID0gYnVmZmVyXHJcblxyXG4gICAgY29uc3QgcGFkZGluZyA9IDJcclxuXHJcbiAgICBjb25zdCBmcmFtZVRpbWUgPSBzdGF0ZS50aW1lLmdldEZyYW1lVGltZSgpXHJcbiAgICBjb25zdCBmcHMgPSBNYXRoLnJvdW5kKDEwMDAgLyBmcmFtZVRpbWUpXHJcbiAgICBjb25zdCBmcHNUZXh0ID0gYCR7ZnBzfSBmcHMgKCR7ZnJhbWVUaW1lLnRvRml4ZWQoMSl9bXMpYFxyXG5cclxuICAgIGNvbnN0IGZwc1cgPSBmb250LndpZHRoICogZnBzVGV4dC5sZW5ndGggKyBwYWRkaW5nICogMlxyXG4gICAgY29uc3QgZnBzSCA9IGZvbnQuaGVpZ2h0ICsgcGFkZGluZyAqIDJcclxuICAgIGNvbnN0IGZwc1ggPSB3aWR0aCAtIGZwc1cgLSBwYWRkaW5nXHJcbiAgICBjb25zdCBmcHNZID0gcGFkZGluZ1xyXG5cclxuICAgIGNvbnN0IGZwc0JnID0gY3JlYXRlQ29sb3IoMHgwMCwgMHg3OCwgMHhkNClcclxuICAgIGNvbnN0IGZwc0ZnID0gY3JlYXRlQ29sb3IoMHhmZiwgMHhkNywgMHgwMClcclxuXHJcbiAgICBmaWxsKGJ1ZmZlciwgZnBzQmcsIFtmcHNYLCBmcHNZLCBmcHNXLCBmcHNIXSlcclxuXHJcbiAgICBjb25zdCBmcHNMYXlvdXQgPSBsYXlvdXRUZXh0TGluZShmb250LCBmcHNUZXh0KVxyXG5cclxuICAgIGNvbnN0IGZwc0luZGljZXMgPSB0ZXh0TGF5b3V0VG9JbmRpY2VzKFxyXG4gICAgICBidWZmZXIsIGZwc1ggKyBwYWRkaW5nLCBmcHNZICsgcGFkZGluZywgZm9udFB0cywgZnBzTGF5b3V0XHJcbiAgICApXHJcblxyXG4gICAgZmlsbEluZGljZXMoZnBzSW5kaWNlcywgYnVmZmVyLCBmcHNGZylcclxuICB9XHJcblxyXG4gIGNvbnN0IHF1aXQgPSBhc3luYyAoX3N0YXRlOiBTdGF0ZSkgPT4ge1xyXG4gICAgZm9udCA9IG51bGxcclxuICAgIGZvbnRQdHMgPSB7fVxyXG5cclxuICAgIGlzQWN0aXZlID0gZmFsc2VcclxuICB9XHJcblxyXG4gIGNvbnN0IHNldEFjdGl2ZSA9IChhY3RpdmU6IGJvb2xlYW4pID0+IHtcclxuICAgIGlzQWN0aXZlID0gYWN0aXZlXHJcbiAgfVxyXG5cclxuICByZXR1cm4geyBpbml0LCB1cGRhdGUsIHF1aXQsIHNldEFjdGl2ZSB9XHJcbn1cclxuIl19