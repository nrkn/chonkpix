import { maybe } from '../util.js';
const hashPoint = ([x, y]) => (x << 16) | y;
const cardCache = new Map();
const ordCache = new Map();
const allCache = new Map();
export const getNeighboursCardinal = (pt) => {
    const hash = hashPoint(pt);
    let points = cardCache.get(hash);
    if (maybe(points))
        return points;
    const [x, y] = pt;
    const t = y - 1;
    const r = x + 1;
    const b = y + 1;
    const l = x - 1;
    // t, r, b, l
    const pts = [
        [x, t], [r, y], [x, b], [l, y]
    ];
    cardCache.set(hash, pts);
    return pts;
};
export const getNeighboursOrdinal = (pt) => {
    const hash = hashPoint(pt);
    let points = ordCache.get(hash);
    if (maybe(points))
        return points;
    const [x, y] = pt;
    const t = y - 1;
    const r = x + 1;
    const b = y + 1;
    const l = x - 1;
    // tr, br, bl, tl
    const pts = [
        [r, t], [r, b], [l, b], [l, t]
    ];
    ordCache.set(hash, pts);
    return pts;
};
export const getNeighboursAll = (pt) => {
    const hash = hashPoint(pt);
    let points = allCache.get(hash);
    if (maybe(points))
        return points;
    const [x, y] = pt;
    const t = y - 1;
    const r = x + 1;
    const b = y + 1;
    const l = x - 1;
    // t, tr, r, br, b, bl, l, tl
    const pts = [
        [x, t], [r, t], [r, y], [r, b],
        [x, b], [l, b], [l, y], [l, t]
    ];
    allCache.set(hash, pts);
    return pts;
};
export const getNeighbours = (pt, type = 'all') => {
    switch (type) {
        case 'cardinal': return getNeighboursCardinal(pt);
        case 'ordinal': return getNeighboursOrdinal(pt);
        case 'all': return getNeighboursAll(pt);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVpZ2hib3Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvZ2VvbS9uZWlnaGJvdXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFHbEMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBRS9DLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFBO0FBQ3pDLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFBO0FBQ3hDLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFBO0FBRXhDLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsRUFBTSxFQUFRLEVBQUU7SUFDcEQsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRTFCLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFaEMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQUUsT0FBTyxNQUFNLENBQUE7SUFFaEMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7SUFFakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNmLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDZixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVmLGFBQWE7SUFDYixNQUFNLEdBQUcsR0FBUztRQUNoQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFB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LE9BQU8sb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDL0MsS0FBSyxLQUFLLENBQUMsQ0FBQyxPQUFPLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3pDLENBQUM7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUMiB9IGZyb20gJy4uL3R5cGVzLmpzJ1xyXG5pbXBvcnQgeyBtYXliZSB9IGZyb20gJy4uL3V0aWwuanMnXHJcbmltcG9ydCB7IE5laWdoYm91clR5cGUgfSBmcm9tICcuL3R5cGVzLmpzJ1xyXG5cclxuY29uc3QgaGFzaFBvaW50ID0gKFt4LCB5XTogVDIpID0+ICh4IDw8IDE2KSB8IHlcclxuXHJcbmNvbnN0IGNhcmRDYWNoZSA9IG5ldyBNYXA8bnVtYmVyLCBUMltdPigpXHJcbmNvbnN0IG9yZENhY2hlID0gbmV3IE1hcDxudW1iZXIsIFQyW10+KClcclxuY29uc3QgYWxsQ2FjaGUgPSBuZXcgTWFwPG51bWJlciwgVDJbXT4oKVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldE5laWdoYm91cnNDYXJkaW5hbCA9IChwdDogVDIpOiBUMltdID0+IHtcclxuICBjb25zdCBoYXNoID0gaGFzaFBvaW50KHB0KVxyXG5cclxuICBsZXQgcG9pbnRzID0gY2FyZENhY2hlLmdldChoYXNoKVxyXG5cclxuICBpZiAobWF5YmUocG9pbnRzKSkgcmV0dXJuIHBvaW50c1xyXG5cclxuICBjb25zdCBbeCwgeV0gPSBwdFxyXG5cclxuICBjb25zdCB0ID0geSAtIDFcclxuICBjb25zdCByID0geCArIDFcclxuICBjb25zdCBiID0geSArIDFcclxuICBjb25zdCBsID0geCAtIDFcclxuXHJcbiAgLy8gdCwgciwgYiwgbFxyXG4gIGNvbnN0IHB0czogVDJbXSA9IFtcclxuICAgIFt4LCB0XSwgW3IsIHldLCBbeCwgYl0sIFtsLCB5XVxyXG4gIF1cclxuXHJcbiAgY2FyZENhY2hlLnNldChoYXNoLCBwdHMpXHJcblxyXG4gIHJldHVybiBwdHNcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldE5laWdoYm91cnNPcmRpbmFsID0gKHB0OiBUMik6IFQyW10gPT4ge1xyXG4gIGNvbnN0IGhhc2ggPSBoYXNoUG9pbnQocHQpXHJcblxyXG4gIGxldCBwb2ludHMgPSBvcmRDYWNoZS5nZXQoaGFzaClcclxuXHJcbiAgaWYgKG1heWJlKHBvaW50cykpIHJldHVybiBwb2ludHNcclxuXHJcbiAgY29uc3QgW3gsIHldID0gcHRcclxuXHJcbiAgY29uc3QgdCA9IHkgLSAxXHJcbiAgY29uc3QgciA9IHggKyAxXHJcbiAgY29uc3QgYiA9IHkgKyAxXHJcbiAgY29uc3QgbCA9IHggLSAxXHJcblxyXG4gIC8vIHRyLCBiciwgYmwsIHRsXHJcbiAgY29uc3QgcHRzOiBUMltdID0gW1xyXG4gICAgW3IsIHRdLCBbciwgYl0sIFtsLCBiXSwgW2wsIHRdXHJcbiAgXVxyXG5cclxuICBvcmRDYWNoZS5zZXQoaGFzaCwgcHRzKVxyXG5cclxuICByZXR1cm4gcHRzXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXROZWlnaGJvdXJzQWxsID0gKHB0OiBUMik6IFQyW10gPT4ge1xyXG4gIGNvbnN0IGhhc2ggPSBoYXNoUG9pbnQocHQpXHJcblxyXG4gIGxldCBwb2ludHMgPSBhbGxDYWNoZS5nZXQoaGFzaClcclxuXHJcbiAgaWYgKG1heWJlKHBvaW50cykpIHJldHVybiBwb2ludHNcclxuXHJcbiAgY29uc3QgW3gsIHldID0gcHRcclxuXHJcbiAgY29uc3QgdCA9IHkgLSAxXHJcbiAgY29uc3QgciA9IHggKyAxXHJcbiAgY29uc3QgYiA9IHkgKyAxXHJcbiAgY29uc3QgbCA9IHggLSAxXHJcblxyXG4gIC8vIHQsIHRyLCByLCBiciwgYiwgYmwsIGwsIHRsXHJcbiAgY29uc3QgcHRzOiBUMltdID0gW1xyXG4gICAgW3gsIHRdLCBbciwgdF0sIFtyLCB5XSwgW3IsIGJdLFxyXG4gICAgW3gsIGJdLCBbbCwgYl0sIFtsLCB5XSwgW2wsIHRdXHJcbiAgXVxyXG5cclxuICBhbGxDYWNoZS5zZXQoaGFzaCwgcHRzKVxyXG5cclxuICByZXR1cm4gcHRzXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXROZWlnaGJvdXJzID0gKHB0OiBUMiwgdHlwZTogTmVpZ2hib3VyVHlwZSA9ICdhbGwnKTogVDJbXSA9PiB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICdjYXJkaW5hbCc6IHJldHVybiBnZXROZWlnaGJvdXJzQ2FyZGluYWwocHQpXHJcbiAgICBjYXNlICdvcmRpbmFsJzogcmV0dXJuIGdldE5laWdoYm91cnNPcmRpbmFsKHB0KVxyXG4gICAgY2FzZSAnYWxsJzogcmV0dXJuIGdldE5laWdoYm91cnNBbGwocHQpXHJcbiAgfVxyXG59XHJcbiJdfQ==