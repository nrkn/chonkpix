export const modifierKeys = [
    'Alt', 'AltGraph', 'CapsLock', 'Control', 'NumLock', 'ScrollLock', 'Shift'
];
export const whitespaceKeys = [
    'Enter', 'Tab', ' '
];
export const navigationKeys = [
    'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Home', 'PageDown',
    'PageUp'
];
export const editingKeys = [
    'Backspace', 'Delete', 'Insert'
];
// nb Escape is used by the scene to exit so we'll never be able to trap it,
// but leaving it in anyway in case things change in future
export const uiKeys = [
    'Escape', 'Help', 'Pause'
];
export const alphaKeys = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
];
export const numberKeys = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
];
export const symbolKeys = [
    '!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-',
    '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^',
    '_', '`', '{', '|', '}', '~'
];
// eg keys that will be echoed to the terminal, not control or special keys
export const printableKeys = [
    ...alphaKeys, ...numberKeys, ...symbolKeys, ' '
];
export const printableKeySet = new Set(printableKeys);
export const allKeys = [
    ...modifierKeys, ...whitespaceKeys, ...navigationKeys, ...editingKeys,
    ...uiKeys, ...alphaKeys, ...numberKeys, ...symbolKeys
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2lvL2NvbnN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRztJQUMxQixLQUFLLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPO0NBQ2xFLENBQUE7QUFFVixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUc7SUFDNUIsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHO0NBQ1gsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRztJQUM1QixXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVO0lBQzVFLFFBQVE7Q0FDQSxDQUFBO0FBRVYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHO0lBQ3pCLFdBQVcsRUFBRSxRQUFRLEVBQUUsUUFBUTtDQUN2QixDQUFBO0FBRVYsNEVBQTRFO0FBQzVFLDJEQUEyRDtBQUMzRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUc7SUFDcEIsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPO0NBQ2pCLENBQUE7QUFFVixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUc7SUFDdkIsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztJQUMvRCxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0lBQy9ELEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7SUFDL0QsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztDQUN2RCxDQUFBO0FBRVYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHO0lBQ3hCLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Q0FDeEMsQ0FBQTtBQUVWLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRztJQUN4QixHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0lBQ2hFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUc7SUFDaEUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO0NBQ3BCLENBQUE7QUFFViwyRUFBMkU7QUFDM0UsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHO0lBQzNCLEdBQUcsU0FBUyxFQUFFLEdBQUcsVUFBVSxFQUFFLEdBQUcsVUFBVSxFQUFFLEdBQUc7Q0FDdkMsQ0FBQTtBQUlWLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUVyRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsR0FBRyxZQUFZLEVBQUUsR0FBRyxjQUFjLEVBQUUsR0FBRyxjQUFjLEVBQUUsR0FBRyxXQUFXO0lBQ3JFLEdBQUcsTUFBTSxFQUFFLEdBQUcsU0FBUyxFQUFFLEdBQUcsVUFBVSxFQUFFLEdBQUcsVUFBVTtDQUM3QyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IG1vZGlmaWVyS2V5cyA9IFtcbiAgJ0FsdCcsICdBbHRHcmFwaCcsICdDYXBzTG9jaycsICdDb250cm9sJywgJ051bUxvY2snLCAnU2Nyb2xsTG9jaycsICdTaGlmdCdcbl0gYXMgY29uc3RcblxuZXhwb3J0IGNvbnN0IHdoaXRlc3BhY2VLZXlzID0gW1xuICAnRW50ZXInLCAnVGFiJywgJyAnXG5dIGFzIGNvbnN0XG5cbmV4cG9ydCBjb25zdCBuYXZpZ2F0aW9uS2V5cyA9IFtcbiAgJ0Fycm93RG93bicsICdBcnJvd0xlZnQnLCAnQXJyb3dSaWdodCcsICdBcnJvd1VwJywgJ0VuZCcsICdIb21lJywgJ1BhZ2VEb3duJyxcbiAgJ1BhZ2VVcCdcbl0gYXMgY29uc3RcblxuZXhwb3J0IGNvbnN0IGVkaXRpbmdLZXlzID0gW1xuICAnQmFja3NwYWNlJywgJ0RlbGV0ZScsICdJbnNlcnQnXG5dIGFzIGNvbnN0XG5cbi8vIG5iIEVzY2FwZSBpcyB1c2VkIGJ5IHRoZSBzY2VuZSB0byBleGl0IHNvIHdlJ2xsIG5ldmVyIGJlIGFibGUgdG8gdHJhcCBpdCxcbi8vIGJ1dCBsZWF2aW5nIGl0IGluIGFueXdheSBpbiBjYXNlIHRoaW5ncyBjaGFuZ2UgaW4gZnV0dXJlXG5leHBvcnQgY29uc3QgdWlLZXlzID0gW1xuICAnRXNjYXBlJywgJ0hlbHAnLCAnUGF1c2UnXG5dIGFzIGNvbnN0XG5cbmV4cG9ydCBjb25zdCBhbHBoYUtleXMgPSBbXG4gICdBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJyxcbiAgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onLFxuICAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsXG4gICduJywgJ28nLCAncCcsICdxJywgJ3InLCAncycsICd0JywgJ3UnLCAndicsICd3JywgJ3gnLCAneScsICd6J1xuXSBhcyBjb25zdFxuXG5leHBvcnQgY29uc3QgbnVtYmVyS2V5cyA9IFtcbiAgJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknXG5dIGFzIGNvbnN0XG5cbmV4cG9ydCBjb25zdCBzeW1ib2xLZXlzID0gW1xuICAnIScsICdcIicsICcjJywgJyQnLCAnJScsICcmJywgJ1xcJycsICcoJywgJyknLCAnKicsICcrJywgJywnLCAnLScsXG4gICcuJywgJy8nLCAnOicsICc7JywgJzwnLCAnPScsICc+JywgJz8nLCAnQCcsICdbJywgJ1xcXFwnLCAnXScsICdeJyxcbiAgJ18nLCAnYCcsICd7JywgJ3wnLCAnfScsICd+J1xuXSBhcyBjb25zdFxuXG4vLyBlZyBrZXlzIHRoYXQgd2lsbCBiZSBlY2hvZWQgdG8gdGhlIHRlcm1pbmFsLCBub3QgY29udHJvbCBvciBzcGVjaWFsIGtleXNcbmV4cG9ydCBjb25zdCBwcmludGFibGVLZXlzID0gW1xuICAuLi5hbHBoYUtleXMsIC4uLm51bWJlcktleXMsIC4uLnN5bWJvbEtleXMsICcgJ1xuXSBhcyBjb25zdFxuXG5leHBvcnQgdHlwZSBQcmludGFibGVLZXkgPSB0eXBlb2YgcHJpbnRhYmxlS2V5c1tudW1iZXJdXG5cbmV4cG9ydCBjb25zdCBwcmludGFibGVLZXlTZXQgPSBuZXcgU2V0KHByaW50YWJsZUtleXMpXG5cbmV4cG9ydCBjb25zdCBhbGxLZXlzID0gW1xuICAuLi5tb2RpZmllcktleXMsIC4uLndoaXRlc3BhY2VLZXlzLCAuLi5uYXZpZ2F0aW9uS2V5cywgLi4uZWRpdGluZ0tleXMsXG4gIC4uLnVpS2V5cywgLi4uYWxwaGFLZXlzLCAuLi5udW1iZXJLZXlzLCAuLi5zeW1ib2xLZXlzXG5dIGFzIGNvbnN0Il19