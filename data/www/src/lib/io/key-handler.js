export const keyHandler = (initialDelay, repeatDelay) => {
    let events = [];
    const isDown = {};
    const nextRepeatTime = {};
    // ignore repeats from the event emitter, we handle them ourselves
    const onKeydown = (key, now) => {
        if (isDown[key])
            return;
        isDown[key] = true;
        events.push(['start', key, now]);
        nextRepeatTime[key] = now + initialDelay;
    };
    const onKeyup = (key, now) => {
        isDown[key] = false;
        events.push(['end', key, now]);
        nextRepeatTime[key] = null;
    };
    const poll = (now) => {
        const out = events.slice();
        events = [];
        for (const key in nextRepeatTime) {
            let nextTime = nextRepeatTime[key];
            if (!nextTime)
                continue;
            let time = now - nextTime;
            if (time < 0)
                continue;
            out.push(['repeat', key, nextTime]);
            while (time > repeatDelay) {
                nextTime += repeatDelay;
                time -= repeatDelay;
                out.push(['repeat', key, nextTime]);
            }
        }
        return out;
    };
    return {
        onKeydown, onKeyup, poll
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2lvL2tleS1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUN4QixZQUFvQixFQUFFLFdBQW1CLEVBQ3pDLEVBQUU7SUFDRixJQUFJLE1BQU0sR0FBZ0IsRUFBRSxDQUFBO0lBRTVCLE1BQU0sTUFBTSxHQUFtQyxFQUFFLENBQUE7SUFDakQsTUFBTSxjQUFjLEdBQWtDLEVBQUUsQ0FBQTtJQUV4RCxrRUFBa0U7SUFDbEUsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDN0MsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTTtRQUV2QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFBO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDaEMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUE7SUFDMUMsQ0FBQyxDQUFBO0lBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDM0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQTtRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQzlCLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUE7SUFDNUIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFXLEVBQWUsRUFBRTtRQUN4QyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7UUFFMUIsTUFBTSxHQUFHLEVBQUUsQ0FBQTtRQUVYLEtBQUssTUFBTSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7WUFDakMsSUFBSSxRQUFRLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRWxDLElBQUksQ0FBQyxRQUFRO2dCQUFFLFNBQVE7WUFFdkIsSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQTtZQUV6QixJQUFJLElBQUksR0FBRyxDQUFDO2dCQUFFLFNBQVE7WUFFdEIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtZQUVuQyxPQUFPLElBQUksR0FBRyxXQUFXLEVBQUcsQ0FBQztnQkFDM0IsUUFBUSxJQUFJLFdBQVcsQ0FBQTtnQkFDdkIsSUFBSSxJQUFJLFdBQVcsQ0FBQTtnQkFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtZQUNyQyxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxDQUFBO0lBRUQsT0FBTztRQUNMLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSTtLQUN6QixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWF5YmUgfSBmcm9tICcuLi90eXBlcy5qcydcclxuXHJcbnR5cGUgS2V5SGFuZGxlckV2ZW50ID0gJ3N0YXJ0JyB8ICdlbmQnIHwgJ3JlcGVhdCdcclxuXHJcbnR5cGUgRXZlbnREYXRhID0gW3R5cGU6IEtleUhhbmRsZXJFdmVudCwga2V5OiBzdHJpbmcsIHRpbWU6IG51bWJlcl1cclxuXHJcbmV4cG9ydCBjb25zdCBrZXlIYW5kbGVyID0gKFxyXG4gIGluaXRpYWxEZWxheTogbnVtYmVyLCByZXBlYXREZWxheTogbnVtYmVyXHJcbikgPT4ge1xyXG4gIGxldCBldmVudHM6IEV2ZW50RGF0YVtdID0gW11cclxuXHJcbiAgY29uc3QgaXNEb3duOiBSZWNvcmQ8c3RyaW5nLCBNYXliZTxib29sZWFuPj4gPSB7fVxyXG4gIGNvbnN0IG5leHRSZXBlYXRUaW1lOiBSZWNvcmQ8c3RyaW5nLCBNYXliZTxudW1iZXI+PiA9IHt9XHJcblxyXG4gIC8vIGlnbm9yZSByZXBlYXRzIGZyb20gdGhlIGV2ZW50IGVtaXR0ZXIsIHdlIGhhbmRsZSB0aGVtIG91cnNlbHZlc1xyXG4gIGNvbnN0IG9uS2V5ZG93biA9IChrZXk6IHN0cmluZywgbm93OiBudW1iZXIpID0+IHtcclxuICAgIGlmIChpc0Rvd25ba2V5XSkgcmV0dXJuXHJcblxyXG4gICAgaXNEb3duW2tleV0gPSB0cnVlXHJcbiAgICBldmVudHMucHVzaChbJ3N0YXJ0Jywga2V5LCBub3ddKVxyXG4gICAgbmV4dFJlcGVhdFRpbWVba2V5XSA9IG5vdyArIGluaXRpYWxEZWxheVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgb25LZXl1cCA9IChrZXk6IHN0cmluZywgbm93OiBudW1iZXIpID0+IHtcclxuICAgIGlzRG93bltrZXldID0gZmFsc2VcclxuICAgIGV2ZW50cy5wdXNoKFsnZW5kJywga2V5LCBub3ddKVxyXG4gICAgbmV4dFJlcGVhdFRpbWVba2V5XSA9IG51bGxcclxuICB9XHJcblxyXG4gIGNvbnN0IHBvbGwgPSAobm93OiBudW1iZXIpOiBFdmVudERhdGFbXSA9PiB7XHJcbiAgICBjb25zdCBvdXQgPSBldmVudHMuc2xpY2UoKVxyXG5cclxuICAgIGV2ZW50cyA9IFtdXHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gbmV4dFJlcGVhdFRpbWUpIHtcclxuICAgICAgbGV0IG5leHRUaW1lID0gbmV4dFJlcGVhdFRpbWVba2V5XVxyXG5cclxuICAgICAgaWYgKCFuZXh0VGltZSkgY29udGludWVcclxuXHJcbiAgICAgIGxldCB0aW1lID0gbm93IC0gbmV4dFRpbWVcclxuXHJcbiAgICAgIGlmICh0aW1lIDwgMCkgY29udGludWVcclxuXHJcbiAgICAgIG91dC5wdXNoKFsncmVwZWF0Jywga2V5LCBuZXh0VGltZV0pXHJcblxyXG4gICAgICB3aGlsZSggdGltZSA+IHJlcGVhdERlbGF5ICkge1xyXG4gICAgICAgIG5leHRUaW1lICs9IHJlcGVhdERlbGF5XHJcbiAgICAgICAgdGltZSAtPSByZXBlYXREZWxheVxyXG4gICAgICAgIG91dC5wdXNoKFsncmVwZWF0Jywga2V5LCBuZXh0VGltZV0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb3V0XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgb25LZXlkb3duLCBvbktleXVwLCBwb2xsXHJcbiAgfVxyXG59XHJcbiJdfQ==