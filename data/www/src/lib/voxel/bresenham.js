export const bres3 = (x1, y1, z1, x2, y2, z2) => {
    x1 |= 0;
    y1 |= 0;
    z1 |= 0;
    x2 |= 0;
    y2 |= 0;
    z2 |= 0;
    const pts = [];
    pts.push([x1, y1, z1]);
    const dx = Math.abs(x2 - x1);
    const dy = Math.abs(y2 - y1);
    const dz = Math.abs(z2 - z1);
    const sx = x2 > x1 ? 1 : -1;
    const sy = y2 > y1 ? 1 : -1;
    const sz = z2 > z1 ? 1 : -1;
    // driving axis is x
    if (dx >= dy && dx >= dz) {
        let p1 = 2 * dy - dx;
        let p2 = 2 * dz - dx;
        while (x1 != x2) {
            x1 += sx;
            if (p1 >= 0) {
                y1 += sy;
                p1 -= 2 * dx;
            }
            if (p2 >= 0) {
                z1 += sz;
                p2 -= 2 * dx;
            }
            p1 += 2 * dy;
            p2 += 2 * dz;
            pts.push([x1, y1, z1]);
        }
        // driving axis is y
    }
    else if (dy >= dx && dy >= dz) {
        let p1 = 2 * dx - dy;
        let p2 = 2 * dz - dy;
        while (y1 != y2) {
            y1 += sy;
            if (p1 >= 0) {
                x1 += sx;
                p1 -= 2 * dy;
            }
            if (p2 >= 0) {
                z1 += sz;
                p2 -= 2 * dy;
            }
            p1 += 2 * dx;
            p2 += 2 * dz;
            pts.push([x1, y1, z1]);
        }
        // driving axis is z
    }
    else {
        let p1 = 2 * dy - dz;
        let p2 = 2 * dx - dz;
        while (z1 != z2) {
            z1 += sz;
            if (p1 >= 0) {
                y1 += sy;
                p1 -= 2 * dz;
            }
            if (p2 >= 0) {
                x1 += sx;
                p2 -= 2 * dz;
            }
            p1 += 2 * dy;
            p2 += 2 * dx;
            pts.push([x1, y1, z1]);
        }
    }
    return pts;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlc2VuaGFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi92b3hlbC9icmVzZW5oYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQ25CLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUNoRSxFQUFFO0lBQ1IsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNQLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDUCxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ1AsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNQLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDUCxFQUFFLElBQUksQ0FBQyxDQUFBO0lBRVAsTUFBTSxHQUFHLEdBQVMsRUFBRSxDQUFBO0lBRXBCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFdEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDNUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDNUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFFNUIsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMzQixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzNCLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxD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Q0FBQztJQUNILENBQUM7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFQzIH0gZnJvbSAnLi4vdHlwZXMuanMnXG5cbmV4cG9ydCBjb25zdCBicmVzMyA9IChcbiAgeDE6IG51bWJlciwgeTE6IG51bWJlciwgejE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgejI6IG51bWJlclxuKTogVDNbXSA9PiB7XG4gIHgxIHw9IDBcbiAgeTEgfD0gMFxuICB6MSB8PSAwXG4gIHgyIHw9IDBcbiAgeTIgfD0gMFxuICB6MiB8PSAwXG5cbiAgY29uc3QgcHRzOiBUM1tdID0gW11cblxuICBwdHMucHVzaChbeDEsIHkxLCB6MV0pXG5cbiAgY29uc3QgZHggPSBNYXRoLmFicyh4MiAtIHgxKVxuICBjb25zdCBkeSA9IE1hdGguYWJzKHkyIC0geTEpXG4gIGNvbnN0IGR6ID0gTWF0aC5hYnMoejIgLSB6MSlcblxuICBjb25zdCBzeCA9IHgyID4geDEgPyAxIDogLTFcbiAgY29uc3Qgc3kgPSB5MiA+IHkxID8gMSA6IC0xXG4gIGNvbnN0IHN6ID0gejIgPiB6MSA/IDEgOiAtMVxuXG4gIC8vIGRyaXZpbmcgYXhpcyBpcyB4XG4gIGlmIChkeCA+PSBkeSAmJiBkeCA+PSBkeikge1xuICAgIGxldCBwMSA9IDIgKiBkeSAtIGR4XG4gICAgbGV0IHAyID0gMiAqIGR6IC0gZHhcblxuICAgIHdoaWxlICh4MSAhPSB4Mikge1xuICAgICAgeDEgKz0gc3hcbiAgICAgIGlmIChwMSA+PSAwKSB7XG4gICAgICAgIHkxICs9IHN5XG4gICAgICAgIHAxIC09IDIgKiBkeFxuICAgICAgfVxuICAgICAgaWYgKHAyID49IDApIHtcbiAgICAgICAgejEgKz0gc3pcbiAgICAgICAgcDIgLT0gMiAqIGR4XG4gICAgICB9XG4gICAgICBwMSArPSAyICogZHlcbiAgICAgIHAyICs9IDIgKiBkelxuICAgICAgcHRzLnB1c2goW3gxLCB5MSwgejFdKVxuICAgIH1cblxuICAgIC8vIGRyaXZpbmcgYXhpcyBpcyB5XG4gIH0gZWxzZSBpZiAoZHkgPj0gZHggJiYgZHkgPj0gZHopIHtcbiAgICBsZXQgcDEgPSAyICogZHggLSBkeVxuICAgIGxldCBwMiA9IDIgKiBkeiAtIGR5XG4gICAgd2hpbGUgKHkxICE9IHkyKSB7XG4gICAgICB5MSArPSBzeVxuICAgICAgaWYgKHAxID49IDApIHtcbiAgICAgICAgeDEgKz0gc3hcbiAgICAgICAgcDEgLT0gMiAqIGR5XG4gICAgICB9XG4gICAgICBpZiAocDIgPj0gMCkge1xuICAgICAgICB6MSArPSBzelxuICAgICAgICBwMiAtPSAyICogZHlcbiAgICAgIH1cbiAgICAgIHAxICs9IDIgKiBkeFxuICAgICAgcDIgKz0gMiAqIGR6XG4gICAgICBwdHMucHVzaChbeDEsIHkxLCB6MV0pXG4gICAgfVxuXG4gICAgLy8gZHJpdmluZyBheGlzIGlzIHpcbiAgfSBlbHNlIHtcbiAgICBsZXQgcDEgPSAyICogZHkgLSBkelxuICAgIGxldCBwMiA9IDIgKiBkeCAtIGR6XG4gICAgd2hpbGUgKHoxICE9IHoyKSB7XG4gICAgICB6MSArPSBzelxuICAgICAgaWYgKHAxID49IDApIHtcbiAgICAgICAgeTEgKz0gc3lcbiAgICAgICAgcDEgLT0gMiAqIGR6XG4gICAgICB9XG4gICAgICBpZiAocDIgPj0gMCkge1xuICAgICAgICB4MSArPSBzeFxuICAgICAgICBwMiAtPSAyICogZHpcbiAgICAgIH1cbiAgICAgIHAxICs9IDIgKiBkeVxuICAgICAgcDIgKz0gMiAqIGR4XG4gICAgICBwdHMucHVzaChbeDEsIHkxLCB6MV0pXG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gcHRzXG59Il19