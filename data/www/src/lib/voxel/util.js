export const voxSort = (a, b) => {
    // sort on z - bigger is further away
    const zDelta = b[2] - a[2];
    if (zDelta !== 0) {
        return zDelta;
    }
    // tie break on y - we want to sort smaller y first
    // so that the "tops" of voxels overlay correctly
    return a[1] - b[1];
};
// this leaves y unscaled, eg it is still bottom to top rather than top to bottom
export const project2 = (x, y, z) => [x, y + z];
const B_X = 0;
const B_Y = 1;
const B_Z = 2;
const B_W = 3;
const B_H = 4;
const B_D = 5;
export const voxInBounds = (voxels, bounds) => voxels.filter(([vx, vy, vz]) => (vx >= bounds[B_X] && vx < bounds[B_X] + bounds[B_W] &&
    vy >= bounds[B_Y] && vy < bounds[B_Y] + bounds[B_H] &&
    vz >= bounds[B_Z] && vz < bounds[B_Z] + bounds[B_D]));
export const translateVox = (voxels, dx, dy, dz) => voxels.map(([vx, vy, vz, vt, vf]) => [vx + dx, vy + dy, vz + dz, vt, vf]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvdm94ZWwvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFNLEVBQUUsQ0FBTSxFQUFFLEVBQUU7SUFDeEMscUNBQXFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFMUIsSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDakIsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDO0lBRUQsbURBQW1EO0lBQ25ELGlEQUFpRDtJQUNqRCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDcEIsQ0FBQyxDQUFBO0FBRUQsaUZBQWlGO0FBQ2pGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFFM0UsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBRWIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBYSxFQUFFLE1BQVUsRUFBRSxFQUFFLENBQ3ZELE1BQU0sQ0FBQyxNQUFNLENBQ1gsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ2hCLEVBQUUsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ25ELEVBQUUsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ25ELEVBQUUsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQ3BELENBQ0YsQ0FBQTtBQUVILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFFLE1BQWEsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRyxFQUFFLENBQ2xGLE1BQU0sQ0FBQyxHQUFHLENBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFRLENBQ3JFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUMiwgVDYgfSBmcm9tICcuLi90eXBlcy5qcydcbmltcG9ydCB7IFZveCB9IGZyb20gJy4vdHlwZXMuanMnXG5cbmV4cG9ydCBjb25zdCB2b3hTb3J0ID0gKGE6IFZveCwgYjogVm94KSA9PiB7XG4gIC8vIHNvcnQgb24geiAtIGJpZ2dlciBpcyBmdXJ0aGVyIGF3YXlcbiAgY29uc3QgekRlbHRhID0gYlsyXSAtIGFbMl1cblxuICBpZiAoekRlbHRhICE9PSAwKSB7XG4gICAgcmV0dXJuIHpEZWx0YVxuICB9XG5cbiAgLy8gdGllIGJyZWFrIG9uIHkgLSB3ZSB3YW50IHRvIHNvcnQgc21hbGxlciB5IGZpcnN0XG4gIC8vIHNvIHRoYXQgdGhlIFwidG9wc1wiIG9mIHZveGVscyBvdmVybGF5IGNvcnJlY3RseVxuICByZXR1cm4gYVsxXSAtIGJbMV1cbn1cblxuLy8gdGhpcyBsZWF2ZXMgeSB1bnNjYWxlZCwgZWcgaXQgaXMgc3RpbGwgYm90dG9tIHRvIHRvcCByYXRoZXIgdGhhbiB0b3AgdG8gYm90dG9tXG5leHBvcnQgY29uc3QgcHJvamVjdDIgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IFQyID0+IFt4LCB5ICsgel1cblxuY29uc3QgQl9YID0gMFxuY29uc3QgQl9ZID0gMVxuY29uc3QgQl9aID0gMlxuY29uc3QgQl9XID0gM1xuY29uc3QgQl9IID0gNFxuY29uc3QgQl9EID0gNVxuXG5leHBvcnQgY29uc3Qgdm94SW5Cb3VuZHMgPSAodm94ZWxzOiBWb3hbXSwgYm91bmRzOiBUNikgPT5cbiAgdm94ZWxzLmZpbHRlcihcbiAgICAoW3Z4LCB2eSwgdnpdKSA9PiAoXG4gICAgICB2eCA+PSBib3VuZHNbQl9YXSAmJiB2eCA8IGJvdW5kc1tCX1hdICsgYm91bmRzW0JfV10gJiZcbiAgICAgIHZ5ID49IGJvdW5kc1tCX1ldICYmIHZ5IDwgYm91bmRzW0JfWV0gKyBib3VuZHNbQl9IXSAmJlxuICAgICAgdnogPj0gYm91bmRzW0JfWl0gJiYgdnogPCBib3VuZHNbQl9aXSArIGJvdW5kc1tCX0RdXG4gICAgKVxuICApXG5cbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVWb3ggPSAoIHZveGVsczogVm94W10sIGR4OiBudW1iZXIsIGR5OiBudW1iZXIsIGR6OiBudW1iZXIgKSA9PlxuICB2b3hlbHMubWFwKFxuICAgIChbdngsIHZ5LCB2eiwgdnQsIHZmXSkgPT4gW3Z4ICsgZHgsIHZ5ICsgZHksIHZ6ICsgZHosIHZ0LCB2Zl0gYXMgVm94XG4gICkiXX0=