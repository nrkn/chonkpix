export const voxSort = (a, b) => {
    // sort on z - bigger is further away
    const zDelta = b[2] - a[2];
    if (zDelta !== 0) {
        return zDelta;
    }
    // tie break on y - we want to sort smaller y first
    // so that the "tops" of voxels overlay correctly
    return a[1] - b[1];
};
// this leaves y unscaled, eg it is still bottom to top rather than top to bottom
export const project2 = (x, y, z) => [x, y + z];
const B_X = 0;
const B_Y = 1;
const B_Z = 2;
const B_W = 3;
const B_H = 4;
const B_D = 5;
export const voxInBounds = (voxels, bounds) => voxels.filter(([vx, vy, vz]) => (vx >= bounds[B_X] && vx < bounds[B_X] + bounds[B_W] &&
    vy >= bounds[B_Y] && vy < bounds[B_Y] + bounds[B_H] &&
    vz >= bounds[B_Z] && vz < bounds[B_Z] + bounds[B_D]));
export const translateVox = (voxels, dx, dy, dz) => voxels.map(([vx, vy, vz, vt, vf]) => [vx + dx, vy + dy, vz + dz, vt, vf]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvdm94ZWwvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFNLEVBQUUsQ0FBTSxFQUFFLEVBQUU7SUFDeEMscUNBQXFDO0lBQ3JDLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFMUIsSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDakIsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDO0lBRUQsbURBQW1EO0lBQ25ELGlEQUFpRDtJQUNqRCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDcEIsQ0FBQyxDQUFBO0FBRUQsaUZBQWlGO0FBQ2pGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFFM0UsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBQ2IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO0FBRWIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBYSxFQUFFLE1BQVUsRUFBRSxFQUFFLENBQ3ZELE1BQU0sQ0FBQyxNQUFNLENBQ1gsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ2hCLEVBQUUsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ25ELEVBQUUsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ25ELEVBQUUsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQ3BELENBQ0YsQ0FBQTtBQUVILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFFLE1BQWEsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRyxFQUFFLENBQ2xGLE1BQU0sQ0FBQyxHQUFHLENBQ1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFRLENBQ3JFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUMiwgVDYgfSBmcm9tICcuLi90eXBlcy5qcydcclxuaW1wb3J0IHsgVm94IH0gZnJvbSAnLi90eXBlcy5qcydcclxuXHJcbmV4cG9ydCBjb25zdCB2b3hTb3J0ID0gKGE6IFZveCwgYjogVm94KSA9PiB7XHJcbiAgLy8gc29ydCBvbiB6IC0gYmlnZ2VyIGlzIGZ1cnRoZXIgYXdheVxyXG4gIGNvbnN0IHpEZWx0YSA9IGJbMl0gLSBhWzJdXHJcblxyXG4gIGlmICh6RGVsdGEgIT09IDApIHtcclxuICAgIHJldHVybiB6RGVsdGFcclxuICB9XHJcblxyXG4gIC8vIHRpZSBicmVhayBvbiB5IC0gd2Ugd2FudCB0byBzb3J0IHNtYWxsZXIgeSBmaXJzdFxyXG4gIC8vIHNvIHRoYXQgdGhlIFwidG9wc1wiIG9mIHZveGVscyBvdmVybGF5IGNvcnJlY3RseVxyXG4gIHJldHVybiBhWzFdIC0gYlsxXVxyXG59XHJcblxyXG4vLyB0aGlzIGxlYXZlcyB5IHVuc2NhbGVkLCBlZyBpdCBpcyBzdGlsbCBib3R0b20gdG8gdG9wIHJhdGhlciB0aGFuIHRvcCB0byBib3R0b21cclxuZXhwb3J0IGNvbnN0IHByb2plY3QyID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBUMiA9PiBbeCwgeSArIHpdXHJcblxyXG5jb25zdCBCX1ggPSAwXHJcbmNvbnN0IEJfWSA9IDFcclxuY29uc3QgQl9aID0gMlxyXG5jb25zdCBCX1cgPSAzXHJcbmNvbnN0IEJfSCA9IDRcclxuY29uc3QgQl9EID0gNVxyXG5cclxuZXhwb3J0IGNvbnN0IHZveEluQm91bmRzID0gKHZveGVsczogVm94W10sIGJvdW5kczogVDYpID0+XHJcbiAgdm94ZWxzLmZpbHRlcihcclxuICAgIChbdngsIHZ5LCB2el0pID0+IChcclxuICAgICAgdnggPj0gYm91bmRzW0JfWF0gJiYgdnggPCBib3VuZHNbQl9YXSArIGJvdW5kc1tCX1ddICYmXHJcbiAgICAgIHZ5ID49IGJvdW5kc1tCX1ldICYmIHZ5IDwgYm91bmRzW0JfWV0gKyBib3VuZHNbQl9IXSAmJlxyXG4gICAgICB2eiA+PSBib3VuZHNbQl9aXSAmJiB2eiA8IGJvdW5kc1tCX1pdICsgYm91bmRzW0JfRF1cclxuICAgIClcclxuICApXHJcblxyXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlVm94ID0gKCB2b3hlbHM6IFZveFtdLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyLCBkejogbnVtYmVyICkgPT5cclxuICB2b3hlbHMubWFwKFxyXG4gICAgKFt2eCwgdnksIHZ6LCB2dCwgdmZdKSA9PiBbdnggKyBkeCwgdnkgKyBkeSwgdnogKyBkeiwgdnQsIHZmXSBhcyBWb3hcclxuICApIl19