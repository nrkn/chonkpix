import { V_FRONT, V_TOP, V_X, V_Y, V_Z } from './const.js';
// painters algorithm - uses overdraw
//
// pretty fast! could be some room for improvement?
// eg should we precalculate voxels that are oob during sort phase and filter 
// them out? then we can skip two `if` checks per voxel
export const blitVoxels = (imageData, 
// assumed to be already sorted by z then y
voxels) => {
    const view = new Uint32Array(imageData.data.buffer);
    for (let i = 0; i < voxels.length; i++) {
        const vox = voxels[i];
        if (vox[V_X] < 0 || vox[V_X] >= imageData.width)
            continue;
        const dyTop = imageData.height - 1 - (vox[V_Y] + vox[V_Z]);
        if (dyTop >= 0 && dyTop < imageData.height) {
            const topIndex = dyTop * imageData.width + vox[V_X];
            view[topIndex] = vox[V_TOP];
        }
        const dyFront = dyTop + 1;
        if (dyFront >= 0 && dyFront < imageData.height) {
            const frontIndex = dyFront * imageData.width + vox[V_X];
            view[frontIndex] = vox[V_FRONT];
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxpdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvdm94ZWwvYmxpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUcxRCxxQ0FBcUM7QUFDckMsRUFBRTtBQUNGLG1EQUFtRDtBQUNuRCw4RUFBOEU7QUFDOUUsdURBQXVEO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUN4QixTQUFvQjtBQUNwQiwyQ0FBMkM7QUFDM0MsTUFBYSxFQUNiLEVBQUU7SUFDRixNQUFNLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRW5ELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDdkMsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXJCLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLEtBQUs7WUFBRSxTQUFRO1FBRXpELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBRTFELElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzNDLE1BQU0sUUFBUSxHQUFHLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUVuRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzdCLENBQUM7UUFFRCxNQUFNLE9BQU8sR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFBO1FBRXpCLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQy9DLE1BQU0sVUFBVSxHQUFHLE9BQU8sR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUV2RCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2pDLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVl9GUk9OVCwgVl9UT1AsIFZfWCwgVl9ZLCBWX1ogfSBmcm9tICcuL2NvbnN0LmpzJ1xyXG5pbXBvcnQgeyBWb3ggfSBmcm9tICcuL3R5cGVzLmpzJ1xyXG5cclxuLy8gcGFpbnRlcnMgYWxnb3JpdGhtIC0gdXNlcyBvdmVyZHJhd1xyXG4vL1xyXG4vLyBwcmV0dHkgZmFzdCEgY291bGQgYmUgc29tZSByb29tIGZvciBpbXByb3ZlbWVudD9cclxuLy8gZWcgc2hvdWxkIHdlIHByZWNhbGN1bGF0ZSB2b3hlbHMgdGhhdCBhcmUgb29iIGR1cmluZyBzb3J0IHBoYXNlIGFuZCBmaWx0ZXIgXHJcbi8vIHRoZW0gb3V0PyB0aGVuIHdlIGNhbiBza2lwIHR3byBgaWZgIGNoZWNrcyBwZXIgdm94ZWxcclxuZXhwb3J0IGNvbnN0IGJsaXRWb3hlbHMgPSAoXHJcbiAgaW1hZ2VEYXRhOiBJbWFnZURhdGEsXHJcbiAgLy8gYXNzdW1lZCB0byBiZSBhbHJlYWR5IHNvcnRlZCBieSB6IHRoZW4geVxyXG4gIHZveGVsczogVm94W11cclxuKSA9PiB7XHJcbiAgY29uc3QgdmlldyA9IG5ldyBVaW50MzJBcnJheShpbWFnZURhdGEuZGF0YS5idWZmZXIpXHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdm94ZWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCB2b3ggPSB2b3hlbHNbaV1cclxuXHJcbiAgICBpZiAodm94W1ZfWF0gPCAwIHx8IHZveFtWX1hdID49IGltYWdlRGF0YS53aWR0aCkgY29udGludWVcclxuXHJcbiAgICBjb25zdCBkeVRvcCA9IGltYWdlRGF0YS5oZWlnaHQgLSAxIC0gKHZveFtWX1ldICsgdm94W1ZfWl0pXHJcblxyXG4gICAgaWYgKGR5VG9wID49IDAgJiYgZHlUb3AgPCBpbWFnZURhdGEuaGVpZ2h0KSB7XHJcbiAgICAgIGNvbnN0IHRvcEluZGV4ID0gZHlUb3AgKiBpbWFnZURhdGEud2lkdGggKyB2b3hbVl9YXVxyXG5cclxuICAgICAgdmlld1t0b3BJbmRleF0gPSB2b3hbVl9UT1BdXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZHlGcm9udCA9IGR5VG9wICsgMVxyXG5cclxuICAgIGlmIChkeUZyb250ID49IDAgJiYgZHlGcm9udCA8IGltYWdlRGF0YS5oZWlnaHQpIHtcclxuICAgICAgY29uc3QgZnJvbnRJbmRleCA9IGR5RnJvbnQgKiBpbWFnZURhdGEud2lkdGggKyB2b3hbVl9YXVxyXG5cclxuICAgICAgdmlld1tmcm9udEluZGV4XSA9IHZveFtWX0ZST05UXVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=