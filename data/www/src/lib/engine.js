import { createImage } from './image/create.js';
import { wait } from './util.js';
// chonkpix
// a stupidly simple chonky pixel engine
// private state:
let currentScene;
// misc 
let running = false;
let rafId;
// io
const keys = {};
let keyPresses = [];
let viewMouseX = 0;
let viewMouseY = 0;
let useSystemMouse = true;
let cursorInBounds = true;
let frameMouseX = 0;
let frameMouseY = 0;
let mouseWheelDelta = 0;
const mouseButtons = {};
// sound
// todo - plug in a small sound library like ZzFX or similar
// time
let startTime = null;
let lastTime;
let elapsed;
let frameTime;
// view
const minZoom = 2;
const maxZoom = 16;
let zoom = 5;
let frameW;
let frameH;
let frameBuffer;
let frameCanvas;
let frameCtx;
// public state
const state = {
    // expose keys directly, that way the consumer can make decisions like
    // clearing the key state after reading etc
    getKeys: () => keys,
    getKeyPresses: () => keyPresses,
    mouse: {
        getButtons: () => mouseButtons,
        getX: () => frameMouseX,
        getY: () => frameMouseY,
        takeWheel: () => {
            // destructive read
            // otherwise the delta is retained from frame to frame
            // we could have made it so the consumer can explicitly clear it after use
            // or choose to use it, but we have no use case for
            const value = mouseWheelDelta;
            mouseWheelDelta = 0;
            return value;
        },
        isInBounds: () => cursorInBounds
    },
    time: {
        getElapsed: () => elapsed,
        getFrameTime: () => frameTime
    },
    view: {
        getZoom: () => zoom,
        setZoom: (value) => {
            zoom = Math.max(minZoom, Math.min(maxZoom, value));
            resize();
        },
        getBuffer: () => frameBuffer
    },
    getRunning: () => running,
    setRunning: (value) => {
        running = value;
    }
};
// event handlers:
const preventDefaults = new Set(['Tab']);
const keyDown = (event) => {
    keys[event.key] = true;
    keyPresses.push(event.key);
    if (preventDefaults.has(event.key)) {
        event.preventDefault();
        return false;
    }
};
const keyUp = (event) => {
    keys[event.key] = false;
    // any others in future
    // 
    if (preventDefaults.has(event.key)) {
        event.preventDefault();
        return false;
    }
};
const mouseMove = (event) => {
    viewMouseX = event.clientX;
    viewMouseY = event.clientY;
    frameMouseX = Math.floor(viewMouseX / zoom);
    frameMouseY = Math.floor(viewMouseY / zoom);
};
const mouseWheel = (event) => {
    mouseWheelDelta = event.deltaY;
    if (!useSystemMouse) {
        event.preventDefault();
        return false;
    }
};
const mouseButtonDown = (event) => {
    mouseButtons[event.button] = true;
    if (!useSystemMouse) {
        event.preventDefault();
        return false;
    }
};
const mouseButtonUp = (event) => {
    mouseButtons[event.button] = false;
    if (!useSystemMouse) {
        event.preventDefault();
        return false;
    }
};
const preventContextDefault = (event) => {
    if (!useSystemMouse) {
        event.preventDefault();
        return false;
    }
};
const mouseLeave = () => {
    cursorInBounds = false;
};
const mouseEnter = () => {
    cursorInBounds = true;
};
const resize = () => {
    frameW = Math.floor(innerWidth / zoom);
    frameH = Math.floor(innerHeight / zoom);
    frameBuffer = createImage(frameW, frameH);
    frameCanvas.width = frameW;
    frameCanvas.height = frameH;
};
// mouse control:
export const releaseMouse = () => {
    useSystemMouse = true;
    frameCanvas.classList.toggle('hide-cursor', false);
};
export const takeMouse = () => {
    useSystemMouse = false;
    frameCanvas.classList.toggle('hide-cursor', true);
};
// hard render
// in case you want to display something immediately, eg if you have a long
// running init and want to show progress or etc
export const render = async () => {
    frameCtx.putImageData(frameBuffer, 0, 0);
    // we still have to let the event loop run or it won't show anything
    await wait();
};
// runner:
// initialise the engine with a scene
export const start = async (scene) => {
    // if it already has a scene, halt it first
    if (currentScene)
        halt();
    currentScene = scene;
    if (frameCanvas)
        frameCanvas.remove();
    frameCanvas = document.createElement('canvas');
    frameCanvas.id = 'viewport';
    frameCanvas.tabIndex = 0;
    document.body.append(frameCanvas);
    frameCanvas.focus();
    frameCtx = frameCanvas.getContext('2d');
    resize();
    addEventListener('resize', resize);
    frameCanvas.addEventListener('keydown', keyDown);
    frameCanvas.addEventListener('keyup', keyUp);
    frameCanvas.addEventListener('mousemove', mouseMove);
    frameCanvas.addEventListener('wheel', mouseWheel);
    frameCanvas.addEventListener('mousedown', mouseButtonDown);
    frameCanvas.addEventListener('mouseup', mouseButtonUp);
    frameCanvas.addEventListener('contextmenu', preventContextDefault);
    frameCanvas.addEventListener('mouseleave', mouseLeave);
    frameCanvas.addEventListener('mouseenter', mouseEnter);
    running = true;
    await scene.init(state);
    rafId = requestAnimationFrame(tick);
};
// tidy everything up
const halt = () => {
    running = false;
    cancelAnimationFrame(rafId);
    removeEventListener('resize', resize);
    frameCanvas.removeEventListener('keydown', keyDown);
    frameCanvas.removeEventListener('keyup', keyUp);
    frameCanvas.removeEventListener('mousemove', mouseMove);
    frameCanvas.removeEventListener('wheel', mouseWheel);
    frameCanvas.removeEventListener('mousedown', mouseButtonDown);
    frameCanvas.removeEventListener('mouseup', mouseButtonUp);
    frameCanvas.removeEventListener('contextmenu', preventContextDefault);
    frameCanvas.removeEventListener('mouseleave', mouseLeave);
    frameCanvas.removeEventListener('mouseenter', mouseEnter);
    frameCanvas.remove();
    startTime = null;
    releaseMouse();
    if (currentScene) {
        currentScene.quit(state).catch(console.error);
        currentScene = null;
    }
};
const initTick = (time) => {
    if (startTime !== null)
        return startTime;
    // first tick
    startTime = time;
    elapsed = 0;
    frameTime = 0;
    lastTime = time;
    return startTime;
};
const tick = (time) => {
    if (!running)
        return;
    startTime = initTick(time);
    elapsed = time - startTime;
    frameTime = time - lastTime;
    lastTime = time;
    if (currentScene)
        currentScene.update(state);
    // scene may have sent a quit signal
    if (!running) {
        halt();
        return;
    }
    // render
    frameCtx.putImageData(frameBuffer, 0, 0);
    //
    rafId = requestAnimationFrame(tick);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9lbmdpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRS9DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFFaEMsV0FBVztBQUNYLHdDQUF3QztBQUV4QyxpQkFBaUI7QUFFakIsSUFBSSxZQUEwQixDQUFBO0FBRTlCLFFBQVE7QUFFUixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUE7QUFDbkIsSUFBSSxLQUFhLENBQUE7QUFFakIsS0FBSztBQUVMLE1BQU0sSUFBSSxHQUE0QixFQUFFLENBQUE7QUFDeEMsSUFBSSxVQUFVLEdBQWEsRUFBRSxDQUFBO0FBRTdCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQTtBQUNsQixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUE7QUFFbEIsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFBO0FBQ3pCLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQTtBQUN6QixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUE7QUFDbkIsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFBO0FBRW5CLElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQTtBQUV2QixNQUFNLFlBQVksR0FBNEIsRUFBRSxDQUFBO0FBRWhELFFBQVE7QUFDUiw0REFBNEQ7QUFFNUQsT0FBTztBQUVQLElBQUksU0FBUyxHQUFrQixJQUFJLENBQUE7QUFDbkMsSUFBSSxRQUFnQixDQUFBO0FBQ3BCLElBQUksT0FBZSxDQUFBO0FBQ25CLElBQUksU0FBaUIsQ0FBQTtBQUVyQixPQUFPO0FBRVAsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0FBQ2pCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQTtBQUVsQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUE7QUFFWixJQUFJLE1BQWMsQ0FBQTtBQUNsQixJQUFJLE1BQWMsQ0FBQTtBQUNsQixJQUFJLFdBQXNCLENBQUE7QUFDMUIsSUFBSSxXQUE4QixDQUFBO0FBQ2xDLElBQUksUUFBa0MsQ0FBQTtBQUV0QyxlQUFlO0FBRWYsTUFBTSxLQUFLLEdBQVU7SUFDbkIsc0VBQXNFO0lBQ3RFLDJDQUEyQztJQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSTtJQUNuQixhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVTtJQUUvQixLQUFLLEVBQUU7UUFDTCxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWTtRQUM5QixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVztRQUN2QixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVztRQUN2QixTQUFTLEVBQUUsR0FBRyxFQUFFO1lBQ2QsbUJBQW1CO1lBQ25CLHNEQUFzRDtZQUN0RCwwRUFBMEU7WUFDMUUsbURBQW1EO1lBQ25ELE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQTtZQUU3QixlQUFlLEdBQUcsQ0FBQyxDQUFBO1lBRW5CLE9BQU8sS0FBSyxDQUFBO1FBQ2QsQ0FBQztRQUNELFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxjQUFjO0tBQ2pDO0lBRUQsSUFBSSxFQUFFO1FBQ0osVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU87UUFDekIsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVM7S0FDOUI7SUFFRCxJQUFJLEVBQUU7UUFDSixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSTtRQUNuQixPQUFPLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRTtZQUN6QixJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUNsRCxNQUFNLEVBQUUsQ0FBQTtRQUNWLENBQUM7UUFDRCxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVztLQUM3QjtJQUVELFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPO0lBQ3pCLFVBQVUsRUFBRSxDQUFDLEtBQWMsRUFBRSxFQUFFO1FBQzdCLE9BQU8sR0FBRyxLQUFLLENBQUE7SUFDakIsQ0FBQztDQUNGLENBQUE7QUFFRCxrQkFBa0I7QUFFbEIsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLENBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBRWhELE1BQU0sT0FBTyxHQUFHLENBQUMsS0FBb0IsRUFBRSxFQUFFO0lBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFBO0lBQ3RCLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRTFCLElBQUksZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNuQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUE7UUFFdEIsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFvQixFQUFFLEVBQUU7SUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUE7SUFFdkIsdUJBQXVCO0lBRXZCLEdBQUc7SUFFSCxJQUFJLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDbkMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBRXRCLE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO0lBQ3RDLFVBQVUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBO0lBQzFCLFVBQVUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBO0lBRTFCLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUMzQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUE7QUFDN0MsQ0FBQyxDQUFBO0FBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUU7SUFDdkMsZUFBZSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7SUFFOUIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3BCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUV0QixPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUM7QUFDSCxDQUFDLENBQUE7QUFFRCxNQUFNLGVBQWUsR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtJQUM1QyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQTtJQUVqQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDcEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFBO1FBRXRCLE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO0lBQzFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFBO0lBRWxDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNwQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUE7UUFFdEIsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0lBQzdDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNwQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUE7UUFFdEIsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO0lBQ3RCLGNBQWMsR0FBRyxLQUFLLENBQUE7QUFDeEIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO0lBQ3RCLGNBQWMsR0FBRyxJQUFJLENBQUE7QUFDdkIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFO0lBQ2xCLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUN0QyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFFdkMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFekMsV0FBVyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUE7SUFDMUIsV0FBVyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7QUFDN0IsQ0FBQyxDQUFBO0FBRUQsaUJBQWlCO0FBRWpCLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUU7SUFDL0IsY0FBYyxHQUFHLElBQUksQ0FBQTtJQUNyQixXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDcEQsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRTtJQUM1QixjQUFjLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUNuRCxDQUFDLENBQUE7QUFFRCxjQUFjO0FBQ2QsMkVBQTJFO0FBQzNFLGdEQUFnRDtBQUNoRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDL0IsUUFBUSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRXhDLG9FQUFvRTtJQUNwRSxNQUFNLElBQUksRUFBRSxDQUFBO0FBQ2QsQ0FBQyxDQUFBO0FBRUQsVUFBVTtBQUVWLHFDQUFxQztBQUNyQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQVksRUFBRSxFQUFFO0lBQzFDLDJDQUEyQztJQUMzQyxJQUFJLFlBQVk7UUFBRSxJQUFJLEVBQUUsQ0FBQTtJQUV4QixZQUFZLEdBQUcsS0FBSyxDQUFBO0lBRXBCLElBQUksV0FBVztRQUFFLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUVyQyxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUM5QyxXQUFXLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQTtJQUMzQixXQUFXLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQTtJQUV4QixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUVqQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUE7SUFFbkIsUUFBUSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFFLENBQUE7SUFFeEMsTUFBTSxFQUFFLENBQUE7SUFFUixnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFbEMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNoRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRTVDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDcEQsV0FBVyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUNqRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFBO0lBQzFELFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFDdEQsV0FBVyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO0lBQ2xFLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDdEQsV0FBVyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUV0RCxPQUFPLEdBQUcsSUFBSSxDQUFBO0lBRWQsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXZCLEtBQUssR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNyQyxDQUFDLENBQUE7QUFFRCxxQkFBcUI7QUFDckIsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0lBQ2hCLE9BQU8sR0FBRyxLQUFLLENBQUE7SUFDZixvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUUzQixtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFckMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNuRCxXQUFXLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRS9DLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDdkQsV0FBVyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUNwRCxXQUFXLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFBO0lBQzdELFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFDekQsV0FBVyxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO0lBQ3JFLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDekQsV0FBVyxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUV6RCxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUE7SUFFcEIsU0FBUyxHQUFHLElBQUksQ0FBQTtJQUVoQixZQUFZLEVBQUUsQ0FBQTtJQUVkLElBQUksWUFBWSxFQUFFLENBQUM7UUFDakIsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRTdDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFDckIsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDaEMsSUFBSSxTQUFTLEtBQUssSUFBSTtRQUFFLE9BQU8sU0FBUyxDQUFBO0lBRXhDLGFBQWE7SUFFYixTQUFTLEdBQUcsSUFBSSxDQUFBO0lBRWhCLE9BQU8sR0FBRyxDQUFDLENBQUE7SUFDWCxTQUFTLEdBQUcsQ0FBQyxDQUFBO0lBQ2IsUUFBUSxHQUFHLElBQUksQ0FBQTtJQUVmLE9BQU8sU0FBUyxDQUFBO0FBQ2xCLENBQUMsQ0FBQTtBQUVELE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUU7SUFDNUIsSUFBSSxDQUFDLE9BQU87UUFBRSxPQUFNO0lBRXBCLFNBQVMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDMUIsT0FBTyxHQUFHLElBQUksR0FBRyxTQUFTLENBQUE7SUFDMUIsU0FBUyxHQUFHLElBQUksR0FBRyxRQUFRLENBQUE7SUFDM0IsUUFBUSxHQUFHLElBQUksQ0FBQTtJQUVmLElBQUksWUFBWTtRQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFNUMsb0NBQW9DO0lBQ3BDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNiLElBQUksRUFBRSxDQUFBO1FBRU4sT0FBTTtJQUNSLENBQUM7SUFFRCxTQUFTO0lBRVQsUUFBUSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRXhDLEVBQUU7SUFFRixLQUFLLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDckMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSW1hZ2UgfSBmcm9tICcuL2ltYWdlL2NyZWF0ZS5qcydcclxuaW1wb3J0IHsgTWF5YmUsIFNjZW5lLCBTdGF0ZSB9IGZyb20gJy4vdHlwZXMuanMnXHJcbmltcG9ydCB7IHdhaXQgfSBmcm9tICcuL3V0aWwuanMnXHJcblxyXG4vLyBjaG9ua3BpeFxyXG4vLyBhIHN0dXBpZGx5IHNpbXBsZSBjaG9ua3kgcGl4ZWwgZW5naW5lXHJcblxyXG4vLyBwcml2YXRlIHN0YXRlOlxyXG5cclxubGV0IGN1cnJlbnRTY2VuZTogTWF5YmU8U2NlbmU+XHJcblxyXG4vLyBtaXNjIFxyXG5cclxubGV0IHJ1bm5pbmcgPSBmYWxzZVxyXG5sZXQgcmFmSWQ6IG51bWJlclxyXG5cclxuLy8gaW9cclxuXHJcbmNvbnN0IGtleXM6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+ID0ge31cclxubGV0IGtleVByZXNzZXM6IHN0cmluZ1tdID0gW11cclxuXHJcbmxldCB2aWV3TW91c2VYID0gMFxyXG5sZXQgdmlld01vdXNlWSA9IDBcclxuXHJcbmxldCB1c2VTeXN0ZW1Nb3VzZSA9IHRydWVcclxubGV0IGN1cnNvckluQm91bmRzID0gdHJ1ZVxyXG5sZXQgZnJhbWVNb3VzZVggPSAwXHJcbmxldCBmcmFtZU1vdXNlWSA9IDBcclxuXHJcbmxldCBtb3VzZVdoZWVsRGVsdGEgPSAwXHJcblxyXG5jb25zdCBtb3VzZUJ1dHRvbnM6IFJlY29yZDxudW1iZXIsIGJvb2xlYW4+ID0ge31cclxuXHJcbi8vIHNvdW5kXHJcbi8vIHRvZG8gLSBwbHVnIGluIGEgc21hbGwgc291bmQgbGlicmFyeSBsaWtlIFp6Rlggb3Igc2ltaWxhclxyXG5cclxuLy8gdGltZVxyXG5cclxubGV0IHN0YXJ0VGltZTogbnVtYmVyIHwgbnVsbCA9IG51bGxcclxubGV0IGxhc3RUaW1lOiBudW1iZXJcclxubGV0IGVsYXBzZWQ6IG51bWJlclxyXG5sZXQgZnJhbWVUaW1lOiBudW1iZXJcclxuXHJcbi8vIHZpZXdcclxuXHJcbmNvbnN0IG1pblpvb20gPSAyXHJcbmNvbnN0IG1heFpvb20gPSAxNlxyXG5cclxubGV0IHpvb20gPSA1XHJcblxyXG5sZXQgZnJhbWVXOiBudW1iZXJcclxubGV0IGZyYW1lSDogbnVtYmVyXHJcbmxldCBmcmFtZUJ1ZmZlcjogSW1hZ2VEYXRhXHJcbmxldCBmcmFtZUNhbnZhczogSFRNTENhbnZhc0VsZW1lbnRcclxubGV0IGZyYW1lQ3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkRcclxuXHJcbi8vIHB1YmxpYyBzdGF0ZVxyXG5cclxuY29uc3Qgc3RhdGU6IFN0YXRlID0ge1xyXG4gIC8vIGV4cG9zZSBrZXlzIGRpcmVjdGx5LCB0aGF0IHdheSB0aGUgY29uc3VtZXIgY2FuIG1ha2UgZGVjaXNpb25zIGxpa2VcclxuICAvLyBjbGVhcmluZyB0aGUga2V5IHN0YXRlIGFmdGVyIHJlYWRpbmcgZXRjXHJcbiAgZ2V0S2V5czogKCkgPT4ga2V5cyxcclxuICBnZXRLZXlQcmVzc2VzOiAoKSA9PiBrZXlQcmVzc2VzLFxyXG5cclxuICBtb3VzZToge1xyXG4gICAgZ2V0QnV0dG9uczogKCkgPT4gbW91c2VCdXR0b25zLFxyXG4gICAgZ2V0WDogKCkgPT4gZnJhbWVNb3VzZVgsXHJcbiAgICBnZXRZOiAoKSA9PiBmcmFtZU1vdXNlWSxcclxuICAgIHRha2VXaGVlbDogKCkgPT4ge1xyXG4gICAgICAvLyBkZXN0cnVjdGl2ZSByZWFkXHJcbiAgICAgIC8vIG90aGVyd2lzZSB0aGUgZGVsdGEgaXMgcmV0YWluZWQgZnJvbSBmcmFtZSB0byBmcmFtZVxyXG4gICAgICAvLyB3ZSBjb3VsZCBoYXZlIG1hZGUgaXQgc28gdGhlIGNvbnN1bWVyIGNhbiBleHBsaWNpdGx5IGNsZWFyIGl0IGFmdGVyIHVzZVxyXG4gICAgICAvLyBvciBjaG9vc2UgdG8gdXNlIGl0LCBidXQgd2UgaGF2ZSBubyB1c2UgY2FzZSBmb3JcclxuICAgICAgY29uc3QgdmFsdWUgPSBtb3VzZVdoZWVsRGVsdGFcclxuXHJcbiAgICAgIG1vdXNlV2hlZWxEZWx0YSA9IDBcclxuXHJcbiAgICAgIHJldHVybiB2YWx1ZVxyXG4gICAgfSxcclxuICAgIGlzSW5Cb3VuZHM6ICgpID0+IGN1cnNvckluQm91bmRzXHJcbiAgfSxcclxuXHJcbiAgdGltZToge1xyXG4gICAgZ2V0RWxhcHNlZDogKCkgPT4gZWxhcHNlZCxcclxuICAgIGdldEZyYW1lVGltZTogKCkgPT4gZnJhbWVUaW1lXHJcbiAgfSxcclxuXHJcbiAgdmlldzoge1xyXG4gICAgZ2V0Wm9vbTogKCkgPT4gem9vbSxcclxuICAgIHNldFpvb206ICh2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgIHpvb20gPSBNYXRoLm1heChtaW5ab29tLCBNYXRoLm1pbihtYXhab29tLCB2YWx1ZSkpXHJcbiAgICAgIHJlc2l6ZSgpXHJcbiAgICB9LFxyXG4gICAgZ2V0QnVmZmVyOiAoKSA9PiBmcmFtZUJ1ZmZlclxyXG4gIH0sXHJcblxyXG4gIGdldFJ1bm5pbmc6ICgpID0+IHJ1bm5pbmcsXHJcbiAgc2V0UnVubmluZzogKHZhbHVlOiBib29sZWFuKSA9PiB7XHJcbiAgICBydW5uaW5nID0gdmFsdWVcclxuICB9XHJcbn1cclxuXHJcbi8vIGV2ZW50IGhhbmRsZXJzOlxyXG5cclxuY29uc3QgcHJldmVudERlZmF1bHRzID0gbmV3IFNldDxzdHJpbmc+KFsnVGFiJ10pXHJcblxyXG5jb25zdCBrZXlEb3duID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAga2V5c1tldmVudC5rZXldID0gdHJ1ZVxyXG4gIGtleVByZXNzZXMucHVzaChldmVudC5rZXkpXHJcblxyXG4gIGlmIChwcmV2ZW50RGVmYXVsdHMuaGFzKGV2ZW50LmtleSkpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGtleVVwID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAga2V5c1tldmVudC5rZXldID0gZmFsc2VcclxuXHJcbiAgLy8gYW55IG90aGVycyBpbiBmdXR1cmVcclxuXHJcbiAgLy8gXHJcblxyXG4gIGlmIChwcmV2ZW50RGVmYXVsdHMuaGFzKGV2ZW50LmtleSkpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG1vdXNlTW92ZSA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gIHZpZXdNb3VzZVggPSBldmVudC5jbGllbnRYXHJcbiAgdmlld01vdXNlWSA9IGV2ZW50LmNsaWVudFlcclxuXHJcbiAgZnJhbWVNb3VzZVggPSBNYXRoLmZsb29yKHZpZXdNb3VzZVggLyB6b29tKVxyXG4gIGZyYW1lTW91c2VZID0gTWF0aC5mbG9vcih2aWV3TW91c2VZIC8gem9vbSlcclxufVxyXG5cclxuY29uc3QgbW91c2VXaGVlbCA9IChldmVudDogV2hlZWxFdmVudCkgPT4ge1xyXG4gIG1vdXNlV2hlZWxEZWx0YSA9IGV2ZW50LmRlbHRhWVxyXG5cclxuICBpZiAoIXVzZVN5c3RlbU1vdXNlKSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBtb3VzZUJ1dHRvbkRvd24gPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuICBtb3VzZUJ1dHRvbnNbZXZlbnQuYnV0dG9uXSA9IHRydWVcclxuXHJcbiAgaWYgKCF1c2VTeXN0ZW1Nb3VzZSkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgbW91c2VCdXR0b25VcCA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gIG1vdXNlQnV0dG9uc1tldmVudC5idXR0b25dID0gZmFsc2VcclxuXHJcbiAgaWYgKCF1c2VTeXN0ZW1Nb3VzZSkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgcHJldmVudENvbnRleHREZWZhdWx0ID0gKGV2ZW50OiBFdmVudCkgPT4ge1xyXG4gIGlmICghdXNlU3lzdGVtTW91c2UpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG1vdXNlTGVhdmUgPSAoKSA9PiB7XHJcbiAgY3Vyc29ySW5Cb3VuZHMgPSBmYWxzZVxyXG59XHJcblxyXG5jb25zdCBtb3VzZUVudGVyID0gKCkgPT4ge1xyXG4gIGN1cnNvckluQm91bmRzID0gdHJ1ZVxyXG59XHJcblxyXG5jb25zdCByZXNpemUgPSAoKSA9PiB7XHJcbiAgZnJhbWVXID0gTWF0aC5mbG9vcihpbm5lcldpZHRoIC8gem9vbSlcclxuICBmcmFtZUggPSBNYXRoLmZsb29yKGlubmVySGVpZ2h0IC8gem9vbSlcclxuXHJcbiAgZnJhbWVCdWZmZXIgPSBjcmVhdGVJbWFnZShmcmFtZVcsIGZyYW1lSClcclxuXHJcbiAgZnJhbWVDYW52YXMud2lkdGggPSBmcmFtZVdcclxuICBmcmFtZUNhbnZhcy5oZWlnaHQgPSBmcmFtZUhcclxufVxyXG5cclxuLy8gbW91c2UgY29udHJvbDpcclxuXHJcbmV4cG9ydCBjb25zdCByZWxlYXNlTW91c2UgPSAoKSA9PiB7XHJcbiAgdXNlU3lzdGVtTW91c2UgPSB0cnVlXHJcbiAgZnJhbWVDYW52YXMuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZS1jdXJzb3InLCBmYWxzZSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHRha2VNb3VzZSA9ICgpID0+IHtcclxuICB1c2VTeXN0ZW1Nb3VzZSA9IGZhbHNlXHJcbiAgZnJhbWVDYW52YXMuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZS1jdXJzb3InLCB0cnVlKVxyXG59XHJcblxyXG4vLyBoYXJkIHJlbmRlclxyXG4vLyBpbiBjYXNlIHlvdSB3YW50IHRvIGRpc3BsYXkgc29tZXRoaW5nIGltbWVkaWF0ZWx5LCBlZyBpZiB5b3UgaGF2ZSBhIGxvbmdcclxuLy8gcnVubmluZyBpbml0IGFuZCB3YW50IHRvIHNob3cgcHJvZ3Jlc3Mgb3IgZXRjXHJcbmV4cG9ydCBjb25zdCByZW5kZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgZnJhbWVDdHgucHV0SW1hZ2VEYXRhKGZyYW1lQnVmZmVyLCAwLCAwKVxyXG5cclxuICAvLyB3ZSBzdGlsbCBoYXZlIHRvIGxldCB0aGUgZXZlbnQgbG9vcCBydW4gb3IgaXQgd29uJ3Qgc2hvdyBhbnl0aGluZ1xyXG4gIGF3YWl0IHdhaXQoKVxyXG59XHJcblxyXG4vLyBydW5uZXI6XHJcblxyXG4vLyBpbml0aWFsaXNlIHRoZSBlbmdpbmUgd2l0aCBhIHNjZW5lXHJcbmV4cG9ydCBjb25zdCBzdGFydCA9IGFzeW5jIChzY2VuZTogU2NlbmUpID0+IHtcclxuICAvLyBpZiBpdCBhbHJlYWR5IGhhcyBhIHNjZW5lLCBoYWx0IGl0IGZpcnN0XHJcbiAgaWYgKGN1cnJlbnRTY2VuZSkgaGFsdCgpXHJcblxyXG4gIGN1cnJlbnRTY2VuZSA9IHNjZW5lXHJcblxyXG4gIGlmIChmcmFtZUNhbnZhcykgZnJhbWVDYW52YXMucmVtb3ZlKClcclxuXHJcbiAgZnJhbWVDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxyXG4gIGZyYW1lQ2FudmFzLmlkID0gJ3ZpZXdwb3J0J1xyXG4gIGZyYW1lQ2FudmFzLnRhYkluZGV4ID0gMFxyXG5cclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZChmcmFtZUNhbnZhcylcclxuXHJcbiAgZnJhbWVDYW52YXMuZm9jdXMoKVxyXG5cclxuICBmcmFtZUN0eCA9IGZyYW1lQ2FudmFzLmdldENvbnRleHQoJzJkJykhXHJcblxyXG4gIHJlc2l6ZSgpXHJcblxyXG4gIGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZSlcclxuXHJcbiAgZnJhbWVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleURvd24pXHJcbiAgZnJhbWVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBrZXlVcClcclxuXHJcbiAgZnJhbWVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2VNb3ZlKVxyXG4gIGZyYW1lQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgbW91c2VXaGVlbClcclxuICBmcmFtZUNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZUJ1dHRvbkRvd24pXHJcbiAgZnJhbWVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlQnV0dG9uVXApXHJcbiAgZnJhbWVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBwcmV2ZW50Q29udGV4dERlZmF1bHQpXHJcbiAgZnJhbWVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIG1vdXNlTGVhdmUpXHJcbiAgZnJhbWVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG1vdXNlRW50ZXIpXHJcblxyXG4gIHJ1bm5pbmcgPSB0cnVlXHJcblxyXG4gIGF3YWl0IHNjZW5lLmluaXQoc3RhdGUpXHJcblxyXG4gIHJhZklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spXHJcbn1cclxuXHJcbi8vIHRpZHkgZXZlcnl0aGluZyB1cFxyXG5jb25zdCBoYWx0ID0gKCkgPT4ge1xyXG4gIHJ1bm5pbmcgPSBmYWxzZVxyXG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZklkKVxyXG5cclxuICByZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemUpXHJcblxyXG4gIGZyYW1lQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlEb3duKVxyXG4gIGZyYW1lQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywga2V5VXApXHJcblxyXG4gIGZyYW1lQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZSlcclxuICBmcmFtZUNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIG1vdXNlV2hlZWwpXHJcbiAgZnJhbWVDYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2VCdXR0b25Eb3duKVxyXG4gIGZyYW1lQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZUJ1dHRvblVwKVxyXG4gIGZyYW1lQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgcHJldmVudENvbnRleHREZWZhdWx0KVxyXG4gIGZyYW1lQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBtb3VzZUxlYXZlKVxyXG4gIGZyYW1lQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBtb3VzZUVudGVyKVxyXG5cclxuICBmcmFtZUNhbnZhcy5yZW1vdmUoKVxyXG5cclxuICBzdGFydFRpbWUgPSBudWxsXHJcblxyXG4gIHJlbGVhc2VNb3VzZSgpXHJcblxyXG4gIGlmIChjdXJyZW50U2NlbmUpIHtcclxuICAgIGN1cnJlbnRTY2VuZS5xdWl0KHN0YXRlKS5jYXRjaChjb25zb2xlLmVycm9yKVxyXG5cclxuICAgIGN1cnJlbnRTY2VuZSA9IG51bGxcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGluaXRUaWNrID0gKHRpbWU6IG51bWJlcikgPT4ge1xyXG4gIGlmIChzdGFydFRpbWUgIT09IG51bGwpIHJldHVybiBzdGFydFRpbWVcclxuXHJcbiAgLy8gZmlyc3QgdGlja1xyXG5cclxuICBzdGFydFRpbWUgPSB0aW1lXHJcblxyXG4gIGVsYXBzZWQgPSAwXHJcbiAgZnJhbWVUaW1lID0gMFxyXG4gIGxhc3RUaW1lID0gdGltZVxyXG5cclxuICByZXR1cm4gc3RhcnRUaW1lXHJcbn1cclxuXHJcbmNvbnN0IHRpY2sgPSAodGltZTogbnVtYmVyKSA9PiB7XHJcbiAgaWYgKCFydW5uaW5nKSByZXR1cm5cclxuXHJcbiAgc3RhcnRUaW1lID0gaW5pdFRpY2sodGltZSlcclxuICBlbGFwc2VkID0gdGltZSAtIHN0YXJ0VGltZVxyXG4gIGZyYW1lVGltZSA9IHRpbWUgLSBsYXN0VGltZVxyXG4gIGxhc3RUaW1lID0gdGltZVxyXG5cclxuICBpZiAoY3VycmVudFNjZW5lKSBjdXJyZW50U2NlbmUudXBkYXRlKHN0YXRlKVxyXG5cclxuICAvLyBzY2VuZSBtYXkgaGF2ZSBzZW50IGEgcXVpdCBzaWduYWxcclxuICBpZiAoIXJ1bm5pbmcpIHtcclxuICAgIGhhbHQoKVxyXG5cclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgLy8gcmVuZGVyXHJcblxyXG4gIGZyYW1lQ3R4LnB1dEltYWdlRGF0YShmcmFtZUJ1ZmZlciwgMCwgMClcclxuXHJcbiAgLy9cclxuXHJcbiAgcmFmSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGljaylcclxufVxyXG4iXX0=