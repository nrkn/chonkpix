import { countCells, generateGridLayout } from '../grid/index.js';
import { assrt } from '../util.js';
// for sheets where all tiles are same size and laid out uniformly.
// otherwise, write a custom function for the use case
export const createTileSheet = (image, cellW, cellH, names = [], gap = 0, padding = 0) => {
    const cols = countCells(image.width, cellW, gap, padding);
    const rows = countCells(image.height, cellH, gap, padding);
    const size = cols * rows;
    const grid = generateGridLayout(cellW, cellH, cols, rows, gap, padding);
    const tiles = {
        image,
        rects: Array(size),
        names: new Map()
    };
    for (let i = 0; i < size; i++) {
        const cell = grid.cells[i];
        tiles.rects[i] = [...cell, cellW, cellH];
        if (names[i]) {
            tiles.names.set(names[i], i);
        }
    }
    return tiles;
};
export const getTileIndex = (sheet, tileName) => assrt(sheet.names.get(tileName), `Tile ${tileName} not found`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3Nwcml0ZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRWpFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFHbEMsbUVBQW1FO0FBQ25FLHNEQUFzRDtBQUN0RCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDN0IsS0FBZ0IsRUFBRSxLQUFhLEVBQUUsS0FBYSxFQUM5QyxRQUFrQixFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsQ0FBQyxFQUMxQyxFQUFFO0lBQ0YsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUN6RCxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQzFELE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUE7SUFFeEIsTUFBTSxJQUFJLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUV2RSxNQUFNLEtBQUssR0FBYztRQUN2QixLQUFLO1FBQ0wsS0FBSyxFQUFFLEtBQUssQ0FBSyxJQUFJLENBQUM7UUFDdEIsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFrQjtLQUNqQyxDQUFBO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzlCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFMUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUV4QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2IsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzlCLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFnQixFQUFFLFFBQWdCLEVBQUUsRUFBRSxDQUNqRSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxRQUFRLFlBQVksQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY291bnRDZWxscywgZ2VuZXJhdGVHcmlkTGF5b3V0IH0gZnJvbSAnLi4vZ3JpZC9pbmRleC5qcydcclxuaW1wb3J0IHsgVDQgfSBmcm9tICcuLi90eXBlcy5qcydcclxuaW1wb3J0IHsgYXNzcnQgfSBmcm9tICcuLi91dGlsLmpzJ1xyXG5pbXBvcnQgeyBUaWxlU2hlZXQgfSBmcm9tICcuL3R5cGVzLmpzJ1xyXG5cclxuLy8gZm9yIHNoZWV0cyB3aGVyZSBhbGwgdGlsZXMgYXJlIHNhbWUgc2l6ZSBhbmQgbGFpZCBvdXQgdW5pZm9ybWx5LlxyXG4vLyBvdGhlcndpc2UsIHdyaXRlIGEgY3VzdG9tIGZ1bmN0aW9uIGZvciB0aGUgdXNlIGNhc2VcclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRpbGVTaGVldCA9IChcclxuICBpbWFnZTogSW1hZ2VEYXRhLCBjZWxsVzogbnVtYmVyLCBjZWxsSDogbnVtYmVyLFxyXG4gIG5hbWVzOiBzdHJpbmdbXSA9IFtdLCBnYXAgPSAwLCBwYWRkaW5nID0gMFxyXG4pID0+IHtcclxuICBjb25zdCBjb2xzID0gY291bnRDZWxscyhpbWFnZS53aWR0aCwgY2VsbFcsIGdhcCwgcGFkZGluZylcclxuICBjb25zdCByb3dzID0gY291bnRDZWxscyhpbWFnZS5oZWlnaHQsIGNlbGxILCBnYXAsIHBhZGRpbmcpXHJcbiAgY29uc3Qgc2l6ZSA9IGNvbHMgKiByb3dzXHJcblxyXG4gIGNvbnN0IGdyaWQgPSBnZW5lcmF0ZUdyaWRMYXlvdXQoY2VsbFcsIGNlbGxILCBjb2xzLCByb3dzLCBnYXAsIHBhZGRpbmcpXHJcblxyXG4gIGNvbnN0IHRpbGVzOiBUaWxlU2hlZXQgPSB7XHJcbiAgICBpbWFnZSxcclxuICAgIHJlY3RzOiBBcnJheTxUND4oc2l6ZSksXHJcbiAgICBuYW1lczogbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKVxyXG4gIH1cclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcclxuICAgIGNvbnN0IGNlbGwgPSBncmlkLmNlbGxzW2ldXHJcblxyXG4gICAgdGlsZXMucmVjdHNbaV0gPSBbLi4uY2VsbCwgY2VsbFcsIGNlbGxIXVxyXG5cclxuICAgIGlmIChuYW1lc1tpXSkge1xyXG4gICAgICB0aWxlcy5uYW1lcy5zZXQobmFtZXNbaV0sIGkpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGlsZXNcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFRpbGVJbmRleCA9IChzaGVldDogVGlsZVNoZWV0LCB0aWxlTmFtZTogc3RyaW5nKSA9PlxyXG4gIGFzc3J0KHNoZWV0Lm5hbWVzLmdldCh0aWxlTmFtZSksIGBUaWxlICR7dGlsZU5hbWV9IG5vdCBmb3VuZGApXHJcbiJdfQ==