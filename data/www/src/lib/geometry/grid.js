import { assrt, assrtPositive } from '../util.js';
// returns a structure representing the top left of each cell in the grid
// the last entry is the total width and height of the grid, previous entries 
// are the top left of each cell in the grid
export const generateGrid = (cellW, cellH, cols, rows, gap = 0, padding = 0) => {
    const cellCount = cols * rows;
    const data = Array(cellCount + 1);
    const gridW = cols * cellW + (cols - 1) * gap + 2 * padding;
    const gridH = rows * cellH + (rows - 1) * gap + 2 * padding;
    let x = padding;
    let y = padding;
    for (let i = 0; i < cellCount; i++) {
        data[i] = [x, y];
        x += cellW + gap;
        if (x + cellW > gridW) {
            x = padding;
            y += cellH + gap;
        }
    }
    data[cellCount] = [gridW, gridH];
    return data;
};
export const generateNamedGrid = (cellW, cellH, cols, rows, gap = 0, padding = 0) => {
    const grid = generateGrid(cellW, cellH, cols, rows, gap, padding);
    const [width, height] = assrt(grid.pop());
    const named = {
        width, height
    };
    for (let y = 0; y < rows; y++) {
        for (let x = 0; x < cols; x++) {
            const key = gridKey(x, y);
            const [gx, gy] = grid[y * cols + x];
            named[key] = [gx, gy];
        }
    }
    return named;
};
export const colKey = (col) => {
    col = assrtPositive(col | 0, 'Only positive integers are allowed for column keys');
    let key = '';
    do {
        const mod = col % 26;
        key = String.fromCharCode(97 + mod) + key;
        col = Math.floor(col / 26) - 1;
    } while (col >= 0);
    return key;
};
export const parseColKey = (key) => {
    if (key.length === 0)
        return 0;
    if (key.length === 1)
        return key.charCodeAt(0) - 97;
    let col = 0;
    for (let i = 0; i < key.length - 1; i++) {
        col = col * 26 + (key.charCodeAt(i) - 97 + 1);
    }
    col = col * 26 + (key.charCodeAt(key.length - 1) - 97);
    return col;
};
// column names are a..z, aa..az, ba..bz, etc
// row names are 0..n
export const gridKey = (col, row) => `${colKey(col)}${row}`;
export const parseGridKey = (gridKey) => {
    const match = gridKey.match(/([a-z]+)(\d+)/);
    if (!match) {
        throw Error(`Invalid grid key: ${gridKey}`);
    }
    const [, col, row] = match;
    return [parseColKey(col), parseInt(row)];
};
//# sourceMappingURL=data:application/json;base64,