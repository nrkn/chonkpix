// we will start off simple and have it be an append only terminal, no wrapping
// scrolling etc, no cursor, and we will add more features as we go
export const createTerminal = () => {
    let lineBuffer = [''];
    const clear = () => {
        lineBuffer = [''];
    };
    const append = (value) => {
        const lines = value.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            lineBuffer[lineBuffer.length - 1] += line;
            if (i !== lines.length - 1) {
                lineBuffer.push('');
            }
        }
    };
    const appendLine = (value = '') => {
        append(value + '\n');
    };
    const update = (line, value) => {
        if (line < 0 || line >= lineBuffer.length) {
            throw Error('Line out of range');
        }
        lineBuffer[line] = value;
    };
    const backspace = () => {
        lineBuffer[lineBuffer.length - 1] = (lineBuffer[lineBuffer.length - 1].slice(0, -1));
    };
    const view = (cols, rows) => {
        const lines = (lineBuffer.length > rows ?
            lineBuffer.slice(lineBuffer.length - rows) :
            lineBuffer).map(l => {
            if (l.length > cols) {
                return l.slice(0, cols);
            }
            return l;
        });
        return lines;
    };
    const term = {
        get bufferHeight() {
            return lineBuffer.length;
        },
        clear,
        backspace,
        append,
        appendLine,
        updateLine: update,
        view
    };
    return term;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3Rlcm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0VBQStFO0FBQy9FLG1FQUFtRTtBQUNuRSxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsR0FBRyxFQUFFO0lBQ2pDLElBQUksVUFBVSxHQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFL0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO1FBQ2pCLFVBQVUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ25CLENBQUMsQ0FBQTtJQUVELE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7UUFDL0IsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUUvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUVyQixVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUE7WUFFekMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDM0IsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNyQixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUMsQ0FBQTtJQUVELE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDdEIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQUcsQ0FBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7UUFDOUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDMUMsTUFBTSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtRQUNsQyxDQUFDO1FBRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUMxQixDQUFDLENBQUE7SUFFRCxNQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFDckIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FDbEMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUMvQyxDQUFBO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLEVBQUU7UUFDMUMsTUFBTSxLQUFLLEdBQUcsQ0FDWixVQUFVLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ3hCLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzVDLFVBQVUsQ0FDYixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNSLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQztnQkFDcEIsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUN6QixDQUFDO1lBRUQsT0FBTyxDQUFDLENBQUE7UUFDVixDQUFDLENBQUMsQ0FBQTtRQUVGLE9BQU8sS0FBSyxDQUFBO0lBQ2QsQ0FBQyxDQUFBO0lBRUQsTUFBTSxJQUFJLEdBQWE7UUFDckIsSUFBSSxZQUFZO1lBQ2QsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFBO1FBQzFCLENBQUM7UUFFRCxLQUFLO1FBQ0wsU0FBUztRQUNULE1BQU07UUFDTixVQUFVO1FBQ1YsVUFBVSxFQUFFLE1BQU07UUFDbEIsSUFBSTtLQUNMLENBQUE7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIHdlIHdpbGwgc3RhcnQgb2ZmIHNpbXBsZSBhbmQgaGF2ZSBpdCBiZSBhbiBhcHBlbmQgb25seSB0ZXJtaW5hbCwgbm8gd3JhcHBpbmdcbi8vIHNjcm9sbGluZyBldGMsIG5vIGN1cnNvciwgYW5kIHdlIHdpbGwgYWRkIG1vcmUgZmVhdHVyZXMgYXMgd2UgZ29cbmV4cG9ydCBjb25zdCBjcmVhdGVUZXJtaW5hbCA9ICgpID0+IHtcbiAgbGV0IGxpbmVCdWZmZXI6IHN0cmluZ1tdID0gWycnXVxuXG4gIGNvbnN0IGNsZWFyID0gKCkgPT4ge1xuICAgIGxpbmVCdWZmZXIgPSBbJyddXG4gIH1cblxuICBjb25zdCBhcHBlbmQgPSAodmFsdWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGxpbmVzID0gdmFsdWUuc3BsaXQoJ1xcbicpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5lID0gbGluZXNbaV1cblxuICAgICAgbGluZUJ1ZmZlcltsaW5lQnVmZmVyLmxlbmd0aCAtIDFdICs9IGxpbmVcblxuICAgICAgaWYgKGkgIT09IGxpbmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgbGluZUJ1ZmZlci5wdXNoKCcnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGFwcGVuZExpbmUgPSAodmFsdWUgPSAnJykgPT4ge1xuICAgIGFwcGVuZCh2YWx1ZSArICdcXG4nKVxuICB9XG5cbiAgY29uc3QgdXBkYXRlID0gKCBsaW5lOiBudW1iZXIsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICBpZiAobGluZSA8IDAgfHwgbGluZSA+PSBsaW5lQnVmZmVyLmxlbmd0aCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0xpbmUgb3V0IG9mIHJhbmdlJylcbiAgICB9XG5cbiAgICBsaW5lQnVmZmVyW2xpbmVdID0gdmFsdWVcbiAgfVxuXG4gIGNvbnN0IGJhY2tzcGFjZSA9ICgpID0+IHtcbiAgICBsaW5lQnVmZmVyW2xpbmVCdWZmZXIubGVuZ3RoIC0gMV0gPSAoXG4gICAgICBsaW5lQnVmZmVyW2xpbmVCdWZmZXIubGVuZ3RoIC0gMV0uc2xpY2UoMCwgLTEpXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmlldyA9IChjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGxpbmVzID0gKFxuICAgICAgbGluZUJ1ZmZlci5sZW5ndGggPiByb3dzID9cbiAgICAgICAgbGluZUJ1ZmZlci5zbGljZShsaW5lQnVmZmVyLmxlbmd0aCAtIHJvd3MpIDpcbiAgICAgICAgbGluZUJ1ZmZlclxuICAgICkubWFwKGwgPT4ge1xuICAgICAgaWYgKGwubGVuZ3RoID4gY29scykge1xuICAgICAgICByZXR1cm4gbC5zbGljZSgwLCBjb2xzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbFxuICAgIH0pXG5cbiAgICByZXR1cm4gbGluZXNcbiAgfVxuXG4gIGNvbnN0IHRlcm06IFRlcm1pbmFsID0ge1xuICAgIGdldCBidWZmZXJIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gbGluZUJ1ZmZlci5sZW5ndGhcbiAgICB9LFxuXG4gICAgY2xlYXIsXG4gICAgYmFja3NwYWNlLFxuICAgIGFwcGVuZCxcbiAgICBhcHBlbmRMaW5lLFxuICAgIHVwZGF0ZUxpbmU6IHVwZGF0ZSxcbiAgICB2aWV3XG4gIH1cblxuICByZXR1cm4gdGVybVxufVxuXG5leHBvcnQgdHlwZSBUZXJtaW5hbCA9IHtcbiAgcmVhZG9ubHkgYnVmZmVySGVpZ2h0OiBudW1iZXJcbiAgY2xlYXI6ICgpID0+IHZvaWRcbiAgYmFja3NwYWNlOiAoKSA9PiB2b2lkXG4gIGFwcGVuZDogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWRcbiAgYXBwZW5kTGluZTogKHZhbHVlPzogc3RyaW5nKSA9PiB2b2lkXG4gIHVwZGF0ZUxpbmU6IChsaW5lOiBudW1iZXIsIHZhbHVlOiBzdHJpbmcpID0+IHZvaWRcbiAgdmlldzogKGNvbHM6IG51bWJlciwgcm93czogbnVtYmVyKSA9PiBzdHJpbmdbXVxufSJdfQ==