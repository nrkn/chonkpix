// we will start off simple and have it be an append only terminal, no wrapping
// scrolling etc, no cursor, and we will add more features as we go
export const createTerminal = () => {
    let lineBuffer = [''];
    const clear = () => {
        lineBuffer = [''];
    };
    const append = (value) => {
        const lines = value.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            lineBuffer[lineBuffer.length - 1] += line;
            if (i !== lines.length - 1) {
                lineBuffer.push('');
            }
        }
    };
    const appendLine = (value = '') => {
        append(value + '\n');
    };
    const backspace = () => {
        lineBuffer[lineBuffer.length - 1] = (lineBuffer[lineBuffer.length - 1].slice(0, -1));
    };
    const view = (cols, rows) => {
        const lines = (lineBuffer.length > rows ?
            lineBuffer.slice(lineBuffer.length - rows) :
            lineBuffer).map(l => {
            if (l.length > cols) {
                return l.slice(0, cols);
            }
            return l;
        });
        return lines;
    };
    const term = {
        get bufferHeight() {
            return lineBuffer.length;
        },
        clear,
        backspace,
        append,
        appendLine,
        view
    };
    return term;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3Rlcm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0VBQStFO0FBQy9FLG1FQUFtRTtBQUNuRSxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsR0FBRyxFQUFFO0lBQ2pDLElBQUksVUFBVSxHQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFL0IsTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFO1FBQ2pCLFVBQVUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ25CLENBQUMsQ0FBQTtJQUVELE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7UUFDL0IsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUUvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUVyQixVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUE7WUFFekMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDM0IsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUNyQixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUMsQ0FBQTtJQUVELE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDdEIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFO1FBQ3JCLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQ2xDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDL0MsQ0FBQTtJQUNILENBQUMsQ0FBQTtJQUVELE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxFQUFFO1FBQzFDLE1BQU0sS0FBSyxHQUFHLENBQ1osVUFBVSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztZQUN4QixVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM1QyxVQUFVLENBQ2IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDUixJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUM7Z0JBQ3BCLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7WUFDekIsQ0FBQztZQUVELE9BQU8sQ0FBQyxDQUFBO1FBQ1YsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUMsQ0FBQTtJQUVELE1BQU0sSUFBSSxHQUFhO1FBQ3JCLElBQUksWUFBWTtZQUNkLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQTtRQUMxQixDQUFDO1FBRUQsS0FBSztRQUNMLFNBQVM7UUFDVCxNQUFNO1FBQ04sVUFBVTtRQUNWLElBQUk7S0FDTCxDQUFBO0lBRUQsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB3ZSB3aWxsIHN0YXJ0IG9mZiBzaW1wbGUgYW5kIGhhdmUgaXQgYmUgYW4gYXBwZW5kIG9ubHkgdGVybWluYWwsIG5vIHdyYXBwaW5nXHJcbi8vIHNjcm9sbGluZyBldGMsIG5vIGN1cnNvciwgYW5kIHdlIHdpbGwgYWRkIG1vcmUgZmVhdHVyZXMgYXMgd2UgZ29cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRlcm1pbmFsID0gKCkgPT4ge1xyXG4gIGxldCBsaW5lQnVmZmVyOiBzdHJpbmdbXSA9IFsnJ11cclxuXHJcbiAgY29uc3QgY2xlYXIgPSAoKSA9PiB7XHJcbiAgICBsaW5lQnVmZmVyID0gWycnXVxyXG4gIH1cclxuXHJcbiAgY29uc3QgYXBwZW5kID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgIGNvbnN0IGxpbmVzID0gdmFsdWUuc3BsaXQoJ1xcbicpXHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBsaW5lID0gbGluZXNbaV1cclxuXHJcbiAgICAgIGxpbmVCdWZmZXJbbGluZUJ1ZmZlci5sZW5ndGggLSAxXSArPSBsaW5lXHJcblxyXG4gICAgICBpZiAoaSAhPT0gbGluZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIGxpbmVCdWZmZXIucHVzaCgnJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgYXBwZW5kTGluZSA9ICh2YWx1ZSA9ICcnKSA9PiB7XHJcbiAgICBhcHBlbmQodmFsdWUgKyAnXFxuJylcclxuICB9XHJcblxyXG4gIGNvbnN0IGJhY2tzcGFjZSA9ICgpID0+IHtcclxuICAgIGxpbmVCdWZmZXJbbGluZUJ1ZmZlci5sZW5ndGggLSAxXSA9IChcclxuICAgICAgbGluZUJ1ZmZlcltsaW5lQnVmZmVyLmxlbmd0aCAtIDFdLnNsaWNlKDAsIC0xKVxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgdmlldyA9IChjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlcikgPT4ge1xyXG4gICAgY29uc3QgbGluZXMgPSAoXHJcbiAgICAgIGxpbmVCdWZmZXIubGVuZ3RoID4gcm93cyA/XHJcbiAgICAgICAgbGluZUJ1ZmZlci5zbGljZShsaW5lQnVmZmVyLmxlbmd0aCAtIHJvd3MpIDpcclxuICAgICAgICBsaW5lQnVmZmVyXHJcbiAgICApLm1hcChsID0+IHtcclxuICAgICAgaWYgKGwubGVuZ3RoID4gY29scykge1xyXG4gICAgICAgIHJldHVybiBsLnNsaWNlKDAsIGNvbHMpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBsXHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiBsaW5lc1xyXG4gIH1cclxuXHJcbiAgY29uc3QgdGVybTogVGVybWluYWwgPSB7XHJcbiAgICBnZXQgYnVmZmVySGVpZ2h0KCkge1xyXG4gICAgICByZXR1cm4gbGluZUJ1ZmZlci5sZW5ndGhcclxuICAgIH0sXHJcblxyXG4gICAgY2xlYXIsXHJcbiAgICBiYWNrc3BhY2UsXHJcbiAgICBhcHBlbmQsXHJcbiAgICBhcHBlbmRMaW5lLFxyXG4gICAgdmlld1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRlcm1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVGVybWluYWwgPSB7XHJcbiAgcmVhZG9ubHkgYnVmZmVySGVpZ2h0OiBudW1iZXJcclxuICBjbGVhcjogKCkgPT4gdm9pZFxyXG4gIGJhY2tzcGFjZTogKCkgPT4gdm9pZFxyXG4gIGFwcGVuZDogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWRcclxuICBhcHBlbmRMaW5lOiAodmFsdWU/OiBzdHJpbmcpID0+IHZvaWRcclxuICB2aWV3OiAoY29sczogbnVtYmVyLCByb3dzOiBudW1iZXIpID0+IHN0cmluZ1tdXHJcbn0iXX0=