import { debugScene } from './scenes/debug-scene.js';
import { start } from './lib/engine.js';
import { textSandboxScene } from './scenes/text-sandbox-scene.js';
import { splitScene } from './scenes/split-scene.js';
let isSwitchBetweenScenes = false;
const debug = debugScene();
const text = textSandboxScene();
const split = splitScene(text, debug);
const { quit: debugQuit } = debug;
const { quit: textQuit } = text;
const { quit: splitQuit } = split;
// use this for switching between full screen exclusive scenes:
// const scenes = [
//   [debug, debugQuit],
//   [text, textQuit]
// ] as const
// or this for split screen scenes:
const scenes = [
    [split, splitQuit]
];
let sceneIndex = 0;
const onQuit = async (state) => {
    let sceneData = scenes[sceneIndex];
    const baseQuit = sceneData[1];
    await baseQuit(state);
    if (isSwitchBetweenScenes) {
        sceneIndex++;
        if (sceneIndex >= scenes.length) {
            sceneIndex = 0;
        }
        sceneData = scenes[sceneIndex];
        console.log('Switching to scene', sceneIndex);
    }
    else {
        console.log('Restarting current scene');
    }
    start(sceneData[0]).catch(console.error);
};
//debug.quit = onQuit
//text.quit = onQuit
split.quit = onQuit;
start(scenes[sceneIndex][0]).catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUVqRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFFcEQsSUFBSSxxQkFBcUIsR0FBRyxLQUFLLENBQUE7QUFFakMsTUFBTSxLQUFLLEdBQUcsVUFBVSxFQUFFLENBQUE7QUFDMUIsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQTtBQUMvQixNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxDQUFBO0FBRXBDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFBO0FBQ2pDLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFBO0FBQy9CLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFBO0FBRWpDLCtEQUErRDtBQUMvRCxtQkFBbUI7QUFDbkIsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQixhQUFhO0FBRWIsbUNBQW1DO0FBQ25DLE1BQU0sTUFBTSxHQUFHO0lBQ2IsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDO0NBQ1YsQ0FBQTtBQUVWLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQTtBQUVsQixNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLEVBQUU7SUFDcEMsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBRWxDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUU3QixNQUFNLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVyQixJQUFJLHFCQUFxQixFQUFFLENBQUM7UUFDMUIsVUFBVSxFQUFFLENBQUE7UUFFWixJQUFJLFVBQVUsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDaEMsVUFBVSxHQUFHLENBQUMsQ0FBQTtRQUNoQixDQUFDO1FBRUQsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUU5QixPQUFPLENBQUMsR0FBRyxDQUFFLG9CQUFvQixFQUFFLFVBQVUsQ0FBRSxDQUFBO0lBQ2pELENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBRSwwQkFBMEIsQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMxQyxDQUFDLENBQUE7QUFFRCxxQkFBcUI7QUFDckIsb0JBQW9CO0FBQ3BCLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFBO0FBRW5CLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVidWdTY2VuZSB9IGZyb20gJy4vc2NlbmVzL2RlYnVnLXNjZW5lLmpzJ1xyXG5pbXBvcnQgeyBzdGFydCB9IGZyb20gJy4vbGliL2VuZ2luZS5qcydcclxuaW1wb3J0IHsgdGV4dFNhbmRib3hTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3RleHQtc2FuZGJveC1zY2VuZS5qcydcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL2xpYi90eXBlcy5qcydcclxuaW1wb3J0IHsgc3BsaXRTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3NwbGl0LXNjZW5lLmpzJ1xyXG5cclxubGV0IGlzU3dpdGNoQmV0d2VlblNjZW5lcyA9IGZhbHNlXHJcblxyXG5jb25zdCBkZWJ1ZyA9IGRlYnVnU2NlbmUoKVxyXG5jb25zdCB0ZXh0ID0gdGV4dFNhbmRib3hTY2VuZSgpXHJcbmNvbnN0IHNwbGl0ID0gc3BsaXRTY2VuZSh0ZXh0LGRlYnVnKVxyXG5cclxuY29uc3QgeyBxdWl0OiBkZWJ1Z1F1aXQgfSA9IGRlYnVnXHJcbmNvbnN0IHsgcXVpdDogdGV4dFF1aXQgfSA9IHRleHRcclxuY29uc3QgeyBxdWl0OiBzcGxpdFF1aXQgfSA9IHNwbGl0XHJcblxyXG4vLyB1c2UgdGhpcyBmb3Igc3dpdGNoaW5nIGJldHdlZW4gZnVsbCBzY3JlZW4gZXhjbHVzaXZlIHNjZW5lczpcclxuLy8gY29uc3Qgc2NlbmVzID0gW1xyXG4vLyAgIFtkZWJ1ZywgZGVidWdRdWl0XSxcclxuLy8gICBbdGV4dCwgdGV4dFF1aXRdXHJcbi8vIF0gYXMgY29uc3RcclxuXHJcbi8vIG9yIHRoaXMgZm9yIHNwbGl0IHNjcmVlbiBzY2VuZXM6XHJcbmNvbnN0IHNjZW5lcyA9IFtcclxuICBbc3BsaXQsIHNwbGl0UXVpdF1cclxuXSBhcyBjb25zdFxyXG5cclxubGV0IHNjZW5lSW5kZXggPSAwXHJcblxyXG5jb25zdCBvblF1aXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgbGV0IHNjZW5lRGF0YSA9IHNjZW5lc1tzY2VuZUluZGV4XVxyXG5cclxuICBjb25zdCBiYXNlUXVpdCA9IHNjZW5lRGF0YVsxXVxyXG5cclxuICBhd2FpdCBiYXNlUXVpdChzdGF0ZSlcclxuXHJcbiAgaWYoIGlzU3dpdGNoQmV0d2VlblNjZW5lcyApe1xyXG4gICAgc2NlbmVJbmRleCsrXHJcblxyXG4gICAgaWYgKHNjZW5lSW5kZXggPj0gc2NlbmVzLmxlbmd0aCkge1xyXG4gICAgICBzY2VuZUluZGV4ID0gMFxyXG4gICAgfVxyXG4gIFxyXG4gICAgc2NlbmVEYXRhID0gc2NlbmVzW3NjZW5lSW5kZXhdXHJcblxyXG4gICAgY29uc29sZS5sb2coICdTd2l0Y2hpbmcgdG8gc2NlbmUnLCBzY2VuZUluZGV4IClcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coICdSZXN0YXJ0aW5nIGN1cnJlbnQgc2NlbmUnKVxyXG4gIH1cclxuXHJcbiAgc3RhcnQoc2NlbmVEYXRhWzBdKS5jYXRjaChjb25zb2xlLmVycm9yKVxyXG59XHJcblxyXG4vL2RlYnVnLnF1aXQgPSBvblF1aXRcclxuLy90ZXh0LnF1aXQgPSBvblF1aXRcclxuc3BsaXQucXVpdCA9IG9uUXVpdFxyXG5cclxuc3RhcnQoc2NlbmVzW3NjZW5lSW5kZXhdWzBdKS5jYXRjaChjb25zb2xlLmVycm9yKVxyXG4iXX0=