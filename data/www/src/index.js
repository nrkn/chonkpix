import { debugScene } from './scenes/sandbox/debug-scene.js';
import { start } from './lib/engine.js';
import { textSandboxScene } from './scenes/sandbox/text-sandbox-scene.js';
import { splitScene } from './scenes/sandbox/split-scene.js';
import { paletteSandboxScene } from './scenes/sandbox/palette-scene.js';
import { rangerScene } from './scenes/sandbox/ranger/scene.js';
import { voxelScene } from './scenes/sandbox/voxel-scene.js';
import { hslScene } from './scenes/sandbox/hsl-scene.js';
import { carScene } from './scenes/sandbox/car-scene.js';
import { dosScene } from './scenes/sandbox/dos/dos-scene.js';
const debug = debugScene();
const text = textSandboxScene();
const split = splitScene(text, debug);
const pal = paletteSandboxScene();
const ranger = rangerScene();
const voxel = voxelScene();
const hsl = hslScene();
const car = carScene();
const dos = dosScene();
const { quit: debugQuit } = debug;
const { quit: textQuit } = text;
const { quit: splitQuit } = split;
const { quit: palQuit } = pal;
const { quit: rangerQuit } = ranger;
const { quit: voxelQuit } = voxel;
const { quit: hslQuit } = hsl;
const { quit: carQuit } = car;
const { quit: dosQuit } = dos;
// use this for switching between full screen exclusive scenes:
// const scenes = [
//   [text, textQuit],
//   [debug, debugQuit],  
//   [pal, palQuit]
// ] as const
// or this for split screen scenes:
// const scenes = [
//   [split, splitQuit]
// ] as const
// or this for a single scene:
const scenes = [
    //[ranger, rangerQuit]
    //[pal, palQuit]
    //[ voxel, voxelQuit ]
    //[hsl, hslQuit]
    //[car, carQuit]
    //[text, textQuit]
    [dos, dosQuit]
];
let sceneIndex = 0;
const onQuit = async (state) => {
    let sceneData = scenes[sceneIndex];
    const baseQuit = sceneData[1];
    await baseQuit(state);
    sceneIndex++;
    if (sceneIndex >= scenes.length) {
        sceneIndex = 0;
    }
    sceneData = scenes[sceneIndex];
    if (scenes.length > 1) {
        console.log('Switching to scene', sceneIndex);
    }
    else {
        console.log('Restarting scene');
    }
    start(sceneData[0]).catch(console.error);
};
// when using split, leave all except split commented out
// when using a single scene, leave the others commented out
// when switching between scenes, uncomment all participants
//debug.quit = onQuit
//text.quit = onQuit
//split.quit = onQuit
//pal.quit = onQuit
//ranger.quit = onQuit
//voxel.quit = onQuit
//hsl.quit = onQuit
//car.quit = onQuit
dos.quit = onQuit;
start(scenes[sceneIndex][0]).catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBQzVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQTtBQUV6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUNBQWlDLENBQUE7QUFDNUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUE7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFBO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUM1RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQTtBQUU1RCxNQUFNLEtBQUssR0FBRyxVQUFVLEVBQUUsQ0FBQTtBQUMxQixNQUFNLElBQUksR0FBRyxnQkFBZ0IsRUFBRSxDQUFBO0FBQy9CLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDckMsTUFBTSxHQUFHLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQTtBQUNqQyxNQUFNLE1BQU0sR0FBRyxXQUFXLEVBQUUsQ0FBQTtBQUM1QixNQUFNLEtBQUssR0FBRyxVQUFVLEVBQUUsQ0FBQTtBQUMxQixNQUFNLEdBQUcsR0FBRyxRQUFRLEVBQUUsQ0FBQTtBQUN0QixNQUFNLEdBQUcsR0FBRyxRQUFRLEVBQUUsQ0FBQTtBQUN0QixNQUFNLEdBQUcsR0FBRyxRQUFRLEVBQUUsQ0FBQTtBQUV0QixNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQTtBQUNqQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQTtBQUMvQixNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQTtBQUNqQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQTtBQUM3QixNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQTtBQUNuQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQTtBQUNqQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQTtBQUM3QixNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQTtBQUM3QixNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQTtBQUU3QiwrREFBK0Q7QUFDL0QsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QiwwQkFBMEI7QUFDMUIsbUJBQW1CO0FBQ25CLGFBQWE7QUFFYixtQ0FBbUM7QUFDbkMsbUJBQW1CO0FBQ25CLHVCQUF1QjtBQUN2QixhQUFhO0FBRWIsOEJBQThCO0FBQzlCLE1BQU0sTUFBTSxHQUFHO0lBQ2Isc0JBQXNCO0lBQ3RCLGdCQUFnQjtJQUNoQixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNmLGtCQUFrQjtJQUNsQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUM7Q0FDUCxDQUFBO0FBRVYsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFBO0FBRWxCLE1BQU0sTUFBTSxHQUFHLEtBQUssRUFBRSxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFbEMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTdCLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXJCLFVBQVUsRUFBRSxDQUFBO0lBRVosSUFBSSxVQUFVLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLFVBQVUsR0FBRyxDQUFDLENBQUE7SUFDaEIsQ0FBQztJQUVELFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFOUIsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDL0MsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFDakMsQ0FBQztJQUdELEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzFDLENBQUMsQ0FBQTtBQUVELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsNERBQTREO0FBRTVELHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUE7QUFFakIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWJ1Z1NjZW5lIH0gZnJvbSAnLi9zY2VuZXMvc2FuZGJveC9kZWJ1Zy1zY2VuZS5qcydcbmltcG9ydCB7IHN0YXJ0IH0gZnJvbSAnLi9saWIvZW5naW5lLmpzJ1xuaW1wb3J0IHsgdGV4dFNhbmRib3hTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3NhbmRib3gvdGV4dC1zYW5kYm94LXNjZW5lLmpzJ1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL2xpYi90eXBlcy5qcydcbmltcG9ydCB7IHNwbGl0U2NlbmUgfSBmcm9tICcuL3NjZW5lcy9zYW5kYm94L3NwbGl0LXNjZW5lLmpzJ1xuaW1wb3J0IHsgcGFsZXR0ZVNhbmRib3hTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3NhbmRib3gvcGFsZXR0ZS1zY2VuZS5qcydcbmltcG9ydCB7IHJhbmdlclNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvc2FuZGJveC9yYW5nZXIvc2NlbmUuanMnXG5pbXBvcnQgeyB2b3hlbFNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvc2FuZGJveC92b3hlbC1zY2VuZS5qcydcbmltcG9ydCB7IGhzbFNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvc2FuZGJveC9oc2wtc2NlbmUuanMnXG5pbXBvcnQgeyBjYXJTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3NhbmRib3gvY2FyLXNjZW5lLmpzJ1xuaW1wb3J0IHsgZG9zU2NlbmUgfSBmcm9tICcuL3NjZW5lcy9zYW5kYm94L2Rvcy9kb3Mtc2NlbmUuanMnXG5cbmNvbnN0IGRlYnVnID0gZGVidWdTY2VuZSgpXG5jb25zdCB0ZXh0ID0gdGV4dFNhbmRib3hTY2VuZSgpXG5jb25zdCBzcGxpdCA9IHNwbGl0U2NlbmUodGV4dCwgZGVidWcpXG5jb25zdCBwYWwgPSBwYWxldHRlU2FuZGJveFNjZW5lKClcbmNvbnN0IHJhbmdlciA9IHJhbmdlclNjZW5lKClcbmNvbnN0IHZveGVsID0gdm94ZWxTY2VuZSgpXG5jb25zdCBoc2wgPSBoc2xTY2VuZSgpXG5jb25zdCBjYXIgPSBjYXJTY2VuZSgpXG5jb25zdCBkb3MgPSBkb3NTY2VuZSgpXG5cbmNvbnN0IHsgcXVpdDogZGVidWdRdWl0IH0gPSBkZWJ1Z1xuY29uc3QgeyBxdWl0OiB0ZXh0UXVpdCB9ID0gdGV4dFxuY29uc3QgeyBxdWl0OiBzcGxpdFF1aXQgfSA9IHNwbGl0XG5jb25zdCB7IHF1aXQ6IHBhbFF1aXQgfSA9IHBhbFxuY29uc3QgeyBxdWl0OiByYW5nZXJRdWl0IH0gPSByYW5nZXJcbmNvbnN0IHsgcXVpdDogdm94ZWxRdWl0IH0gPSB2b3hlbFxuY29uc3QgeyBxdWl0OiBoc2xRdWl0IH0gPSBoc2xcbmNvbnN0IHsgcXVpdDogY2FyUXVpdCB9ID0gY2FyXG5jb25zdCB7IHF1aXQ6IGRvc1F1aXQgfSA9IGRvc1xuXG4vLyB1c2UgdGhpcyBmb3Igc3dpdGNoaW5nIGJldHdlZW4gZnVsbCBzY3JlZW4gZXhjbHVzaXZlIHNjZW5lczpcbi8vIGNvbnN0IHNjZW5lcyA9IFtcbi8vICAgW3RleHQsIHRleHRRdWl0XSxcbi8vICAgW2RlYnVnLCBkZWJ1Z1F1aXRdLCAgXG4vLyAgIFtwYWwsIHBhbFF1aXRdXG4vLyBdIGFzIGNvbnN0XG5cbi8vIG9yIHRoaXMgZm9yIHNwbGl0IHNjcmVlbiBzY2VuZXM6XG4vLyBjb25zdCBzY2VuZXMgPSBbXG4vLyAgIFtzcGxpdCwgc3BsaXRRdWl0XVxuLy8gXSBhcyBjb25zdFxuXG4vLyBvciB0aGlzIGZvciBhIHNpbmdsZSBzY2VuZTpcbmNvbnN0IHNjZW5lcyA9IFtcbiAgLy9bcmFuZ2VyLCByYW5nZXJRdWl0XVxuICAvL1twYWwsIHBhbFF1aXRdXG4gIC8vWyB2b3hlbCwgdm94ZWxRdWl0IF1cbiAgLy9baHNsLCBoc2xRdWl0XVxuICAvL1tjYXIsIGNhclF1aXRdXG4gICAvL1t0ZXh0LCB0ZXh0UXVpdF1cbiAgIFtkb3MsIGRvc1F1aXRdXG5dIGFzIGNvbnN0XG5cbmxldCBzY2VuZUluZGV4ID0gMFxuXG5jb25zdCBvblF1aXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XG4gIGxldCBzY2VuZURhdGEgPSBzY2VuZXNbc2NlbmVJbmRleF1cblxuICBjb25zdCBiYXNlUXVpdCA9IHNjZW5lRGF0YVsxXVxuXG4gIGF3YWl0IGJhc2VRdWl0KHN0YXRlKVxuXG4gIHNjZW5lSW5kZXgrK1xuXG4gIGlmIChzY2VuZUluZGV4ID49IHNjZW5lcy5sZW5ndGgpIHtcbiAgICBzY2VuZUluZGV4ID0gMFxuICB9XG5cbiAgc2NlbmVEYXRhID0gc2NlbmVzW3NjZW5lSW5kZXhdXG5cbiAgaWYgKHNjZW5lcy5sZW5ndGggPiAxKSB7XG4gICAgY29uc29sZS5sb2coJ1N3aXRjaGluZyB0byBzY2VuZScsIHNjZW5lSW5kZXgpXG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coJ1Jlc3RhcnRpbmcgc2NlbmUnKVxuICB9XG5cblxuICBzdGFydChzY2VuZURhdGFbMF0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG59XG5cbi8vIHdoZW4gdXNpbmcgc3BsaXQsIGxlYXZlIGFsbCBleGNlcHQgc3BsaXQgY29tbWVudGVkIG91dFxuLy8gd2hlbiB1c2luZyBhIHNpbmdsZSBzY2VuZSwgbGVhdmUgdGhlIG90aGVycyBjb21tZW50ZWQgb3V0XG4vLyB3aGVuIHN3aXRjaGluZyBiZXR3ZWVuIHNjZW5lcywgdW5jb21tZW50IGFsbCBwYXJ0aWNpcGFudHNcblxuLy9kZWJ1Zy5xdWl0ID0gb25RdWl0XG4vL3RleHQucXVpdCA9IG9uUXVpdFxuLy9zcGxpdC5xdWl0ID0gb25RdWl0XG4vL3BhbC5xdWl0ID0gb25RdWl0XG4vL3Jhbmdlci5xdWl0ID0gb25RdWl0XG4vL3ZveGVsLnF1aXQgPSBvblF1aXRcbi8vaHNsLnF1aXQgPSBvblF1aXRcbi8vY2FyLnF1aXQgPSBvblF1aXRcbmRvcy5xdWl0ID0gb25RdWl0XG5cbnN0YXJ0KHNjZW5lc1tzY2VuZUluZGV4XVswXSkuY2F0Y2goY29uc29sZS5lcnJvcilcbiJdfQ==