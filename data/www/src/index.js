import { debugScene } from './scenes/debug-scene.js';
import { start } from './lib/engine.js';
import { textSandboxScene } from './scenes/text-sandbox-scene.js';
import { splitScene } from './scenes/split-scene.js';
import { paletteSandboxScene } from './scenes/palette-scene.js';
const debug = debugScene();
const text = textSandboxScene();
const split = splitScene(text, debug);
const pal = paletteSandboxScene();
const { quit: debugQuit } = debug;
const { quit: textQuit } = text;
const { quit: splitQuit } = split;
const { quit: palQuit } = pal;
// use this for switching between full screen exclusive scenes:
const scenes = [
    [text, textQuit],
    [debug, debugQuit],
    [pal, palQuit]
];
// or this for split screen scenes:
// const scenes = [
//   [split, splitQuit]
// ] as const
// or this for a single scene:
// const scenes = [
//   [ pal, palQuit ]
// ] as const
let sceneIndex = 0;
const onQuit = async (state) => {
    let sceneData = scenes[sceneIndex];
    const baseQuit = sceneData[1];
    await baseQuit(state);
    sceneIndex++;
    if (sceneIndex >= scenes.length) {
        sceneIndex = 0;
    }
    sceneData = scenes[sceneIndex];
    console.log('Switching to scene', sceneIndex);
    start(sceneData[0]).catch(console.error);
};
// when using split, leave all except split commented out
// when using a single scene, leave the others commented out
// when switching between scenes, uncomment all participants
debug.quit = onQuit;
text.quit = onQuit;
//split.quit = onQuit
pal.quit = onQuit;
start(scenes[sceneIndex][0]).catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUVqRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFFL0QsTUFBTSxLQUFLLEdBQUcsVUFBVSxFQUFFLENBQUE7QUFDMUIsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQTtBQUMvQixNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ3JDLE1BQU0sR0FBRyxHQUFHLG1CQUFtQixFQUFFLENBQUE7QUFFakMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUE7QUFDakMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUE7QUFDL0IsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUE7QUFDakMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUE7QUFFN0IsK0RBQStEO0FBQy9ELE1BQU0sTUFBTSxHQUFHO0lBQ2IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO0lBQ2hCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQztJQUNsQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUM7Q0FDTixDQUFBO0FBRVYsbUNBQW1DO0FBQ25DLG1CQUFtQjtBQUNuQix1QkFBdUI7QUFDdkIsYUFBYTtBQUViLDhCQUE4QjtBQUM5QixtQkFBbUI7QUFDbkIscUJBQXFCO0FBQ3JCLGFBQWE7QUFFYixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUE7QUFFbEIsTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFLEtBQVksRUFBRSxFQUFFO0lBQ3BDLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUVsQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFN0IsTUFBTSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFckIsVUFBVSxFQUFFLENBQUE7SUFFWixJQUFJLFVBQVUsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEMsVUFBVSxHQUFHLENBQUMsQ0FBQTtJQUNoQixDQUFDO0lBRUQsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUU5QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRTdDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzFDLENBQUMsQ0FBQTtBQUVELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsNERBQTREO0FBRTVELEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFBO0FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFBO0FBQ2xCLHFCQUFxQjtBQUNyQixHQUFHLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQTtBQUVqQixLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlYnVnU2NlbmUgfSBmcm9tICcuL3NjZW5lcy9kZWJ1Zy1zY2VuZS5qcydcclxuaW1wb3J0IHsgc3RhcnQgfSBmcm9tICcuL2xpYi9lbmdpbmUuanMnXHJcbmltcG9ydCB7IHRleHRTYW5kYm94U2NlbmUgfSBmcm9tICcuL3NjZW5lcy90ZXh0LXNhbmRib3gtc2NlbmUuanMnXHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9saWIvdHlwZXMuanMnXHJcbmltcG9ydCB7IHNwbGl0U2NlbmUgfSBmcm9tICcuL3NjZW5lcy9zcGxpdC1zY2VuZS5qcydcclxuaW1wb3J0IHsgcGFsZXR0ZVNhbmRib3hTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3BhbGV0dGUtc2NlbmUuanMnXHJcblxyXG5jb25zdCBkZWJ1ZyA9IGRlYnVnU2NlbmUoKVxyXG5jb25zdCB0ZXh0ID0gdGV4dFNhbmRib3hTY2VuZSgpXHJcbmNvbnN0IHNwbGl0ID0gc3BsaXRTY2VuZSh0ZXh0LCBkZWJ1ZylcclxuY29uc3QgcGFsID0gcGFsZXR0ZVNhbmRib3hTY2VuZSgpXHJcblxyXG5jb25zdCB7IHF1aXQ6IGRlYnVnUXVpdCB9ID0gZGVidWdcclxuY29uc3QgeyBxdWl0OiB0ZXh0UXVpdCB9ID0gdGV4dFxyXG5jb25zdCB7IHF1aXQ6IHNwbGl0UXVpdCB9ID0gc3BsaXRcclxuY29uc3QgeyBxdWl0OiBwYWxRdWl0IH0gPSBwYWxcclxuXHJcbi8vIHVzZSB0aGlzIGZvciBzd2l0Y2hpbmcgYmV0d2VlbiBmdWxsIHNjcmVlbiBleGNsdXNpdmUgc2NlbmVzOlxyXG5jb25zdCBzY2VuZXMgPSBbXHJcbiAgW3RleHQsIHRleHRRdWl0XSxcclxuICBbZGVidWcsIGRlYnVnUXVpdF0sICBcclxuICBbcGFsLCBwYWxRdWl0XVxyXG5dIGFzIGNvbnN0XHJcblxyXG4vLyBvciB0aGlzIGZvciBzcGxpdCBzY3JlZW4gc2NlbmVzOlxyXG4vLyBjb25zdCBzY2VuZXMgPSBbXHJcbi8vICAgW3NwbGl0LCBzcGxpdFF1aXRdXHJcbi8vIF0gYXMgY29uc3RcclxuXHJcbi8vIG9yIHRoaXMgZm9yIGEgc2luZ2xlIHNjZW5lOlxyXG4vLyBjb25zdCBzY2VuZXMgPSBbXHJcbi8vICAgWyBwYWwsIHBhbFF1aXQgXVxyXG4vLyBdIGFzIGNvbnN0XHJcblxyXG5sZXQgc2NlbmVJbmRleCA9IDBcclxuXHJcbmNvbnN0IG9uUXVpdCA9IGFzeW5jIChzdGF0ZTogU3RhdGUpID0+IHtcclxuICBsZXQgc2NlbmVEYXRhID0gc2NlbmVzW3NjZW5lSW5kZXhdXHJcblxyXG4gIGNvbnN0IGJhc2VRdWl0ID0gc2NlbmVEYXRhWzFdXHJcblxyXG4gIGF3YWl0IGJhc2VRdWl0KHN0YXRlKVxyXG5cclxuICBzY2VuZUluZGV4KytcclxuXHJcbiAgaWYgKHNjZW5lSW5kZXggPj0gc2NlbmVzLmxlbmd0aCkge1xyXG4gICAgc2NlbmVJbmRleCA9IDBcclxuICB9XHJcblxyXG4gIHNjZW5lRGF0YSA9IHNjZW5lc1tzY2VuZUluZGV4XVxyXG5cclxuICBjb25zb2xlLmxvZygnU3dpdGNoaW5nIHRvIHNjZW5lJywgc2NlbmVJbmRleClcclxuXHJcbiAgc3RhcnQoc2NlbmVEYXRhWzBdKS5jYXRjaChjb25zb2xlLmVycm9yKVxyXG59XHJcblxyXG4vLyB3aGVuIHVzaW5nIHNwbGl0LCBsZWF2ZSBhbGwgZXhjZXB0IHNwbGl0IGNvbW1lbnRlZCBvdXRcclxuLy8gd2hlbiB1c2luZyBhIHNpbmdsZSBzY2VuZSwgbGVhdmUgdGhlIG90aGVycyBjb21tZW50ZWQgb3V0XHJcbi8vIHdoZW4gc3dpdGNoaW5nIGJldHdlZW4gc2NlbmVzLCB1bmNvbW1lbnQgYWxsIHBhcnRpY2lwYW50c1xyXG5cclxuZGVidWcucXVpdCA9IG9uUXVpdFxyXG50ZXh0LnF1aXQgPSBvblF1aXRcclxuLy9zcGxpdC5xdWl0ID0gb25RdWl0XHJcbnBhbC5xdWl0ID0gb25RdWl0XHJcblxyXG5zdGFydChzY2VuZXNbc2NlbmVJbmRleF1bMF0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpXHJcbiJdfQ==