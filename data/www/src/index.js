import { debugScene } from './scenes/debug-scene.js';
import { start } from './lib/engine.js';
import { textSandboxScene } from './scenes/text-sandbox-scene.js';
import { splitScene } from './scenes/split-scene.js';
import { paletteSandboxScene } from './scenes/palette-scene.js';
//import { rangerScene } from './scenes/ranger-scene.js'
import { rangerScene } from './scenes/ranger/ranger-scene.js';
const debug = debugScene();
const text = textSandboxScene();
const split = splitScene(text, debug);
const pal = paletteSandboxScene();
//const ranger = rangerScene()
const ranger = rangerScene();
const { quit: debugQuit } = debug;
const { quit: textQuit } = text;
const { quit: splitQuit } = split;
const { quit: palQuit } = pal;
const { quit: rangerQuit } = ranger;
// use this for switching between full screen exclusive scenes:
// const scenes = [
//   [text, textQuit],
//   [debug, debugQuit],  
//   [pal, palQuit]
// ] as const
// or this for split screen scenes:
// const scenes = [
//   [split, splitQuit]
// ] as const
// or this for a single scene:
const scenes = [
    [ranger, rangerQuit]
    //[pal, palQuit]
];
let sceneIndex = 0;
const onQuit = async (state) => {
    let sceneData = scenes[sceneIndex];
    const baseQuit = sceneData[1];
    await baseQuit(state);
    sceneIndex++;
    if (sceneIndex >= scenes.length) {
        sceneIndex = 0;
    }
    sceneData = scenes[sceneIndex];
    if (scenes.length > 1) {
        console.log('Switching to scene', sceneIndex);
    }
    else {
        console.log('Restarting scene');
    }
    start(sceneData[0]).catch(console.error);
};
// when using split, leave all except split commented out
// when using a single scene, leave the others commented out
// when switching between scenes, uncomment all participants
//debug.quit = onQuit
//text.quit = onQuit
//split.quit = onQuit
//pal.quit = onQuit
ranger.quit = onQuit;
start(scenes[sceneIndex][0]).catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUVqRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDL0Qsd0RBQXdEO0FBQ3hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUU3RCxNQUFNLEtBQUssR0FBRyxVQUFVLEVBQUUsQ0FBQTtBQUMxQixNQUFNLElBQUksR0FBRyxnQkFBZ0IsRUFBRSxDQUFBO0FBQy9CLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDckMsTUFBTSxHQUFHLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQTtBQUNqQyw4QkFBOEI7QUFDOUIsTUFBTSxNQUFNLEdBQUcsV0FBVyxFQUFFLENBQUE7QUFFNUIsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUE7QUFDakMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUE7QUFDL0IsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUE7QUFDakMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUE7QUFDN0IsTUFBTSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNLENBQUE7QUFFbkMsK0RBQStEO0FBQy9ELG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsMEJBQTBCO0FBQzFCLG1CQUFtQjtBQUNuQixhQUFhO0FBRWIsbUNBQW1DO0FBQ25DLG1CQUFtQjtBQUNuQix1QkFBdUI7QUFDdkIsYUFBYTtBQUViLDhCQUE4QjtBQUM5QixNQUFNLE1BQU0sR0FBRztJQUNiLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQztJQUNwQixnQkFBZ0I7Q0FDUixDQUFBO0FBRVYsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFBO0FBRWxCLE1BQU0sTUFBTSxHQUFHLEtBQUssRUFBRSxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFbEMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTdCLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXJCLFVBQVUsRUFBRSxDQUFBO0lBRVosSUFBSSxVQUFVLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLFVBQVUsR0FBRyxDQUFDLENBQUE7SUFDaEIsQ0FBQztJQUVELFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFOUIsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDL0MsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFDakMsQ0FBQztJQUdELEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzFDLENBQUMsQ0FBQTtBQUVELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsNERBQTREO0FBRTVELHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQixNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQTtBQUVwQixLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlYnVnU2NlbmUgfSBmcm9tICcuL3NjZW5lcy9kZWJ1Zy1zY2VuZS5qcydcclxuaW1wb3J0IHsgc3RhcnQgfSBmcm9tICcuL2xpYi9lbmdpbmUuanMnXHJcbmltcG9ydCB7IHRleHRTYW5kYm94U2NlbmUgfSBmcm9tICcuL3NjZW5lcy90ZXh0LXNhbmRib3gtc2NlbmUuanMnXHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9saWIvdHlwZXMuanMnXHJcbmltcG9ydCB7IHNwbGl0U2NlbmUgfSBmcm9tICcuL3NjZW5lcy9zcGxpdC1zY2VuZS5qcydcclxuaW1wb3J0IHsgcGFsZXR0ZVNhbmRib3hTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3BhbGV0dGUtc2NlbmUuanMnXHJcbi8vaW1wb3J0IHsgcmFuZ2VyU2NlbmUgfSBmcm9tICcuL3NjZW5lcy9yYW5nZXItc2NlbmUuanMnXHJcbmltcG9ydCB7IHJhbmdlclNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvcmFuZ2VyL3Jhbmdlci1zY2VuZS5qcydcclxuXHJcbmNvbnN0IGRlYnVnID0gZGVidWdTY2VuZSgpXHJcbmNvbnN0IHRleHQgPSB0ZXh0U2FuZGJveFNjZW5lKClcclxuY29uc3Qgc3BsaXQgPSBzcGxpdFNjZW5lKHRleHQsIGRlYnVnKVxyXG5jb25zdCBwYWwgPSBwYWxldHRlU2FuZGJveFNjZW5lKClcclxuLy9jb25zdCByYW5nZXIgPSByYW5nZXJTY2VuZSgpXHJcbmNvbnN0IHJhbmdlciA9IHJhbmdlclNjZW5lKClcclxuXHJcbmNvbnN0IHsgcXVpdDogZGVidWdRdWl0IH0gPSBkZWJ1Z1xyXG5jb25zdCB7IHF1aXQ6IHRleHRRdWl0IH0gPSB0ZXh0XHJcbmNvbnN0IHsgcXVpdDogc3BsaXRRdWl0IH0gPSBzcGxpdFxyXG5jb25zdCB7IHF1aXQ6IHBhbFF1aXQgfSA9IHBhbFxyXG5jb25zdCB7IHF1aXQ6IHJhbmdlclF1aXQgfSA9IHJhbmdlclxyXG5cclxuLy8gdXNlIHRoaXMgZm9yIHN3aXRjaGluZyBiZXR3ZWVuIGZ1bGwgc2NyZWVuIGV4Y2x1c2l2ZSBzY2VuZXM6XHJcbi8vIGNvbnN0IHNjZW5lcyA9IFtcclxuLy8gICBbdGV4dCwgdGV4dFF1aXRdLFxyXG4vLyAgIFtkZWJ1ZywgZGVidWdRdWl0XSwgIFxyXG4vLyAgIFtwYWwsIHBhbFF1aXRdXHJcbi8vIF0gYXMgY29uc3RcclxuXHJcbi8vIG9yIHRoaXMgZm9yIHNwbGl0IHNjcmVlbiBzY2VuZXM6XHJcbi8vIGNvbnN0IHNjZW5lcyA9IFtcclxuLy8gICBbc3BsaXQsIHNwbGl0UXVpdF1cclxuLy8gXSBhcyBjb25zdFxyXG5cclxuLy8gb3IgdGhpcyBmb3IgYSBzaW5nbGUgc2NlbmU6XHJcbmNvbnN0IHNjZW5lcyA9IFtcclxuICBbcmFuZ2VyLCByYW5nZXJRdWl0XVxyXG4gIC8vW3BhbCwgcGFsUXVpdF1cclxuXSBhcyBjb25zdFxyXG5cclxubGV0IHNjZW5lSW5kZXggPSAwXHJcblxyXG5jb25zdCBvblF1aXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgbGV0IHNjZW5lRGF0YSA9IHNjZW5lc1tzY2VuZUluZGV4XVxyXG5cclxuICBjb25zdCBiYXNlUXVpdCA9IHNjZW5lRGF0YVsxXVxyXG5cclxuICBhd2FpdCBiYXNlUXVpdChzdGF0ZSlcclxuXHJcbiAgc2NlbmVJbmRleCsrXHJcblxyXG4gIGlmIChzY2VuZUluZGV4ID49IHNjZW5lcy5sZW5ndGgpIHtcclxuICAgIHNjZW5lSW5kZXggPSAwXHJcbiAgfVxyXG5cclxuICBzY2VuZURhdGEgPSBzY2VuZXNbc2NlbmVJbmRleF1cclxuXHJcbiAgaWYgKHNjZW5lcy5sZW5ndGggPiAxKSB7XHJcbiAgICBjb25zb2xlLmxvZygnU3dpdGNoaW5nIHRvIHNjZW5lJywgc2NlbmVJbmRleClcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coJ1Jlc3RhcnRpbmcgc2NlbmUnKVxyXG4gIH1cclxuXHJcblxyXG4gIHN0YXJ0KHNjZW5lRGF0YVswXSkuY2F0Y2goY29uc29sZS5lcnJvcilcclxufVxyXG5cclxuLy8gd2hlbiB1c2luZyBzcGxpdCwgbGVhdmUgYWxsIGV4Y2VwdCBzcGxpdCBjb21tZW50ZWQgb3V0XHJcbi8vIHdoZW4gdXNpbmcgYSBzaW5nbGUgc2NlbmUsIGxlYXZlIHRoZSBvdGhlcnMgY29tbWVudGVkIG91dFxyXG4vLyB3aGVuIHN3aXRjaGluZyBiZXR3ZWVuIHNjZW5lcywgdW5jb21tZW50IGFsbCBwYXJ0aWNpcGFudHNcclxuXHJcbi8vZGVidWcucXVpdCA9IG9uUXVpdFxyXG4vL3RleHQucXVpdCA9IG9uUXVpdFxyXG4vL3NwbGl0LnF1aXQgPSBvblF1aXRcclxuLy9wYWwucXVpdCA9IG9uUXVpdFxyXG5yYW5nZXIucXVpdCA9IG9uUXVpdFxyXG5cclxuc3RhcnQoc2NlbmVzW3NjZW5lSW5kZXhdWzBdKS5jYXRjaChjb25zb2xlLmVycm9yKVxyXG4iXX0=