import { debugScene } from './scenes/debug-scene.js';
import { start } from './lib/engine.js';
import { textSandboxScene } from './scenes/text-sandbox-scene.js';
import { splitScene } from './scenes/split-scene.js';
import { paletteSandboxScene } from './scenes/palette-scene.js';
import { rangerScene } from './scenes/ranger/scene.js';
import { voxelScene } from './scenes/voxel-scene.js';
import { hslScene } from './scenes/hsl-scene.js';
import { carScene } from './scenes/car-scene.js';
const debug = debugScene();
const text = textSandboxScene();
const split = splitScene(text, debug);
const pal = paletteSandboxScene();
const ranger = rangerScene();
const voxel = voxelScene();
const hsl = hslScene();
const car = carScene();
const { quit: debugQuit } = debug;
const { quit: textQuit } = text;
const { quit: splitQuit } = split;
const { quit: palQuit } = pal;
const { quit: rangerQuit } = ranger;
const { quit: voxelQuit } = voxel;
const { quit: hslQuit } = hsl;
const { quit: carQuit } = car;
// use this for switching between full screen exclusive scenes:
// const scenes = [
//   [text, textQuit],
//   [debug, debugQuit],  
//   [pal, palQuit]
// ] as const
// or this for split screen scenes:
// const scenes = [
//   [split, splitQuit]
// ] as const
// or this for a single scene:
const scenes = [
    //[ranger, rangerQuit]
    //[pal, palQuit]
    //[ voxel, voxelQuit ]
    //[hsl, hslQuit]
    [car, carQuit]
];
let sceneIndex = 0;
const onQuit = async (state) => {
    let sceneData = scenes[sceneIndex];
    const baseQuit = sceneData[1];
    await baseQuit(state);
    sceneIndex++;
    if (sceneIndex >= scenes.length) {
        sceneIndex = 0;
    }
    sceneData = scenes[sceneIndex];
    if (scenes.length > 1) {
        console.log('Switching to scene', sceneIndex);
    }
    else {
        console.log('Restarting scene');
    }
    start(sceneData[0]).catch(console.error);
};
// when using split, leave all except split commented out
// when using a single scene, leave the others commented out
// when switching between scenes, uncomment all participants
//debug.quit = onQuit
//text.quit = onQuit
//split.quit = onQuit
//pal.quit = onQuit
//ranger.quit = onQuit
//voxel.quit = onQuit
//hsl.quit = onQuit
car.quit = onQuit;
start(scenes[sceneIndex][0]).catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUVqRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDaEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBRWhELE1BQU0sS0FBSyxHQUFHLFVBQVUsRUFBRSxDQUFBO0FBQzFCLE1BQU0sSUFBSSxHQUFHLGdCQUFnQixFQUFFLENBQUE7QUFDL0IsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUNyQyxNQUFNLEdBQUcsR0FBRyxtQkFBbUIsRUFBRSxDQUFBO0FBQ2pDLE1BQU0sTUFBTSxHQUFHLFdBQVcsRUFBRSxDQUFBO0FBQzVCLE1BQU0sS0FBSyxHQUFHLFVBQVUsRUFBRSxDQUFBO0FBQzFCLE1BQU0sR0FBRyxHQUFHLFFBQVEsRUFBRSxDQUFBO0FBQ3RCLE1BQU0sR0FBRyxHQUFHLFFBQVEsRUFBRSxDQUFBO0FBRXRCLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFBO0FBQ2pDLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFBO0FBQy9CLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFBO0FBQ2pDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsR0FBRyxDQUFBO0FBQzdCLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsTUFBTSxDQUFBO0FBQ25DLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFBO0FBQ2pDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsR0FBRyxDQUFBO0FBQzdCLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsR0FBRyxDQUFBO0FBRTdCLCtEQUErRDtBQUMvRCxtQkFBbUI7QUFDbkIsc0JBQXNCO0FBQ3RCLDBCQUEwQjtBQUMxQixtQkFBbUI7QUFDbkIsYUFBYTtBQUViLG1DQUFtQztBQUNuQyxtQkFBbUI7QUFDbkIsdUJBQXVCO0FBQ3ZCLGFBQWE7QUFFYiw4QkFBOEI7QUFDOUIsTUFBTSxNQUFNLEdBQUc7SUFDYixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLHNCQUFzQjtJQUN0QixnQkFBZ0I7SUFDaEIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDO0NBQ04sQ0FBQTtBQUVWLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQTtBQUVsQixNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLEVBQUU7SUFDcEMsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBRWxDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUU3QixNQUFNLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVyQixVQUFVLEVBQUUsQ0FBQTtJQUVaLElBQUksVUFBVSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxVQUFVLEdBQUcsQ0FBQyxDQUFBO0lBQ2hCLENBQUM7SUFFRCxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBRTlCLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQy9DLENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFHRCxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMxQyxDQUFDLENBQUE7QUFFRCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDREQUE0RDtBQUU1RCxxQkFBcUI7QUFDckIsb0JBQW9CO0FBQ3BCLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkIsc0JBQXNCO0FBQ3RCLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkIsR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUE7QUFFakIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWJ1Z1NjZW5lIH0gZnJvbSAnLi9zY2VuZXMvZGVidWctc2NlbmUuanMnXHJcbmltcG9ydCB7IHN0YXJ0IH0gZnJvbSAnLi9saWIvZW5naW5lLmpzJ1xyXG5pbXBvcnQgeyB0ZXh0U2FuZGJveFNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvdGV4dC1zYW5kYm94LXNjZW5lLmpzJ1xyXG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vbGliL3R5cGVzLmpzJ1xyXG5pbXBvcnQgeyBzcGxpdFNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvc3BsaXQtc2NlbmUuanMnXHJcbmltcG9ydCB7IHBhbGV0dGVTYW5kYm94U2NlbmUgfSBmcm9tICcuL3NjZW5lcy9wYWxldHRlLXNjZW5lLmpzJ1xyXG5pbXBvcnQgeyByYW5nZXJTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3Jhbmdlci9zY2VuZS5qcydcclxuaW1wb3J0IHsgdm94ZWxTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3ZveGVsLXNjZW5lLmpzJ1xyXG5pbXBvcnQgeyBoc2xTY2VuZSB9IGZyb20gJy4vc2NlbmVzL2hzbC1zY2VuZS5qcydcclxuaW1wb3J0IHsgY2FyU2NlbmUgfSBmcm9tICcuL3NjZW5lcy9jYXItc2NlbmUuanMnXHJcblxyXG5jb25zdCBkZWJ1ZyA9IGRlYnVnU2NlbmUoKVxyXG5jb25zdCB0ZXh0ID0gdGV4dFNhbmRib3hTY2VuZSgpXHJcbmNvbnN0IHNwbGl0ID0gc3BsaXRTY2VuZSh0ZXh0LCBkZWJ1ZylcclxuY29uc3QgcGFsID0gcGFsZXR0ZVNhbmRib3hTY2VuZSgpXHJcbmNvbnN0IHJhbmdlciA9IHJhbmdlclNjZW5lKClcclxuY29uc3Qgdm94ZWwgPSB2b3hlbFNjZW5lKClcclxuY29uc3QgaHNsID0gaHNsU2NlbmUoKVxyXG5jb25zdCBjYXIgPSBjYXJTY2VuZSgpXHJcblxyXG5jb25zdCB7IHF1aXQ6IGRlYnVnUXVpdCB9ID0gZGVidWdcclxuY29uc3QgeyBxdWl0OiB0ZXh0UXVpdCB9ID0gdGV4dFxyXG5jb25zdCB7IHF1aXQ6IHNwbGl0UXVpdCB9ID0gc3BsaXRcclxuY29uc3QgeyBxdWl0OiBwYWxRdWl0IH0gPSBwYWxcclxuY29uc3QgeyBxdWl0OiByYW5nZXJRdWl0IH0gPSByYW5nZXJcclxuY29uc3QgeyBxdWl0OiB2b3hlbFF1aXQgfSA9IHZveGVsXHJcbmNvbnN0IHsgcXVpdDogaHNsUXVpdCB9ID0gaHNsXHJcbmNvbnN0IHsgcXVpdDogY2FyUXVpdCB9ID0gY2FyXHJcblxyXG4vLyB1c2UgdGhpcyBmb3Igc3dpdGNoaW5nIGJldHdlZW4gZnVsbCBzY3JlZW4gZXhjbHVzaXZlIHNjZW5lczpcclxuLy8gY29uc3Qgc2NlbmVzID0gW1xyXG4vLyAgIFt0ZXh0LCB0ZXh0UXVpdF0sXHJcbi8vICAgW2RlYnVnLCBkZWJ1Z1F1aXRdLCAgXHJcbi8vICAgW3BhbCwgcGFsUXVpdF1cclxuLy8gXSBhcyBjb25zdFxyXG5cclxuLy8gb3IgdGhpcyBmb3Igc3BsaXQgc2NyZWVuIHNjZW5lczpcclxuLy8gY29uc3Qgc2NlbmVzID0gW1xyXG4vLyAgIFtzcGxpdCwgc3BsaXRRdWl0XVxyXG4vLyBdIGFzIGNvbnN0XHJcblxyXG4vLyBvciB0aGlzIGZvciBhIHNpbmdsZSBzY2VuZTpcclxuY29uc3Qgc2NlbmVzID0gW1xyXG4gIC8vW3JhbmdlciwgcmFuZ2VyUXVpdF1cclxuICAvL1twYWwsIHBhbFF1aXRdXHJcbiAgLy9bIHZveGVsLCB2b3hlbFF1aXQgXVxyXG4gIC8vW2hzbCwgaHNsUXVpdF1cclxuICBbY2FyLCBjYXJRdWl0XVxyXG5dIGFzIGNvbnN0XHJcblxyXG5sZXQgc2NlbmVJbmRleCA9IDBcclxuXHJcbmNvbnN0IG9uUXVpdCA9IGFzeW5jIChzdGF0ZTogU3RhdGUpID0+IHtcclxuICBsZXQgc2NlbmVEYXRhID0gc2NlbmVzW3NjZW5lSW5kZXhdXHJcblxyXG4gIGNvbnN0IGJhc2VRdWl0ID0gc2NlbmVEYXRhWzFdXHJcblxyXG4gIGF3YWl0IGJhc2VRdWl0KHN0YXRlKVxyXG5cclxuICBzY2VuZUluZGV4KytcclxuXHJcbiAgaWYgKHNjZW5lSW5kZXggPj0gc2NlbmVzLmxlbmd0aCkge1xyXG4gICAgc2NlbmVJbmRleCA9IDBcclxuICB9XHJcblxyXG4gIHNjZW5lRGF0YSA9IHNjZW5lc1tzY2VuZUluZGV4XVxyXG5cclxuICBpZiAoc2NlbmVzLmxlbmd0aCA+IDEpIHtcclxuICAgIGNvbnNvbGUubG9nKCdTd2l0Y2hpbmcgdG8gc2NlbmUnLCBzY2VuZUluZGV4KVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZygnUmVzdGFydGluZyBzY2VuZScpXHJcbiAgfVxyXG5cclxuXHJcbiAgc3RhcnQoc2NlbmVEYXRhWzBdKS5jYXRjaChjb25zb2xlLmVycm9yKVxyXG59XHJcblxyXG4vLyB3aGVuIHVzaW5nIHNwbGl0LCBsZWF2ZSBhbGwgZXhjZXB0IHNwbGl0IGNvbW1lbnRlZCBvdXRcclxuLy8gd2hlbiB1c2luZyBhIHNpbmdsZSBzY2VuZSwgbGVhdmUgdGhlIG90aGVycyBjb21tZW50ZWQgb3V0XHJcbi8vIHdoZW4gc3dpdGNoaW5nIGJldHdlZW4gc2NlbmVzLCB1bmNvbW1lbnQgYWxsIHBhcnRpY2lwYW50c1xyXG5cclxuLy9kZWJ1Zy5xdWl0ID0gb25RdWl0XHJcbi8vdGV4dC5xdWl0ID0gb25RdWl0XHJcbi8vc3BsaXQucXVpdCA9IG9uUXVpdFxyXG4vL3BhbC5xdWl0ID0gb25RdWl0XHJcbi8vcmFuZ2VyLnF1aXQgPSBvblF1aXRcclxuLy92b3hlbC5xdWl0ID0gb25RdWl0XHJcbi8vaHNsLnF1aXQgPSBvblF1aXRcclxuY2FyLnF1aXQgPSBvblF1aXRcclxuXHJcbnN0YXJ0KHNjZW5lc1tzY2VuZUluZGV4XVswXSkuY2F0Y2goY29uc29sZS5lcnJvcilcclxuIl19