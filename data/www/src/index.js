import { debugScene } from './scenes/debug-scene.js';
import { start } from './lib/engine.js';
import { textSandboxScene } from './scenes/text-sandbox-scene.js';
import { splitScene } from './scenes/split-scene.js';
import { paletteSandboxScene } from './scenes/palette-scene.js';
import { rangerScene } from './scenes/ranger/scene.js';
import { voxelScene } from './scenes/voxel-scene.js';
const debug = debugScene();
const text = textSandboxScene();
const split = splitScene(text, debug);
const pal = paletteSandboxScene();
const ranger = rangerScene();
const voxel = voxelScene();
const { quit: debugQuit } = debug;
const { quit: textQuit } = text;
const { quit: splitQuit } = split;
const { quit: palQuit } = pal;
const { quit: rangerQuit } = ranger;
const { quit: voxelQuit } = voxel;
// use this for switching between full screen exclusive scenes:
// const scenes = [
//   [text, textQuit],
//   [debug, debugQuit],  
//   [pal, palQuit]
// ] as const
// or this for split screen scenes:
// const scenes = [
//   [split, splitQuit]
// ] as const
// or this for a single scene:
const scenes = [
    //[ranger, rangerQuit]
    //[pal, palQuit]
    [voxel, voxelQuit]
];
let sceneIndex = 0;
const onQuit = async (state) => {
    let sceneData = scenes[sceneIndex];
    const baseQuit = sceneData[1];
    await baseQuit(state);
    sceneIndex++;
    if (sceneIndex >= scenes.length) {
        sceneIndex = 0;
    }
    sceneData = scenes[sceneIndex];
    if (scenes.length > 1) {
        console.log('Switching to scene', sceneIndex);
    }
    else {
        console.log('Restarting scene');
    }
    start(sceneData[0]).catch(console.error);
};
// when using split, leave all except split commented out
// when using a single scene, leave the others commented out
// when switching between scenes, uncomment all participants
//debug.quit = onQuit
//text.quit = onQuit
//split.quit = onQuit
//pal.quit = onQuit
//ranger.quit = onQuit
voxel.quit = onQuit;
start(scenes[sceneIndex][0]).catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUVqRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUVwRCxNQUFNLEtBQUssR0FBRyxVQUFVLEVBQUUsQ0FBQTtBQUMxQixNQUFNLElBQUksR0FBRyxnQkFBZ0IsRUFBRSxDQUFBO0FBQy9CLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDckMsTUFBTSxHQUFHLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQTtBQUNqQyxNQUFNLE1BQU0sR0FBRyxXQUFXLEVBQUUsQ0FBQTtBQUM1QixNQUFNLEtBQUssR0FBRyxVQUFVLEVBQUUsQ0FBQTtBQUUxQixNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQTtBQUNqQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQTtBQUMvQixNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQTtBQUNqQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQTtBQUM3QixNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQTtBQUNuQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQTtBQUVqQywrREFBK0Q7QUFDL0QsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QiwwQkFBMEI7QUFDMUIsbUJBQW1CO0FBQ25CLGFBQWE7QUFFYixtQ0FBbUM7QUFDbkMsbUJBQW1CO0FBQ25CLHVCQUF1QjtBQUN2QixhQUFhO0FBRWIsOEJBQThCO0FBQzlCLE1BQU0sTUFBTSxHQUFHO0lBQ2Isc0JBQXNCO0lBQ3RCLGdCQUFnQjtJQUNoQixDQUFFLEtBQUssRUFBRSxTQUFTLENBQUU7Q0FDWixDQUFBO0FBRVYsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFBO0FBRWxCLE1BQU0sTUFBTSxHQUFHLEtBQUssRUFBRSxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFbEMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTdCLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXJCLFVBQVUsRUFBRSxDQUFBO0lBRVosSUFBSSxVQUFVLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLFVBQVUsR0FBRyxDQUFDLENBQUE7SUFDaEIsQ0FBQztJQUVELFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFOUIsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFDL0MsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFDakMsQ0FBQztJQUdELEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzFDLENBQUMsQ0FBQTtBQUVELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsNERBQTREO0FBRTVELHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUE7QUFFbkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWJ1Z1NjZW5lIH0gZnJvbSAnLi9zY2VuZXMvZGVidWctc2NlbmUuanMnXHJcbmltcG9ydCB7IHN0YXJ0IH0gZnJvbSAnLi9saWIvZW5naW5lLmpzJ1xyXG5pbXBvcnQgeyB0ZXh0U2FuZGJveFNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvdGV4dC1zYW5kYm94LXNjZW5lLmpzJ1xyXG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vbGliL3R5cGVzLmpzJ1xyXG5pbXBvcnQgeyBzcGxpdFNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvc3BsaXQtc2NlbmUuanMnXHJcbmltcG9ydCB7IHBhbGV0dGVTYW5kYm94U2NlbmUgfSBmcm9tICcuL3NjZW5lcy9wYWxldHRlLXNjZW5lLmpzJ1xyXG5pbXBvcnQgeyByYW5nZXJTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3Jhbmdlci9zY2VuZS5qcydcclxuaW1wb3J0IHsgdm94ZWxTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3ZveGVsLXNjZW5lLmpzJ1xyXG5cclxuY29uc3QgZGVidWcgPSBkZWJ1Z1NjZW5lKClcclxuY29uc3QgdGV4dCA9IHRleHRTYW5kYm94U2NlbmUoKVxyXG5jb25zdCBzcGxpdCA9IHNwbGl0U2NlbmUodGV4dCwgZGVidWcpXHJcbmNvbnN0IHBhbCA9IHBhbGV0dGVTYW5kYm94U2NlbmUoKVxyXG5jb25zdCByYW5nZXIgPSByYW5nZXJTY2VuZSgpXHJcbmNvbnN0IHZveGVsID0gdm94ZWxTY2VuZSgpXHJcblxyXG5jb25zdCB7IHF1aXQ6IGRlYnVnUXVpdCB9ID0gZGVidWdcclxuY29uc3QgeyBxdWl0OiB0ZXh0UXVpdCB9ID0gdGV4dFxyXG5jb25zdCB7IHF1aXQ6IHNwbGl0UXVpdCB9ID0gc3BsaXRcclxuY29uc3QgeyBxdWl0OiBwYWxRdWl0IH0gPSBwYWxcclxuY29uc3QgeyBxdWl0OiByYW5nZXJRdWl0IH0gPSByYW5nZXJcclxuY29uc3QgeyBxdWl0OiB2b3hlbFF1aXQgfSA9IHZveGVsXHJcblxyXG4vLyB1c2UgdGhpcyBmb3Igc3dpdGNoaW5nIGJldHdlZW4gZnVsbCBzY3JlZW4gZXhjbHVzaXZlIHNjZW5lczpcclxuLy8gY29uc3Qgc2NlbmVzID0gW1xyXG4vLyAgIFt0ZXh0LCB0ZXh0UXVpdF0sXHJcbi8vICAgW2RlYnVnLCBkZWJ1Z1F1aXRdLCAgXHJcbi8vICAgW3BhbCwgcGFsUXVpdF1cclxuLy8gXSBhcyBjb25zdFxyXG5cclxuLy8gb3IgdGhpcyBmb3Igc3BsaXQgc2NyZWVuIHNjZW5lczpcclxuLy8gY29uc3Qgc2NlbmVzID0gW1xyXG4vLyAgIFtzcGxpdCwgc3BsaXRRdWl0XVxyXG4vLyBdIGFzIGNvbnN0XHJcblxyXG4vLyBvciB0aGlzIGZvciBhIHNpbmdsZSBzY2VuZTpcclxuY29uc3Qgc2NlbmVzID0gW1xyXG4gIC8vW3JhbmdlciwgcmFuZ2VyUXVpdF1cclxuICAvL1twYWwsIHBhbFF1aXRdXHJcbiAgWyB2b3hlbCwgdm94ZWxRdWl0IF1cclxuXSBhcyBjb25zdFxyXG5cclxubGV0IHNjZW5lSW5kZXggPSAwXHJcblxyXG5jb25zdCBvblF1aXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgbGV0IHNjZW5lRGF0YSA9IHNjZW5lc1tzY2VuZUluZGV4XVxyXG5cclxuICBjb25zdCBiYXNlUXVpdCA9IHNjZW5lRGF0YVsxXVxyXG5cclxuICBhd2FpdCBiYXNlUXVpdChzdGF0ZSlcclxuXHJcbiAgc2NlbmVJbmRleCsrXHJcblxyXG4gIGlmIChzY2VuZUluZGV4ID49IHNjZW5lcy5sZW5ndGgpIHtcclxuICAgIHNjZW5lSW5kZXggPSAwXHJcbiAgfVxyXG5cclxuICBzY2VuZURhdGEgPSBzY2VuZXNbc2NlbmVJbmRleF1cclxuXHJcbiAgaWYgKHNjZW5lcy5sZW5ndGggPiAxKSB7XHJcbiAgICBjb25zb2xlLmxvZygnU3dpdGNoaW5nIHRvIHNjZW5lJywgc2NlbmVJbmRleClcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coJ1Jlc3RhcnRpbmcgc2NlbmUnKVxyXG4gIH1cclxuXHJcblxyXG4gIHN0YXJ0KHNjZW5lRGF0YVswXSkuY2F0Y2goY29uc29sZS5lcnJvcilcclxufVxyXG5cclxuLy8gd2hlbiB1c2luZyBzcGxpdCwgbGVhdmUgYWxsIGV4Y2VwdCBzcGxpdCBjb21tZW50ZWQgb3V0XHJcbi8vIHdoZW4gdXNpbmcgYSBzaW5nbGUgc2NlbmUsIGxlYXZlIHRoZSBvdGhlcnMgY29tbWVudGVkIG91dFxyXG4vLyB3aGVuIHN3aXRjaGluZyBiZXR3ZWVuIHNjZW5lcywgdW5jb21tZW50IGFsbCBwYXJ0aWNpcGFudHNcclxuXHJcbi8vZGVidWcucXVpdCA9IG9uUXVpdFxyXG4vL3RleHQucXVpdCA9IG9uUXVpdFxyXG4vL3NwbGl0LnF1aXQgPSBvblF1aXRcclxuLy9wYWwucXVpdCA9IG9uUXVpdFxyXG4vL3Jhbmdlci5xdWl0ID0gb25RdWl0XHJcbnZveGVsLnF1aXQgPSBvblF1aXRcclxuXHJcbnN0YXJ0KHNjZW5lc1tzY2VuZUluZGV4XVswXSkuY2F0Y2goY29uc29sZS5lcnJvcilcclxuIl19