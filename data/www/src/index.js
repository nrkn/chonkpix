import { debugScene } from './scenes/debug-scene.js';
import { start } from './lib/engine.js';
import { textSandboxScene } from './scenes/text-sandbox-scene.js';
import { splitScene } from './scenes/split-scene.js';
import { paletteSandboxScene } from './scenes/palette-scene.js';
let isSwitchBetweenScenes = false;
const debug = debugScene();
const text = textSandboxScene();
const split = splitScene(text, debug);
const pal = paletteSandboxScene();
const { quit: debugQuit } = debug;
const { quit: textQuit } = text;
const { quit: splitQuit } = split;
const { quit: palQuit } = pal;
// use this for switching between full screen exclusive scenes:
// const scenes = [
//   [debug, debugQuit],
//   [text, textQuit]
// ] as const
// or this for split screen scenes:
// const scenes = [
//   [split, splitQuit]
// ] as const
const scenes = [
    [pal, palQuit]
];
let sceneIndex = 0;
const onQuit = async (state) => {
    let sceneData = scenes[sceneIndex];
    const baseQuit = sceneData[1];
    await baseQuit(state);
    if (isSwitchBetweenScenes) {
        sceneIndex++;
        if (sceneIndex >= scenes.length) {
            sceneIndex = 0;
        }
        sceneData = scenes[sceneIndex];
        console.log('Switching to scene', sceneIndex);
    }
    else {
        console.log('Restarting current scene');
    }
    start(sceneData[0]).catch(console.error);
};
//debug.quit = onQuit
//text.quit = onQuit
//split.quit = onQuit
pal.quit = onQuit;
start(scenes[sceneIndex][0]).catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUVqRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFFL0QsSUFBSSxxQkFBcUIsR0FBRyxLQUFLLENBQUE7QUFFakMsTUFBTSxLQUFLLEdBQUcsVUFBVSxFQUFFLENBQUE7QUFDMUIsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQTtBQUMvQixNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3BDLE1BQU0sR0FBRyxHQUFHLG1CQUFtQixFQUFFLENBQUE7QUFFakMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUE7QUFDakMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUE7QUFDL0IsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUE7QUFDakMsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUE7QUFFN0IsK0RBQStEO0FBQy9ELG1CQUFtQjtBQUNuQix3QkFBd0I7QUFDeEIscUJBQXFCO0FBQ3JCLGFBQWE7QUFFYixtQ0FBbUM7QUFDbkMsbUJBQW1CO0FBQ25CLHVCQUF1QjtBQUN2QixhQUFhO0FBRWIsTUFBTSxNQUFNLEdBQUc7SUFDYixDQUFFLEdBQUcsRUFBRSxPQUFPLENBQUU7Q0FDUixDQUFBO0FBRVYsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFBO0FBRWxCLE1BQU0sTUFBTSxHQUFHLEtBQUssRUFBRSxLQUFZLEVBQUUsRUFBRTtJQUNwQyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFbEMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRTdCLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXJCLElBQUkscUJBQXFCLEVBQUUsQ0FBQztRQUMxQixVQUFVLEVBQUUsQ0FBQTtRQUVaLElBQUksVUFBVSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNoQyxVQUFVLEdBQUcsQ0FBQyxDQUFBO1FBQ2hCLENBQUM7UUFFRCxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRTlCLE9BQU8sQ0FBQyxHQUFHLENBQUUsb0JBQW9CLEVBQUUsVUFBVSxDQUFFLENBQUE7SUFDakQsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFFLDBCQUEwQixDQUFDLENBQUE7SUFDMUMsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzFDLENBQUMsQ0FBQTtBQUVELHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIscUJBQXFCO0FBQ3JCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFBO0FBRWpCLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVidWdTY2VuZSB9IGZyb20gJy4vc2NlbmVzL2RlYnVnLXNjZW5lLmpzJ1xyXG5pbXBvcnQgeyBzdGFydCB9IGZyb20gJy4vbGliL2VuZ2luZS5qcydcclxuaW1wb3J0IHsgdGV4dFNhbmRib3hTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3RleHQtc2FuZGJveC1zY2VuZS5qcydcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL2xpYi90eXBlcy5qcydcclxuaW1wb3J0IHsgc3BsaXRTY2VuZSB9IGZyb20gJy4vc2NlbmVzL3NwbGl0LXNjZW5lLmpzJ1xyXG5pbXBvcnQgeyBwYWxldHRlU2FuZGJveFNjZW5lIH0gZnJvbSAnLi9zY2VuZXMvcGFsZXR0ZS1zY2VuZS5qcydcclxuXHJcbmxldCBpc1N3aXRjaEJldHdlZW5TY2VuZXMgPSBmYWxzZVxyXG5cclxuY29uc3QgZGVidWcgPSBkZWJ1Z1NjZW5lKClcclxuY29uc3QgdGV4dCA9IHRleHRTYW5kYm94U2NlbmUoKVxyXG5jb25zdCBzcGxpdCA9IHNwbGl0U2NlbmUodGV4dCxkZWJ1ZylcclxuY29uc3QgcGFsID0gcGFsZXR0ZVNhbmRib3hTY2VuZSgpXHJcblxyXG5jb25zdCB7IHF1aXQ6IGRlYnVnUXVpdCB9ID0gZGVidWdcclxuY29uc3QgeyBxdWl0OiB0ZXh0UXVpdCB9ID0gdGV4dFxyXG5jb25zdCB7IHF1aXQ6IHNwbGl0UXVpdCB9ID0gc3BsaXRcclxuY29uc3QgeyBxdWl0OiBwYWxRdWl0IH0gPSBwYWxcclxuXHJcbi8vIHVzZSB0aGlzIGZvciBzd2l0Y2hpbmcgYmV0d2VlbiBmdWxsIHNjcmVlbiBleGNsdXNpdmUgc2NlbmVzOlxyXG4vLyBjb25zdCBzY2VuZXMgPSBbXHJcbi8vICAgW2RlYnVnLCBkZWJ1Z1F1aXRdLFxyXG4vLyAgIFt0ZXh0LCB0ZXh0UXVpdF1cclxuLy8gXSBhcyBjb25zdFxyXG5cclxuLy8gb3IgdGhpcyBmb3Igc3BsaXQgc2NyZWVuIHNjZW5lczpcclxuLy8gY29uc3Qgc2NlbmVzID0gW1xyXG4vLyAgIFtzcGxpdCwgc3BsaXRRdWl0XVxyXG4vLyBdIGFzIGNvbnN0XHJcblxyXG5jb25zdCBzY2VuZXMgPSBbXHJcbiAgWyBwYWwsIHBhbFF1aXQgXVxyXG5dIGFzIGNvbnN0XHJcbiBcclxubGV0IHNjZW5lSW5kZXggPSAwXHJcblxyXG5jb25zdCBvblF1aXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgbGV0IHNjZW5lRGF0YSA9IHNjZW5lc1tzY2VuZUluZGV4XVxyXG5cclxuICBjb25zdCBiYXNlUXVpdCA9IHNjZW5lRGF0YVsxXVxyXG5cclxuICBhd2FpdCBiYXNlUXVpdChzdGF0ZSlcclxuXHJcbiAgaWYoIGlzU3dpdGNoQmV0d2VlblNjZW5lcyApe1xyXG4gICAgc2NlbmVJbmRleCsrXHJcblxyXG4gICAgaWYgKHNjZW5lSW5kZXggPj0gc2NlbmVzLmxlbmd0aCkge1xyXG4gICAgICBzY2VuZUluZGV4ID0gMFxyXG4gICAgfVxyXG4gIFxyXG4gICAgc2NlbmVEYXRhID0gc2NlbmVzW3NjZW5lSW5kZXhdXHJcblxyXG4gICAgY29uc29sZS5sb2coICdTd2l0Y2hpbmcgdG8gc2NlbmUnLCBzY2VuZUluZGV4IClcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coICdSZXN0YXJ0aW5nIGN1cnJlbnQgc2NlbmUnKVxyXG4gIH1cclxuXHJcbiAgc3RhcnQoc2NlbmVEYXRhWzBdKS5jYXRjaChjb25zb2xlLmVycm9yKVxyXG59XHJcblxyXG4vL2RlYnVnLnF1aXQgPSBvblF1aXRcclxuLy90ZXh0LnF1aXQgPSBvblF1aXRcclxuLy9zcGxpdC5xdWl0ID0gb25RdWl0XHJcbnBhbC5xdWl0ID0gb25RdWl0XHJcblxyXG5zdGFydChzY2VuZXNbc2NlbmVJbmRleF1bMF0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpXHJcbiJdfQ==