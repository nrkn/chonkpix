export const rangerIo = (state, deps, fs) => {
    const keys = state.getKeys();
    if (keys['Escape']) {
        state.setRunning(false);
        // consume the key
        keys['Escape'] = false;
        return;
    }
    const wheel = state.mouse.takeWheel();
    const zoom = state.view.getZoom();
    if (wheel < 0) {
        state.view.setZoom(zoom + 1);
        fs.lastW = 0;
        fs.lastH = 0;
    }
    else if (wheel > 0) {
        state.view.setZoom(zoom - 1);
        fs.lastW = 0;
        fs.lastH = 0;
    }
    const presses = state.getKeyPresses();
    for (const key of presses) {
        let ocx = fs.cameraX;
        let ocy = fs.cameraY;
        const isLeft = key.toLowerCase() === 'a' || key === 'ArrowLeft';
        const isRight = key.toLowerCase() === 'd' || key === 'ArrowRight';
        const isUp = key.toLowerCase() === 'w' || key === 'ArrowUp';
        const isDown = key.toLowerCase() === 's' || key === 'ArrowDown';
        if (isUp && fs.cameraY > 0) {
            fs.cameraY--;
        }
        if (isDown && fs.cameraY < deps.tileMap.height - 1) {
            fs.cameraY++;
        }
        if (isLeft && fs.cameraX > 0) {
            fs.cameraX--;
        }
        if (isRight && fs.cameraX < deps.tileMap.width - 1) {
            fs.cameraX++;
        }
        // change facing even if blocked/oob
        fs.facing = isLeft ? 'left' : isRight ? 'right' : fs.facing;
        // check blocking
        const cameraTile = deps.tileMap.data[fs.cameraY * deps.tileMap.width + fs.cameraX];
        if (deps.blocking.has(cameraTile)) {
            fs.cameraX = ocx;
            fs.cameraY = ocy;
        }
    }
    // consume all key presses
    presses.length = 0;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmVzL3Jhbmdlci9pby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFZLEVBQUUsSUFBZ0IsRUFBRSxFQUFlLEVBQUUsRUFBRTtJQUMxRSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7SUFFNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUNuQixLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRXZCLGtCQUFrQjtRQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFBO1FBRXRCLE9BQU07SUFDUixDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUNyQyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBRWpDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQzVCLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBO1FBQ1osRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7SUFDZCxDQUFDO1NBQU0sSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDckIsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQzVCLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBO1FBQ1osRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7SUFDZCxDQUFDO0lBRUQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBRXJDLEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDMUIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQTtRQUNwQixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFBO1FBRXBCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLFdBQVcsQ0FBQTtRQUMvRCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxZQUFZLENBQUE7UUFDakUsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssU0FBUyxDQUFBO1FBQzNELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLFdBQVcsQ0FBQTtRQUUvRCxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzNCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNkLENBQUM7UUFDRCxJQUFJLE1BQU0sSUFBSSxFQUFFLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ25ELEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNkLENBQUM7UUFFRCxJQUFJLE1BQU0sSUFBSSxFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzdCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNkLENBQUM7UUFDRCxJQUFJLE9BQU8sSUFBSSxFQUFFLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ25ELEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNkLENBQUM7UUFFRCxvQ0FBb0M7UUFDcEMsRUFBRSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUE7UUFFM0QsaUJBQWlCO1FBQ2pCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNsQyxFQUFFLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQzdDLENBQUE7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDbEMsRUFBRSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUE7WUFDaEIsRUFBRSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUE7UUFDbEIsQ0FBQztJQUNILENBQUM7SUFFRCwwQkFBMEI7SUFDMUIsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7QUFDcEIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuLi8uLi9saWIvdHlwZXMuanMnXHJcbmltcG9ydCB7IFJhbmdlckRlcHMsIFJhbmdlclN0YXRlIH0gZnJvbSAnLi90eXBlcy5qcydcclxuXHJcbmV4cG9ydCBjb25zdCByYW5nZXJJbyA9IChzdGF0ZTogU3RhdGUsIGRlcHM6IFJhbmdlckRlcHMsIGZzOiBSYW5nZXJTdGF0ZSkgPT4ge1xyXG4gIGNvbnN0IGtleXMgPSBzdGF0ZS5nZXRLZXlzKClcclxuXHJcbiAgaWYgKGtleXNbJ0VzY2FwZSddKSB7XHJcbiAgICBzdGF0ZS5zZXRSdW5uaW5nKGZhbHNlKVxyXG5cclxuICAgIC8vIGNvbnN1bWUgdGhlIGtleVxyXG4gICAga2V5c1snRXNjYXBlJ10gPSBmYWxzZVxyXG5cclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgY29uc3Qgd2hlZWwgPSBzdGF0ZS5tb3VzZS50YWtlV2hlZWwoKVxyXG4gIGNvbnN0IHpvb20gPSBzdGF0ZS52aWV3LmdldFpvb20oKVxyXG5cclxuICBpZiAod2hlZWwgPCAwKSB7XHJcbiAgICBzdGF0ZS52aWV3LnNldFpvb20oem9vbSArIDEpXHJcbiAgICBmcy5sYXN0VyA9IDBcclxuICAgIGZzLmxhc3RIID0gMFxyXG4gIH0gZWxzZSBpZiAod2hlZWwgPiAwKSB7XHJcbiAgICBzdGF0ZS52aWV3LnNldFpvb20oem9vbSAtIDEpXHJcbiAgICBmcy5sYXN0VyA9IDBcclxuICAgIGZzLmxhc3RIID0gMFxyXG4gIH1cclxuXHJcbiAgY29uc3QgcHJlc3NlcyA9IHN0YXRlLmdldEtleVByZXNzZXMoKVxyXG5cclxuICBmb3IgKGNvbnN0IGtleSBvZiBwcmVzc2VzKSB7XHJcbiAgICBsZXQgb2N4ID0gZnMuY2FtZXJhWFxyXG4gICAgbGV0IG9jeSA9IGZzLmNhbWVyYVlcclxuXHJcbiAgICBjb25zdCBpc0xlZnQgPSBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2EnIHx8IGtleSA9PT0gJ0Fycm93TGVmdCdcclxuICAgIGNvbnN0IGlzUmlnaHQgPSBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2QnIHx8IGtleSA9PT0gJ0Fycm93UmlnaHQnXHJcbiAgICBjb25zdCBpc1VwID0ga2V5LnRvTG93ZXJDYXNlKCkgPT09ICd3JyB8fCBrZXkgPT09ICdBcnJvd1VwJ1xyXG4gICAgY29uc3QgaXNEb3duID0ga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdzJyB8fCBrZXkgPT09ICdBcnJvd0Rvd24nXHJcblxyXG4gICAgaWYgKGlzVXAgJiYgZnMuY2FtZXJhWSA+IDApIHtcclxuICAgICAgZnMuY2FtZXJhWS0tXHJcbiAgICB9XHJcbiAgICBpZiAoaXNEb3duICYmIGZzLmNhbWVyYVkgPCBkZXBzLnRpbGVNYXAuaGVpZ2h0IC0gMSkge1xyXG4gICAgICBmcy5jYW1lcmFZKytcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNMZWZ0ICYmIGZzLmNhbWVyYVggPiAwKSB7XHJcbiAgICAgIGZzLmNhbWVyYVgtLVxyXG4gICAgfVxyXG4gICAgaWYgKGlzUmlnaHQgJiYgZnMuY2FtZXJhWCA8IGRlcHMudGlsZU1hcC53aWR0aCAtIDEpIHtcclxuICAgICAgZnMuY2FtZXJhWCsrXHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2hhbmdlIGZhY2luZyBldmVuIGlmIGJsb2NrZWQvb29iXHJcbiAgICBmcy5mYWNpbmcgPSBpc0xlZnQgPyAnbGVmdCcgOiBpc1JpZ2h0ID8gJ3JpZ2h0JyA6IGZzLmZhY2luZ1xyXG5cclxuICAgIC8vIGNoZWNrIGJsb2NraW5nXHJcbiAgICBjb25zdCBjYW1lcmFUaWxlID0gZGVwcy50aWxlTWFwLmRhdGFbXHJcbiAgICAgIGZzLmNhbWVyYVkgKiBkZXBzLnRpbGVNYXAud2lkdGggKyBmcy5jYW1lcmFYXHJcbiAgICBdXHJcblxyXG4gICAgaWYgKGRlcHMuYmxvY2tpbmcuaGFzKGNhbWVyYVRpbGUpKSB7XHJcbiAgICAgIGZzLmNhbWVyYVggPSBvY3hcclxuICAgICAgZnMuY2FtZXJhWSA9IG9jeVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gY29uc3VtZSBhbGwga2V5IHByZXNzZXNcclxuICBwcmVzc2VzLmxlbmd0aCA9IDBcclxufSJdfQ==