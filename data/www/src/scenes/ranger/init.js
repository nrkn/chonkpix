import { fontImageToPoints } from '../../lib/bmpfont/layout.js';
import { loadFontMono } from '../../lib/bmpfont/load.js';
import { loadImage } from '../../lib/image/load.js';
import { animator } from '../../lib/sprites/animator.js';
import { createTileSheet } from '../../lib/sprites/index.js';
import { generateMap } from './map-gen.js';
import { tileW, tileH, tileCols, tileRows } from './tile-data.js';
export const rangerInit = async (state) => {
    const tileSheet = await loadImage('scenes/ranger/tiles.png');
    const tiles = createTileSheet(tileSheet, tileW, tileH);
    const spriteSheet = await loadImage('scenes/ranger/sprites.png');
    const sprites = createTileSheet(spriteSheet, tileW, tileH);
    const playerAnimRight = animator([[500, 0], [500, 1]]);
    const playerAnimLeft = animator([[500, 2], [500, 3]]);
    const map = generateMap(tileCols, tileRows);
    const { tileMap, blocking } = map;
    const cameraX = Math.floor(tileMap.width / 2);
    const cameraY = Math.floor(tileMap.height / 2);
    const font = await loadFontMono('EverexME_5x8');
    const fontPts = fontImageToPoints(font);
    const prevRectIndices = new Map();
    const animatedTileIndices = new Set();
    for (let y = 0; y < tileMap.height; y++) {
        for (let x = 0; x < tileMap.width; x++) {
            const i = y * tileMap.width + x;
            const cell = tileMap.data[i];
            if (typeof cell === 'function') {
                animatedTileIndices.add(i);
            }
        }
    }
    const buffer = state.view.getBuffer();
    const lastW = buffer.width;
    const lastH = buffer.height;
    const deps = {
        tiles, sprites, font, fontPts, tileMap, blocking,
        playerAnimLeft, playerAnimRight, animatedTileIndices
    };
    const fstate = {
        facing: 'right',
        cameraX, cameraY, lastW, lastH,
        moveCols: 0, moveRows: 0,
        prevRectIndices
    };
    return { deps, fstate };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZXMvcmFuZ2VyL2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBRTVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBR2pFLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLEVBQUU7SUFDL0MsTUFBTSxTQUFTLEdBQUcsTUFBTSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUU1RCxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUV0RCxNQUFNLFdBQVcsR0FBRyxNQUFNLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBRWhFLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRTFELE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN0RCxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFckQsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUUzQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQTtJQUVqQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDN0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRTlDLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQy9DLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRXZDLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFBO0lBQ2pELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQTtJQUU3QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBO1lBQy9CLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFFNUIsSUFBSSxPQUFPLElBQUksS0FBSyxVQUFVLEVBQUUsQ0FBQztnQkFDL0IsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzVCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7SUFFckMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUMxQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFBO0lBRTNCLE1BQU0sSUFBSSxHQUFlO1FBQ3ZCLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUTtRQUNoRCxjQUFjLEVBQUUsZUFBZSxFQUFFLG1CQUFtQjtLQUNyRCxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQWdCO1FBQzFCLE1BQU0sRUFBRSxPQUFPO1FBQ2YsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSztRQUM5QixRQUFRLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQ3hCLGVBQWU7S0FDaEIsQ0FBQTtJQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUE7QUFDekIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9udEltYWdlVG9Qb2ludHMgfSBmcm9tICcuLi8uLi9saWIvYm1wZm9udC9sYXlvdXQuanMnXHJcbmltcG9ydCB7IGxvYWRGb250TW9ubyB9IGZyb20gJy4uLy4uL2xpYi9ibXBmb250L2xvYWQuanMnXHJcbmltcG9ydCB7IGxvYWRJbWFnZSB9IGZyb20gJy4uLy4uL2xpYi9pbWFnZS9sb2FkLmpzJ1xyXG5pbXBvcnQgeyBhbmltYXRvciB9IGZyb20gJy4uLy4uL2xpYi9zcHJpdGVzL2FuaW1hdG9yLmpzJ1xyXG5pbXBvcnQgeyBjcmVhdGVUaWxlU2hlZXQgfSBmcm9tICcuLi8uLi9saWIvc3ByaXRlcy9pbmRleC5qcydcclxuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuLi8uLi9saWIvdHlwZXMuanMnXHJcbmltcG9ydCB7IGdlbmVyYXRlTWFwIH0gZnJvbSAnLi9tYXAtZ2VuLmpzJ1xyXG5pbXBvcnQgeyB0aWxlVywgdGlsZUgsIHRpbGVDb2xzLCB0aWxlUm93cyB9IGZyb20gJy4vdGlsZS1kYXRhLmpzJ1xyXG5pbXBvcnQgeyBSYW5nZXJEZXBzLCBSYW5nZXJTdGF0ZSB9IGZyb20gJy4vdHlwZXMuanMnXHJcblxyXG5leHBvcnQgY29uc3QgcmFuZ2VySW5pdCA9IGFzeW5jIChzdGF0ZTogU3RhdGUpID0+IHtcclxuICBjb25zdCB0aWxlU2hlZXQgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9yYW5nZXIvdGlsZXMucG5nJylcclxuXHJcbiAgY29uc3QgdGlsZXMgPSBjcmVhdGVUaWxlU2hlZXQodGlsZVNoZWV0LCB0aWxlVywgdGlsZUgpXHJcblxyXG4gIGNvbnN0IHNwcml0ZVNoZWV0ID0gYXdhaXQgbG9hZEltYWdlKCdzY2VuZXMvcmFuZ2VyL3Nwcml0ZXMucG5nJylcclxuXHJcbiAgY29uc3Qgc3ByaXRlcyA9IGNyZWF0ZVRpbGVTaGVldChzcHJpdGVTaGVldCwgdGlsZVcsIHRpbGVIKVxyXG5cclxuICBjb25zdCBwbGF5ZXJBbmltUmlnaHQgPSBhbmltYXRvcihbWzUwMCwgMF0sIFs1MDAsIDFdXSlcclxuICBjb25zdCBwbGF5ZXJBbmltTGVmdCA9IGFuaW1hdG9yKFtbNTAwLCAyXSwgWzUwMCwgM11dKVxyXG5cclxuICBjb25zdCBtYXAgPSBnZW5lcmF0ZU1hcCh0aWxlQ29scywgdGlsZVJvd3MpXHJcblxyXG4gIGNvbnN0IHsgdGlsZU1hcCwgYmxvY2tpbmcgfSA9IG1hcFxyXG5cclxuICBjb25zdCBjYW1lcmFYID0gTWF0aC5mbG9vcih0aWxlTWFwLndpZHRoIC8gMilcclxuICBjb25zdCBjYW1lcmFZID0gTWF0aC5mbG9vcih0aWxlTWFwLmhlaWdodCAvIDIpXHJcblxyXG4gIGNvbnN0IGZvbnQgPSBhd2FpdCBsb2FkRm9udE1vbm8oJ0V2ZXJleE1FXzV4OCcpXHJcbiAgY29uc3QgZm9udFB0cyA9IGZvbnRJbWFnZVRvUG9pbnRzKGZvbnQpXHJcblxyXG4gIGNvbnN0IHByZXZSZWN0SW5kaWNlcyA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KClcclxuICBjb25zdCBhbmltYXRlZFRpbGVJbmRpY2VzID0gbmV3IFNldDxudW1iZXI+KClcclxuXHJcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aWxlTWFwLmhlaWdodDsgeSsrKSB7XHJcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRpbGVNYXAud2lkdGg7IHgrKykge1xyXG4gICAgICBjb25zdCBpID0geSAqIHRpbGVNYXAud2lkdGggKyB4XHJcbiAgICAgIGNvbnN0IGNlbGwgPSB0aWxlTWFwLmRhdGFbaV1cclxuXHJcbiAgICAgIGlmICh0eXBlb2YgY2VsbCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGFuaW1hdGVkVGlsZUluZGljZXMuYWRkKGkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IGJ1ZmZlciA9IHN0YXRlLnZpZXcuZ2V0QnVmZmVyKClcclxuXHJcbiAgY29uc3QgbGFzdFcgPSBidWZmZXIud2lkdGhcclxuICBjb25zdCBsYXN0SCA9IGJ1ZmZlci5oZWlnaHRcclxuXHJcbiAgY29uc3QgZGVwczogUmFuZ2VyRGVwcyA9IHtcclxuICAgIHRpbGVzLCBzcHJpdGVzLCBmb250LCBmb250UHRzLCB0aWxlTWFwLCBibG9ja2luZyxcclxuICAgIHBsYXllckFuaW1MZWZ0LCBwbGF5ZXJBbmltUmlnaHQsIGFuaW1hdGVkVGlsZUluZGljZXNcclxuICB9XHJcblxyXG4gIGNvbnN0IGZzdGF0ZTogUmFuZ2VyU3RhdGUgPSB7XHJcbiAgICBmYWNpbmc6ICdyaWdodCcsXHJcbiAgICBjYW1lcmFYLCBjYW1lcmFZLCBsYXN0VywgbGFzdEgsXHJcbiAgICBtb3ZlQ29sczogMCwgbW92ZVJvd3M6IDAsXHJcbiAgICBwcmV2UmVjdEluZGljZXNcclxuICB9XHJcblxyXG4gIHJldHVybiB7IGRlcHMsIGZzdGF0ZSB9XHJcbn1cclxuIl19