import { fontImageToPoints } from '../../lib/bmpfont/layout.js';
import { loadFontMono } from '../../lib/bmpfont/load.js';
import { loadImage } from '../../lib/image/load.js';
import { animator } from '../../lib/sprites/animator.js';
import { createTileSheet } from '../../lib/sprites/index.js';
import { generateMap } from './map-gen.js';
import { tileW, tileH, tileCols, tileRows } from './tile-data.js';
export const rangerInit = async (_state) => {
    const tileSheet = await loadImage('scenes/ranger/tiles.png');
    const tiles = createTileSheet(tileSheet, tileW, tileH);
    const spriteSheet = await loadImage('scenes/ranger/sprites.png');
    const sprites = createTileSheet(spriteSheet, tileW, tileH);
    const playerAnimRight = animator([[500, 0], [500, 1]]);
    const playerAnimLeft = animator([[500, 2], [500, 3]]);
    const map = generateMap(tileCols, tileRows);
    const { tileMap, blocking } = map;
    const cameraX = Math.floor(tileMap.width / 2);
    const cameraY = Math.floor(tileMap.height / 2);
    const font = await loadFontMono('EverexME_5x8');
    const fontPts = fontImageToPoints(font);
    const prevRectIndices = new Map();
    const lastW = 0;
    const lastH = 0;
    const deps = {
        tiles, sprites, font, fontPts, tileMap, blocking,
        playerAnimLeft, playerAnimRight
    };
    const fstate = {
        facing: 'right',
        cameraX, cameraY, lastW, lastH,
        prevRectIndices
    };
    return { deps, fstate };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZXMvcmFuZ2VyL2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBRTVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBR2pFLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsTUFBYSxFQUFFLEVBQUU7SUFDaEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUU1RCxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUV0RCxNQUFNLFdBQVcsR0FBRyxNQUFNLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBRWhFLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRTFELE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN0RCxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFckQsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUUzQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQTtJQUVqQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDN0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRTlDLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQy9DLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRXZDLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFBO0lBRWpELE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUNmLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUVmLE1BQU0sSUFBSSxHQUFlO1FBQ3ZCLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUTtRQUNoRCxjQUFjLEVBQUUsZUFBZTtLQUNoQyxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQWdCO1FBQzFCLE1BQU0sRUFBRSxPQUFPO1FBQ2YsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSztRQUM5QixlQUFlO0tBQ2hCLENBQUE7SUFFRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFBO0FBQ3pCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvbnRJbWFnZVRvUG9pbnRzIH0gZnJvbSAnLi4vLi4vbGliL2JtcGZvbnQvbGF5b3V0LmpzJ1xyXG5pbXBvcnQgeyBsb2FkRm9udE1vbm8gfSBmcm9tICcuLi8uLi9saWIvYm1wZm9udC9sb2FkLmpzJ1xyXG5pbXBvcnQgeyBsb2FkSW1hZ2UgfSBmcm9tICcuLi8uLi9saWIvaW1hZ2UvbG9hZC5qcydcclxuaW1wb3J0IHsgYW5pbWF0b3IgfSBmcm9tICcuLi8uLi9saWIvc3ByaXRlcy9hbmltYXRvci5qcydcclxuaW1wb3J0IHsgY3JlYXRlVGlsZVNoZWV0IH0gZnJvbSAnLi4vLi4vbGliL3Nwcml0ZXMvaW5kZXguanMnXHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vLi4vbGliL3R5cGVzLmpzJ1xyXG5pbXBvcnQgeyBnZW5lcmF0ZU1hcCB9IGZyb20gJy4vbWFwLWdlbi5qcydcclxuaW1wb3J0IHsgdGlsZVcsIHRpbGVILCB0aWxlQ29scywgdGlsZVJvd3MgfSBmcm9tICcuL3RpbGUtZGF0YS5qcydcclxuaW1wb3J0IHsgUmFuZ2VyRGVwcywgUmFuZ2VyU3RhdGUgfSBmcm9tICcuL3R5cGVzLmpzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IHJhbmdlckluaXQgPSBhc3luYyAoX3N0YXRlOiBTdGF0ZSkgPT4ge1xyXG4gIGNvbnN0IHRpbGVTaGVldCA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL3Jhbmdlci90aWxlcy5wbmcnKVxyXG5cclxuICBjb25zdCB0aWxlcyA9IGNyZWF0ZVRpbGVTaGVldCh0aWxlU2hlZXQsIHRpbGVXLCB0aWxlSClcclxuXHJcbiAgY29uc3Qgc3ByaXRlU2hlZXQgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9yYW5nZXIvc3ByaXRlcy5wbmcnKVxyXG5cclxuICBjb25zdCBzcHJpdGVzID0gY3JlYXRlVGlsZVNoZWV0KHNwcml0ZVNoZWV0LCB0aWxlVywgdGlsZUgpXHJcblxyXG4gIGNvbnN0IHBsYXllckFuaW1SaWdodCA9IGFuaW1hdG9yKFtbNTAwLCAwXSwgWzUwMCwgMV1dKVxyXG4gIGNvbnN0IHBsYXllckFuaW1MZWZ0ID0gYW5pbWF0b3IoW1s1MDAsIDJdLCBbNTAwLCAzXV0pXHJcblxyXG4gIGNvbnN0IG1hcCA9IGdlbmVyYXRlTWFwKHRpbGVDb2xzLCB0aWxlUm93cylcclxuXHJcbiAgY29uc3QgeyB0aWxlTWFwLCBibG9ja2luZyB9ID0gbWFwXHJcblxyXG4gIGNvbnN0IGNhbWVyYVggPSBNYXRoLmZsb29yKHRpbGVNYXAud2lkdGggLyAyKVxyXG4gIGNvbnN0IGNhbWVyYVkgPSBNYXRoLmZsb29yKHRpbGVNYXAuaGVpZ2h0IC8gMilcclxuXHJcbiAgY29uc3QgZm9udCA9IGF3YWl0IGxvYWRGb250TW9ubygnRXZlcmV4TUVfNXg4JylcclxuICBjb25zdCBmb250UHRzID0gZm9udEltYWdlVG9Qb2ludHMoZm9udClcclxuXHJcbiAgY29uc3QgcHJldlJlY3RJbmRpY2VzID0gbmV3IE1hcDxudW1iZXIsIG51bWJlcj4oKVxyXG5cclxuICBjb25zdCBsYXN0VyA9IDBcclxuICBjb25zdCBsYXN0SCA9IDBcclxuXHJcbiAgY29uc3QgZGVwczogUmFuZ2VyRGVwcyA9IHtcclxuICAgIHRpbGVzLCBzcHJpdGVzLCBmb250LCBmb250UHRzLCB0aWxlTWFwLCBibG9ja2luZyxcclxuICAgIHBsYXllckFuaW1MZWZ0LCBwbGF5ZXJBbmltUmlnaHRcclxuICB9XHJcblxyXG4gIGNvbnN0IGZzdGF0ZTogUmFuZ2VyU3RhdGUgPSB7XHJcbiAgICBmYWNpbmc6ICdyaWdodCcsXHJcbiAgICBjYW1lcmFYLCBjYW1lcmFZLCBsYXN0VywgbGFzdEgsXHJcbiAgICBwcmV2UmVjdEluZGljZXNcclxuICB9XHJcblxyXG4gIHJldHVybiB7IGRlcHMsIGZzdGF0ZSB9XHJcbn1cclxuIl19