import { fontImageToPoints } from '../../lib/bmpfont/layout.js';
import { loadFontMono } from '../../lib/bmpfont/load.js';
import { loadImage } from '../../lib/image/load.js';
import { animator } from '../../lib/sprites/animator.js';
import { createTileSheet } from '../../lib/sprites/index.js';
import { generateMap } from './map-gen.js';
import { tileW, tileH, tileCols, tileRows } from './tile-data.js';
export const rangerInit = async (state) => {
    const tileSheet = await loadImage('scenes/ranger/tiles.png');
    const tiles = createTileSheet(tileSheet, tileW, tileH);
    const spriteSheet = await loadImage('scenes/ranger/sprites.png');
    const sprites = createTileSheet(spriteSheet, tileW, tileH);
    const playerAnimRight = animator([[500, 0], [500, 1]]);
    const playerAnimLeft = animator([[500, 2], [500, 3]]);
    const map = generateMap(tileCols, tileRows);
    const { tileMap, blocking } = map;
    const cameraX = Math.floor(tileMap.width / 2);
    const cameraY = Math.floor(tileMap.height / 2);
    const font = await loadFontMono('EverexME_5x8');
    const fontPts = fontImageToPoints(font);
    const prevRectIndices = new Map();
    const lastW = 0;
    const lastH = 0;
    const deps = {
        tiles, sprites, font, fontPts, tileMap, blocking,
        playerAnimLeft, playerAnimRight
    };
    const fstate = {
        facing: 'right',
        cameraX, cameraY, lastW, lastH,
        prevRectIndices
    };
    return { deps, fstate };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZXMvcmFuZ2VyL2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBRTVELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBR2pFLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLEVBQUU7SUFDL0MsTUFBTSxTQUFTLEdBQUcsTUFBTSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQTtJQUU1RCxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUV0RCxNQUFNLFdBQVcsR0FBRyxNQUFNLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0lBRWhFLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRTFELE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN0RCxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFckQsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUUzQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQTtJQUVqQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDN0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRTlDLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQy9DLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBRXZDLE1BQU0sZUFBZSxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFBO0lBRWpELE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUNmLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUVmLE1BQU0sSUFBSSxHQUFlO1FBQ3ZCLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUTtRQUNoRCxjQUFjLEVBQUUsZUFBZTtLQUNoQyxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQWdCO1FBQzFCLE1BQU0sRUFBRSxPQUFPO1FBQ2YsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSztRQUM5QixlQUFlO0tBQ2hCLENBQUE7SUFFRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFBO0FBQ3pCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvbnRJbWFnZVRvUG9pbnRzIH0gZnJvbSAnLi4vLi4vbGliL2JtcGZvbnQvbGF5b3V0LmpzJ1xyXG5pbXBvcnQgeyBsb2FkRm9udE1vbm8gfSBmcm9tICcuLi8uLi9saWIvYm1wZm9udC9sb2FkLmpzJ1xyXG5pbXBvcnQgeyBsb2FkSW1hZ2UgfSBmcm9tICcuLi8uLi9saWIvaW1hZ2UvbG9hZC5qcydcclxuaW1wb3J0IHsgYW5pbWF0b3IgfSBmcm9tICcuLi8uLi9saWIvc3ByaXRlcy9hbmltYXRvci5qcydcclxuaW1wb3J0IHsgY3JlYXRlVGlsZVNoZWV0IH0gZnJvbSAnLi4vLi4vbGliL3Nwcml0ZXMvaW5kZXguanMnXHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vLi4vbGliL3R5cGVzLmpzJ1xyXG5pbXBvcnQgeyBnZW5lcmF0ZU1hcCB9IGZyb20gJy4vbWFwLWdlbi5qcydcclxuaW1wb3J0IHsgdGlsZVcsIHRpbGVILCB0aWxlQ29scywgdGlsZVJvd3MgfSBmcm9tICcuL3RpbGUtZGF0YS5qcydcclxuaW1wb3J0IHsgUmFuZ2VyRGVwcywgUmFuZ2VyU3RhdGUgfSBmcm9tICcuL3R5cGVzLmpzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IHJhbmdlckluaXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgY29uc3QgdGlsZVNoZWV0ID0gYXdhaXQgbG9hZEltYWdlKCdzY2VuZXMvcmFuZ2VyL3RpbGVzLnBuZycpXHJcblxyXG4gIGNvbnN0IHRpbGVzID0gY3JlYXRlVGlsZVNoZWV0KHRpbGVTaGVldCwgdGlsZVcsIHRpbGVIKVxyXG5cclxuICBjb25zdCBzcHJpdGVTaGVldCA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL3Jhbmdlci9zcHJpdGVzLnBuZycpXHJcblxyXG4gIGNvbnN0IHNwcml0ZXMgPSBjcmVhdGVUaWxlU2hlZXQoc3ByaXRlU2hlZXQsIHRpbGVXLCB0aWxlSClcclxuXHJcbiAgY29uc3QgcGxheWVyQW5pbVJpZ2h0ID0gYW5pbWF0b3IoW1s1MDAsIDBdLCBbNTAwLCAxXV0pXHJcbiAgY29uc3QgcGxheWVyQW5pbUxlZnQgPSBhbmltYXRvcihbWzUwMCwgMl0sIFs1MDAsIDNdXSlcclxuXHJcbiAgY29uc3QgbWFwID0gZ2VuZXJhdGVNYXAodGlsZUNvbHMsIHRpbGVSb3dzKVxyXG5cclxuICBjb25zdCB7IHRpbGVNYXAsIGJsb2NraW5nIH0gPSBtYXBcclxuXHJcbiAgY29uc3QgY2FtZXJhWCA9IE1hdGguZmxvb3IodGlsZU1hcC53aWR0aCAvIDIpXHJcbiAgY29uc3QgY2FtZXJhWSA9IE1hdGguZmxvb3IodGlsZU1hcC5oZWlnaHQgLyAyKVxyXG5cclxuICBjb25zdCBmb250ID0gYXdhaXQgbG9hZEZvbnRNb25vKCdFdmVyZXhNRV81eDgnKVxyXG4gIGNvbnN0IGZvbnRQdHMgPSBmb250SW1hZ2VUb1BvaW50cyhmb250KVxyXG5cclxuICBjb25zdCBwcmV2UmVjdEluZGljZXMgPSBuZXcgTWFwPG51bWJlciwgbnVtYmVyPigpXHJcblxyXG4gIGNvbnN0IGxhc3RXID0gMFxyXG4gIGNvbnN0IGxhc3RIID0gMFxyXG5cclxuICBjb25zdCBkZXBzOiBSYW5nZXJEZXBzID0ge1xyXG4gICAgdGlsZXMsIHNwcml0ZXMsIGZvbnQsIGZvbnRQdHMsIHRpbGVNYXAsIGJsb2NraW5nLFxyXG4gICAgcGxheWVyQW5pbUxlZnQsIHBsYXllckFuaW1SaWdodFxyXG4gIH1cclxuXHJcbiAgY29uc3QgZnN0YXRlOiBSYW5nZXJTdGF0ZSA9IHtcclxuICAgIGZhY2luZzogJ3JpZ2h0JyxcclxuICAgIGNhbWVyYVgsIGNhbWVyYVksIGxhc3RXLCBsYXN0SCxcclxuICAgIHByZXZSZWN0SW5kaWNlc1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgZGVwcywgZnN0YXRlIH1cclxufVxyXG4iXX0=