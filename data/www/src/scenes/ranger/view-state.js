import { assrt } from '../../lib/util.js';
export const viewState = (width, height, tileW, tileH) => {
    const tileCx = Math.floor(tileW / 2);
    const tileCy = Math.floor(tileH / 2);
    const state = {
        cols: 0,
        rows: 0,
        vLeft: 0,
        vTop: 0,
        colLeft: 0,
        rowTop: 0,
        prevIndices: Array(),
        currIndices: Array()
    };
    const invalidate = (w, h) => {
        width = w;
        height = h;
        const cx = Math.floor(width / 2);
        const cy = Math.floor(height / 2);
        const availW = width - tileW;
        const availH = height - tileH;
        const colsPerSide = Math.ceil(availW / 2 / tileW);
        const rowsPerSide = Math.ceil(availH / 2 / tileH);
        state.cols = colsPerSide * 2 + 1;
        state.rows = rowsPerSide * 2 + 1;
        state.vLeft = cx - colsPerSide * tileW - tileCx;
        state.vTop = cy - rowsPerSide * tileH - tileCy;
        state.prevIndices = Array(state.cols * state.rows);
        state.currIndices = Array(state.cols * state.rows);
        state.colLeft = -colsPerSide;
        state.rowTop = -rowsPerSide;
    };
    invalidate(width, height);
    return { state, invalidate };
};
export const setIndices = (tilemap, indices, x, y, w, h, elapsed, emptyId) => {
    for (let j = 0; j < h; j++) {
        const row = j + y;
        for (let i = 0; i < w; i++) {
            const col = i + x;
            const valIndex = j * w + i;
            if (row < 0 || row >= tilemap.height || col < 0 || col >= tilemap.width) {
                indices[valIndex] = emptyId;
                continue;
            }
            const tileIndex = row * tilemap.width + col;
            const tile = tilemap.data[tileIndex];
            let rectIndex;
            if (typeof tile === 'function') {
                rectIndex = assrt(tile(elapsed), 'Expected rectIndex');
            }
            else {
                rectIndex = tile;
            }
            indices[valIndex] = rectIndex;
        }
    }
};
export const clearIndicesForRow = (indices, row, w) => {
    const rowStart = row * w;
    for (let i = 0; i < w; i++) {
        const valIndex = rowStart + i;
        indices[valIndex] = null;
    }
};
export const clearIndicesForCol = (indices, col, w, h) => {
    for (let j = 0; j < h; j++) {
        const valIndex = j * w + col;
        indices[valIndex] = null;
    }
};
export const scrollIndices = (src, dest, w, h, x, y) => {
    for (let destY = 0; destY < h; destY++) {
        const srcY = destY + y;
        for (let destX = 0; destX < w; destX++) {
            const srcX = destX + x;
            if (srcY < 0 || srcY >= h || srcX < 0 || srcX >= w) {
                dest[destY * w + destX] = null;
                continue;
            }
            dest[destY * w + destX] = src[srcY * w + srcX];
        }
    }
};
//# sourceMappingURL=data:application/json;base64,