import { getNeighboursCardinal, getNeighboursAll } from '../../lib/geom/neighbours.js';
import { pick, randInt } from '../../lib/random.js';
import { animator } from '../../lib/sprites/animator.js';
import { assrt } from '../../lib/util.js';
import { grasses, hut, mountains, rocks, ruins, sands, skeleton, trees, water } from './tile-data.js';
export const generateMap = (width, height) => {
    const size = width * height;
    const [_type, _name, ...waterFrames] = water;
    const waterAnim = animator(waterFrames);
    const tileMap = {
        width, height,
        data: Array(size).fill(waterAnim)
    };
    const blocking = new Set();
    const indexMap = new Map();
    const landCount = Math.floor(size * 0.7);
    const landIndices = new Set();
    const landIndicesArr = [];
    let landPlaced = 0;
    let currentLand = [Math.floor(width / 2), Math.floor(height / 2)];
    const canPlaceLand = ([x, y]) => {
        // leave edges clear for water
        if (x === 0)
            return false;
        if (y === 0)
            return false;
        if (x === width - 1)
            return false;
        if (y === height - 1)
            return false;
        const i = y * width + x;
        // can't already be land
        return !landIndices.has(i);
    };
    const maxTries = 100;
    const addLand = () => {
        let [lx, ly] = currentLand;
        let li = ly * width + lx;
        indexMap.set(li, [lx, ly]);
        landIndices.add(li);
        landIndicesArr.push(li);
        let tries = 0;
        let neighbours = getNeighboursCardinal(currentLand).filter(canPlaceLand);
        while (neighbours.length < 1) {
            const i = pick(landIndicesArr);
            const existingLand = assrt(indexMap.get(i), `Expected land at ${i}`);
            neighbours = getNeighboursCardinal(existingLand).filter(canPlaceLand);
            tries++;
            if (tries >= maxTries) {
                console.log('Failed to place land');
                return false;
            }
        }
        currentLand = pick(neighbours);
        return true;
    };
    while (landPlaced < landCount) {
        if (!addLand())
            break;
        landPlaced++;
    }
    const [, , grassStart, grassCount] = grasses;
    const [, , sandStart, sandCount] = sands;
    const [, , rockStart, rockCount] = rocks;
    const [, , treeStart, treeCount] = trees;
    const [, , ruinsStart, ruinsCount] = ruins;
    const [, , mountainStart, mountainCount] = mountains;
    const [, , hutIndex] = hut;
    const [, , skeletonIndex] = skeleton;
    for (const i of landIndices) {
        const grass = randInt(grassCount) + grassStart;
        tileMap.data[i] = grass;
    }
    for (const i of landIndices) {
        if (tileMap.data[i] === waterAnim)
            continue;
        const pt = assrt(indexMap.get(i), `Expected point at ${i}`);
        let seaNeighbours = 0;
        const neighbours = getNeighboursAll(pt);
        for (const n of neighbours) {
            const [nx, ny] = n;
            if (nx < 0 || nx >= width || ny < 0 || ny >= height)
                continue;
            const ni = ny * width + nx;
            if (tileMap.data[ni] === waterAnim)
                seaNeighbours++;
        }
        if (seaNeighbours > 0) {
            const sand = randInt(sandCount) + sandStart;
            tileMap.data[i] = sand;
            continue;
        }
        if (!randInt(10)) {
            const rock = randInt(rockCount) + rockStart;
            tileMap.data[i] = rock;
            continue;
        }
        if (!randInt(10)) {
            const tree = randInt(treeCount) + treeStart;
            tileMap.data[i] = tree;
            continue;
        }
        if (!randInt(100)) {
            const ruins = randInt(ruinsCount) + ruinsStart;
            tileMap.data[i] = ruins;
            continue;
        }
        if (!randInt(50)) {
            const mountain = randInt(mountainCount) + mountainStart;
            tileMap.data[i] = mountain;
            continue;
        }
        if (!randInt(500)) {
            tileMap.data[i] = hutIndex;
            continue;
        }
        if (!randInt(1000)) {
            tileMap.data[i] = skeletonIndex;
            continue;
        }
    }
    blocking.add(waterAnim);
    // trees
    for (let i = treeStart; i < treeStart + treeCount; i++) {
        blocking.add(i);
    }
    // mountains
    for (let i = mountainStart; i < mountainStart + mountainCount; i++) {
        blocking.add(i);
    }
    return { tileMap, blocking };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLWdlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZXMvcmFuZ2VyL21hcC1nZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHFCQUFxQixFQUFFLGdCQUFnQixFQUN4QyxNQUFNLDhCQUE4QixDQUFBO0FBRXJDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBRXhELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUN6QyxPQUFPLEVBQ0wsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQ3JFLE1BQU0sZ0JBQWdCLENBQUE7QUFJdkIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBYSxFQUFFLE1BQWMsRUFBRSxFQUFFO0lBQzNELE1BQU0sSUFBSSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUE7SUFFM0IsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxXQUFXLENBQUMsR0FBRyxLQUFLLENBQUE7SUFFNUMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRXZDLE1BQU0sT0FBTyxHQUFZO1FBQ3ZCLEtBQUssRUFBRSxNQUFNO1FBQ2IsSUFBSSxFQUFFLEtBQUssQ0FBYyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQy9DLENBQUE7SUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBZSxDQUFBO0lBRXZDLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxFQUFjLENBQUE7SUFFdEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJ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QUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNqQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsYUFBYSxDQUFBO1lBRXZELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFBO1lBRTFCLFNBQVE7UUFDVixDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFBO1lBRTFCLFNBQVE7UUFDVixDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFBO1lBRS9CLFNBQVE7UUFDVixDQUFDO0lBQ0gsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDdkIsUUFBUTtJQUNSLEtBQUssSUFBSSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsR0FBRyxTQUFTLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDdkQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqQixDQUFDO0lBQ0QsWUFBWTtJQUNaLEtBQUssSUFBSSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsR0FBRyxhQUFhLEdBQUcsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDbkUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqQixDQUFDO0lBRUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQTtBQUM5QixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBcclxuICBnZXROZWlnaGJvdXJzQ2FyZGluYWwsIGdldE5laWdoYm91cnNBbGwgXHJcbn0gZnJvbSAnLi4vLi4vbGliL2dlb20vbmVpZ2hib3Vycy5qcydcclxuXHJcbmltcG9ydCB7IHBpY2ssIHJhbmRJbnQgfSBmcm9tICcuLi8uLi9saWIvcmFuZG9tLmpzJ1xyXG5pbXBvcnQgeyBhbmltYXRvciB9IGZyb20gJy4uLy4uL2xpYi9zcHJpdGVzL2FuaW1hdG9yLmpzJ1xyXG5pbXBvcnQgeyBUMiB9IGZyb20gJy4uLy4uL2xpYi90eXBlcy5qcydcclxuaW1wb3J0IHsgYXNzcnQgfSBmcm9tICcuLi8uLi9saWIvdXRpbC5qcydcclxuaW1wb3J0IHsgXHJcbiAgZ3Jhc3NlcywgaHV0LCBtb3VudGFpbnMsIHJvY2tzLCBydWlucywgc2FuZHMsIHNrZWxldG9uLCB0cmVlcywgd2F0ZXIgXHJcbn0gZnJvbSAnLi90aWxlLWRhdGEuanMnXHJcblxyXG5pbXBvcnQgeyBUaWxlTWFwLCBUaWxlTWFwQ2VsbCB9IGZyb20gJy4vdHlwZXMuanMnXHJcblxyXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVNYXAgPSAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHtcclxuICBjb25zdCBzaXplID0gd2lkdGggKiBoZWlnaHRcclxuXHJcbiAgY29uc3QgW190eXBlLCBfbmFtZSwgLi4ud2F0ZXJGcmFtZXNdID0gd2F0ZXJcclxuXHJcbiAgY29uc3Qgd2F0ZXJBbmltID0gYW5pbWF0b3Iod2F0ZXJGcmFtZXMpXHJcblxyXG4gIGNvbnN0IHRpbGVNYXA6IFRpbGVNYXAgPSB7XHJcbiAgICB3aWR0aCwgaGVpZ2h0LFxyXG4gICAgZGF0YTogQXJyYXk8VGlsZU1hcENlbGw+KHNpemUpLmZpbGwod2F0ZXJBbmltKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgYmxvY2tpbmcgPSBuZXcgU2V0PFRpbGVNYXBDZWxsPigpXHJcblxyXG4gIGNvbnN0IGluZGV4TWFwID0gbmV3IE1hcDxudW1iZXIsIFQyPigpXHJcblxyXG4gIGNvbnN0IGxhbmRDb3VudCA9IE1hdGguZmxvb3Ioc2l6ZSAqIDAuNylcclxuXHJcbiAgY29uc3QgbGFuZEluZGljZXMgPSBuZXcgU2V0PG51bWJlcj4oKVxyXG4gIGNvbnN0IGxhbmRJbmRpY2VzQXJyOiBudW1iZXJbXSA9IFtdXHJcblxyXG4gIGxldCBsYW5kUGxhY2VkID0gMFxyXG5cclxuICBsZXQgY3VycmVudExhbmQ6IFQyID0gW01hdGguZmxvb3Iod2lkdGggLyAyKSwgTWF0aC5mbG9vcihoZWlnaHQgLyAyKV1cclxuXHJcbiAgY29uc3QgY2FuUGxhY2VMYW5kID0gKFt4LCB5XTogVDIpID0+IHtcclxuICAgIC8vIGxlYXZlIGVkZ2VzIGNsZWFyIGZvciB3YXRlclxyXG4gICAgaWYgKHggPT09IDApIHJldHVybiBmYWxzZVxyXG4gICAgaWYgKHkgPT09IDApIHJldHVybiBmYWxzZVxyXG4gICAgaWYgKHggPT09IHdpZHRoIC0gMSkgcmV0dXJuIGZhbHNlXHJcbiAgICBpZiAoeSA9PT0gaGVpZ2h0IC0gMSkgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgY29uc3QgaSA9IHkgKiB3aWR0aCArIHhcclxuXHJcbiAgICAvLyBjYW4ndCBhbHJlYWR5IGJlIGxhbmRcclxuICAgIHJldHVybiAhbGFuZEluZGljZXMuaGFzKGkpXHJcbiAgfVxyXG5cclxuICBjb25zdCBtYXhUcmllcyA9IDEwMFxyXG5cclxuICBjb25zdCBhZGRMYW5kID0gKCkgPT4ge1xyXG4gICAgbGV0IFtseCwgbHldID0gY3VycmVudExhbmRcclxuICAgIGxldCBsaSA9IGx5ICogd2lkdGggKyBseFxyXG5cclxuICAgIGluZGV4TWFwLnNldChsaSwgW2x4LCBseV0pXHJcbiAgICBsYW5kSW5kaWNlcy5hZGQobGkpXHJcbiAgICBsYW5kSW5kaWNlc0Fyci5wdXNoKGxpKVxyXG5cclxuICAgIGxldCB0cmllcyA9IDBcclxuICAgIGxldCBuZWlnaGJvdXJzID0gZ2V0TmVpZ2hib3Vyc0NhcmRpbmFsKGN1cnJlbnRMYW5kKS5maWx0ZXIoY2FuUGxhY2VMYW5kKVxyXG5cclxuICAgIHdoaWxlIChuZWlnaGJvdXJzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgY29uc3QgaSA9IHBpY2sobGFuZEluZGljZXNBcnIpXHJcbiAgICAgIGNvbnN0IGV4aXN0aW5nTGFuZCA9IGFzc3J0KGluZGV4TWFwLmdldChpKSwgYEV4cGVjdGVkIGxhbmQgYXQgJHtpfWApXHJcblxyXG4gICAgICBuZWlnaGJvdXJzID0gZ2V0TmVpZ2hib3Vyc0NhcmRpbmFsKGV4aXN0aW5nTGFuZCkuZmlsdGVyKGNhblBsYWNlTGFuZClcclxuXHJcbiAgICAgIHRyaWVzKytcclxuXHJcbiAgICAgIGlmICh0cmllcyA+PSBtYXhUcmllcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gcGxhY2UgbGFuZCcpXHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3VycmVudExhbmQgPSBwaWNrKG5laWdoYm91cnMpXHJcblxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIHdoaWxlIChsYW5kUGxhY2VkIDwgbGFuZENvdW50KSB7XHJcbiAgICBpZiAoIWFkZExhbmQoKSkgYnJlYWtcclxuXHJcbiAgICBsYW5kUGxhY2VkKytcclxuICB9XHJcblxyXG4gIGNvbnN0IFssICwgZ3Jhc3NTdGFydCwgZ3Jhc3NDb3VudF0gPSBncmFzc2VzXHJcbiAgY29uc3QgWywgLCBzYW5kU3RhcnQsIHNhbmRDb3VudF0gPSBzYW5kc1xyXG4gIGNvbnN0IFssICwgcm9ja1N0YXJ0LCByb2NrQ291bnRdID0gcm9ja3NcclxuICBjb25zdCBbLCAsIHRyZWVTdGFydCwgdHJlZUNvdW50XSA9IHRyZWVzXHJcbiAgY29uc3QgWywgLCBydWluc1N0YXJ0LCBydWluc0NvdW50XSA9IHJ1aW5zXHJcbiAgY29uc3QgWywgLCBtb3VudGFpblN0YXJ0LCBtb3VudGFpbkNvdW50XSA9IG1vdW50YWluc1xyXG5cclxuICBjb25zdCBbLCAsIGh1dEluZGV4XSA9IGh1dFxyXG4gIGNvbnN0IFssICwgc2tlbGV0b25JbmRleF0gPSBza2VsZXRvblxyXG5cclxuICBmb3IgKGNvbnN0IGkgb2YgbGFuZEluZGljZXMpIHtcclxuICAgIGNvbnN0IGdyYXNzID0gcmFuZEludChncmFzc0NvdW50KSArIGdyYXNzU3RhcnRcclxuXHJcbiAgICB0aWxlTWFwLmRhdGFbaV0gPSBncmFzc1xyXG4gIH1cclxuXHJcbiAgZm9yIChjb25zdCBpIG9mIGxhbmRJbmRpY2VzKSB7XHJcbiAgICBpZiAodGlsZU1hcC5kYXRhW2ldID09PSB3YXRlckFuaW0pIGNvbnRpbnVlXHJcblxyXG4gICAgY29uc3QgcHQgPSBhc3NydChpbmRleE1hcC5nZXQoaSksIGBFeHBlY3RlZCBwb2ludCBhdCAke2l9YClcclxuXHJcbiAgICBsZXQgc2VhTmVpZ2hib3VycyA9IDBcclxuXHJcbiAgICBjb25zdCBuZWlnaGJvdXJzID0gZ2V0TmVpZ2hib3Vyc0FsbChwdClcclxuXHJcbiAgICBmb3IgKGNvbnN0IG4gb2YgbmVpZ2hib3Vycykge1xyXG4gICAgICBjb25zdCBbbngsIG55XSA9IG5cclxuXHJcbiAgICAgIGlmIChueCA8IDAgfHwgbnggPj0gd2lkdGggfHwgbnkgPCAwIHx8IG55ID49IGhlaWdodCkgY29udGludWVcclxuXHJcbiAgICAgIGNvbnN0IG5pID0gbnkgKiB3aWR0aCArIG54XHJcblxyXG4gICAgICBpZiAodGlsZU1hcC5kYXRhW25pXSA9PT0gd2F0ZXJBbmltKSBzZWFOZWlnaGJvdXJzKytcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2VhTmVpZ2hib3VycyA+IDApIHtcclxuICAgICAgY29uc3Qgc2FuZCA9IHJhbmRJbnQoc2FuZENvdW50KSArIHNhbmRTdGFydFxyXG5cclxuICAgICAgdGlsZU1hcC5kYXRhW2ldID0gc2FuZFxyXG5cclxuICAgICAgY29udGludWVcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXJhbmRJbnQoMTApKSB7XHJcbiAgICAgIGNvbnN0IHJvY2sgPSByYW5kSW50KHJvY2tDb3VudCkgKyByb2NrU3RhcnRcclxuXHJcbiAgICAgIHRpbGVNYXAuZGF0YVtpXSA9IHJvY2tcclxuXHJcbiAgICAgIGNvbnRpbnVlXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFyYW5kSW50KDEwKSkge1xyXG4gICAgICBjb25zdCB0cmVlID0gcmFuZEludCh0cmVlQ291bnQpICsgdHJlZVN0YXJ0XHJcblxyXG4gICAgICB0aWxlTWFwLmRhdGFbaV0gPSB0cmVlXHJcblxyXG4gICAgICBjb250aW51ZVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghcmFuZEludCgxMDApKSB7XHJcbiAgICAgIGNvbnN0IHJ1aW5zID0gcmFuZEludChydWluc0NvdW50KSArIHJ1aW5zU3RhcnRcclxuXHJcbiAgICAgIHRpbGVNYXAuZGF0YVtpXSA9IHJ1aW5zXHJcblxyXG4gICAgICBjb250aW51ZVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghcmFuZEludCg1MCkpIHtcclxuICAgICAgY29uc3QgbW91bnRhaW4gPSByYW5kSW50KG1vdW50YWluQ291bnQpICsgbW91bnRhaW5TdGFydFxyXG5cclxuICAgICAgdGlsZU1hcC5kYXRhW2ldID0gbW91bnRhaW5cclxuXHJcbiAgICAgIGNvbnRpbnVlXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFyYW5kSW50KDUwMCkpIHtcclxuICAgICAgdGlsZU1hcC5kYXRhW2ldID0gaHV0SW5kZXhcclxuXHJcbiAgICAgIGNvbnRpbnVlXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFyYW5kSW50KDEwMDApKSB7XHJcbiAgICAgIHRpbGVNYXAuZGF0YVtpXSA9IHNrZWxldG9uSW5kZXhcclxuXHJcbiAgICAgIGNvbnRpbnVlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBibG9ja2luZy5hZGQod2F0ZXJBbmltKVxyXG4gIC8vIHRyZWVzXHJcbiAgZm9yIChsZXQgaSA9IHRyZWVTdGFydDsgaSA8IHRyZWVTdGFydCArIHRyZWVDb3VudDsgaSsrKSB7XHJcbiAgICBibG9ja2luZy5hZGQoaSlcclxuICB9XHJcbiAgLy8gbW91bnRhaW5zXHJcbiAgZm9yIChsZXQgaSA9IG1vdW50YWluU3RhcnQ7IGkgPCBtb3VudGFpblN0YXJ0ICsgbW91bnRhaW5Db3VudDsgaSsrKSB7XHJcbiAgICBibG9ja2luZy5hZGQoaSlcclxuICB9XHJcblxyXG4gIHJldHVybiB7IHRpbGVNYXAsIGJsb2NraW5nIH1cclxufVxyXG4iXX0=