import { createColor } from '../lib/image/color.js';
import { loadImage } from '../lib/image/load.js';
import { resize } from '../lib/image/resize.js';
import { drawRotated } from '../lib/image/rotate.js';
import { pset } from '../lib/image/util.js';
import { debugTextSceneHelper } from '../lib/scene/debug-text.js';
import { zoomOnWheel } from '../lib/scene/io.js';
import { textTable } from '../lib/text/table-layout.js';
import { maybe } from '../lib/util.js';
import { createBicycle, updateBicycle } from './car/bicycle.js';
// 2.5m wide - a little wide but needed to fit headlights lol
const carW = 5;
// 4.5m long - about right
const carH = 9;
const carCx = Math.floor(carW / 2);
const carCy = Math.floor(carH / 2);
const carColor = 0xffff9933;
const headlightColor = 0xff00ffff;
const carConfig = {
    wheelBase: 7,
    accel_0_100: 8,
    maxSpeedKmph: 180,
    revSpeedFactor: 0.5,
    brakeFactor: 2,
    frictionFactor: 1,
    turnRate: 0.0005,
    steerReturnSpeed: 0.001,
    maxSteerAngle: 0.5
};
const worldConfig = {
    pixelsPerMeter: 2,
    globalFriction: 5
};
// derived from car and world config
const deg90 = Math.PI / 2;
const deg270 = 3 * deg90;
const kmphScale = 900 * worldConfig.pixelsPerMeter;
// no rational basis -  just feels *about* right
// worth playing with!
const frictionMps2 = worldConfig.globalFriction * carConfig.frictionFactor; // m/s^2
const friction = frictionMps2 * (worldConfig.pixelsPerMeter / 1e6);
const timeTo100ms = carConfig.accel_0_100 * 1000; // eg 8000ms
// 100kmph in pixels per ms
const speed100 = 100 / kmphScale;
const netAccel = speed100 / timeTo100ms;
const accel = netAccel + friction; // ensure we take friction into account
// again - no rational basis - just feels *about* right
// car specific
const brake = accel * carConfig.brakeFactor;
const maxSpeed = carConfig.maxSpeedKmph / kmphScale;
const minRevSpeed = -(maxSpeed * carConfig.revSpeedFactor);
export const carScene = () => {
    let isActive = false;
    let lastW = 0;
    let lastH = 0;
    let debugHelper;
    let debugText = [];
    let track;
    let carSprite;
    // why bicycle? because it's a simple way to model car physics
    let car;
    //
    const init = async (state) => {
        debugHelper = debugTextSceneHelper(() => debugText);
        await debugHelper.init(state);
        //
        //track = await loadImage('scenes/car/track.png')
        //track = await loadImage('scenes/car/track-huge.png')
        track = await loadImage('scenes/car/track-huge-c.png');
        // carSprite = createImage(carW, carH)
        // fill(carSprite, carColor)
        // pset(carSprite, 1, 0, headlightColor)
        // pset(carSprite, 3, 0, headlightColor)
        carSprite = await loadImage('scenes/car/car.png');
        //const trackCx = Math.floor(track.width / 2)
        //const trackCy = Math.floor(track.height / 2)
        const trackCx = 5082;
        const trackCy = 11438;
        car = createBicycle([trackCx, trackCy], deg270, 0, 0, carConfig.wheelBase);
        isActive = true;
    };
    let turn = 0;
    let velocity = 0;
    const io = (state) => {
        const keys = state.getKeys();
        turn = 0;
        velocity = 0;
        if (keys['w'] || keys['W']) {
            velocity = 1;
        }
        if (keys['s'] || keys['S']) {
            velocity = -1;
        }
        if (keys['a'] || keys['A']) {
            turn = -1;
        }
        if (keys['d'] || keys['D']) {
            turn = 1;
        }
        if (zoomOnWheel(state)) {
            lastW = 0;
            lastH = 0;
        }
    };
    const update = (state) => {
        if (!maybe(track))
            throw Error('Expected track');
        if (!maybe(carSprite))
            throw Error('Expected carSprite');
        if (!maybe(car))
            throw Error('Expected car');
        if (isActive)
            io(state);
        const delta = state.time.getFrameTime();
        // adjust car speed and steering angle based on input
        // are we accelerating or braking?
        const a = velocity > 0 && car.speed > 0 ? accel : brake;
        car.speed += velocity * delta * a;
        if (car.speed > 0) {
            // apply friction
            car.speed -= friction * delta;
            // enforce speed limits and ensure friction doesn't make us go backwards
            if (car.speed < 0)
                car.speed = 0;
            if (car.speed > maxSpeed)
                car.speed = maxSpeed;
        }
        else if (car.speed < 0) {
            // apply friction
            car.speed += friction * delta;
            // enforce speed limits and ensure friction doesn't make us go forwards
            if (car.speed > 0)
                car.speed = 0;
            if (car.speed < minRevSpeed)
                car.speed = minRevSpeed;
        }
        if (turn) {
            // the slower we're going, the less we can turn
            const speedFactor = Math.min(1, Math.max(0, Math.abs(car.speed) / maxSpeed));
            car.steerAngle += turn * delta * carConfig.turnRate * speedFactor;
            // enforce steering limits
            car.steerAngle = Math.max(-carConfig.maxSteerAngle, Math.min(carConfig.maxSteerAngle, car.steerAngle));
        }
        else {
            // return steering to center
            if (car.steerAngle > 0) {
                car.steerAngle = Math.max(0, car.steerAngle - delta * carConfig.steerReturnSpeed);
            }
            else if (car.steerAngle < 0) {
                car.steerAngle = Math.min(0, car.steerAngle + delta * carConfig.steerReturnSpeed);
            }
        }
        const updated = updateBicycle(car, delta);
        // we could check here for collision, that's why it's separate from car
        // todo - collision detection
        // if no collision, update car
        car.location = updated.location;
        car.heading = updated.heading;
        //
        const buffer = state.view.getBuffer();
        const { width, height } = buffer;
        const vx = Math.floor(width / 2);
        // we place the car down the screen facing up,
        // so we can see more of the road ahead
        const vy = Math.floor(height * 0.875);
        // draw the track, centered on the car, onto the view, rotated by -carHeading
        // and then deg90 to face "up"
        drawRotated(track, car.location[0], car.location[1], buffer, vx, vy, -car.heading - deg90);
        // draw the car, centered on the car, onto the view
        drawRotated(carSprite, carCx, carCy, buffer, vx, vy, car.steerAngle);
        // mini map
        const mmHeight = Math.floor(height / 2);
        // scale to track.height
        const mmScale = mmHeight / track.height;
        const mmWidth = Math.floor(track.width * mmScale);
        const mmX = 2;
        const mmY = height - mmHeight - 2;
        resize(track, buffer, [0, 0, track.width, track.height], [mmX, mmY, mmWidth, mmHeight]);
        const mmCarX = Math.floor(car.location[0] * mmScale) + mmX;
        const mmCarY = Math.floor(car.location[1] * mmScale) + mmY;
        const red = createColor(255, 0, 0);
        pset(buffer, mmCarX, mmCarY, red);
        if (!maybe(debugHelper))
            return;
        const kmph = car.speed * kmphScale;
        const fps = Math.round(1000 / delta);
        const fpsText = `${fps} fps (${delta.toFixed(1)}ms)`;
        const table = textTable([
            ['x:', `${car.location[0].toFixed(4)}`],
            ['y:', `${car.location[1].toFixed(4)}`],
            ['heading:', `${car.heading.toFixed(4)}`],
            ['speed:', `${car.speed.toFixed(4)}`],
            ['steer:', `${car.steerAngle.toFixed(4)}`],
            ['kmph:', `${kmph.toFixed(4)}`],
            ['turn:', `${turn}`],
            ['velocity:', `${velocity}`]
        ]);
        debugText = [
            fpsText,
            ...table
        ];
        debugHelper.update(state);
    };
    const quit = async (state) => {
        isActive = false;
        if (maybe(debugHelper))
            await debugHelper.quit(state);
        debugHelper = null;
    };
    const setActive = (active) => {
        isActive = active;
    };
    return { init, update, quit, setActive };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyLXNjZW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NjZW5lcy9jYXItc2NlbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBR25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUNoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUNqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFDaEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBRXZELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUN0QyxPQUFPLEVBQVcsYUFBYSxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRXhFLDZEQUE2RDtBQUM3RCxNQUFNLElBQUksR0FBRyxDQUFDLENBQUE7QUFDZCwwQkFBMEI7QUFDMUIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFBO0FBRWQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFFbEMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFBO0FBQzNCLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQTtBQWNqQyxNQUFNLFNBQVMsR0FBYztJQUMzQixTQUFTLEVBQUUsQ0FBQztJQUNaLFdBQVcsRUFB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SUFDbkIsQ0FBQyxDQUFBO0lBRUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFBO0FBQzFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbG9yIH0gZnJvbSAnLi4vbGliL2ltYWdlL2NvbG9yLmpzJ1xyXG5pbXBvcnQgeyBjcmVhdGVJbWFnZSB9IGZyb20gJy4uL2xpYi9pbWFnZS9jcmVhdGUuanMnXHJcbmltcG9ydCB7IGZpbGwgfSBmcm9tICcuLi9saWIvaW1hZ2UvZmlsbC5qcydcclxuaW1wb3J0IHsgbG9hZEltYWdlIH0gZnJvbSAnLi4vbGliL2ltYWdlL2xvYWQuanMnXHJcbmltcG9ydCB7IHJlc2l6ZSB9IGZyb20gJy4uL2xpYi9pbWFnZS9yZXNpemUuanMnXHJcbmltcG9ydCB7IGRyYXdSb3RhdGVkIH0gZnJvbSAnLi4vbGliL2ltYWdlL3JvdGF0ZS5qcydcclxuaW1wb3J0IHsgcHNldCB9IGZyb20gJy4uL2xpYi9pbWFnZS91dGlsLmpzJ1xyXG5pbXBvcnQgeyBkZWJ1Z1RleHRTY2VuZUhlbHBlciB9IGZyb20gJy4uL2xpYi9zY2VuZS9kZWJ1Zy10ZXh0LmpzJ1xyXG5pbXBvcnQgeyB6b29tT25XaGVlbCB9IGZyb20gJy4uL2xpYi9zY2VuZS9pby5qcydcclxuaW1wb3J0IHsgdGV4dFRhYmxlIH0gZnJvbSAnLi4vbGliL3RleHQvdGFibGUtbGF5b3V0LmpzJ1xyXG5pbXBvcnQgeyBNYXliZSwgU2NlbmUsIFN0YXRlIH0gZnJvbSAnLi4vbGliL3R5cGVzLmpzJ1xyXG5pbXBvcnQgeyBtYXliZSB9IGZyb20gJy4uL2xpYi91dGlsLmpzJ1xyXG5pbXBvcnQgeyBCaWN5Y2xlLCBjcmVhdGVCaWN5Y2xlLCB1cGRhdGVCaWN5Y2xlIH0gZnJvbSAnLi9jYXIvYmljeWNsZS5qcydcclxuXHJcbi8vIDIuNW0gd2lkZSAtIGEgbGl0dGxlIHdpZGUgYnV0IG5lZWRlZCB0byBmaXQgaGVhZGxpZ2h0cyBsb2xcclxuY29uc3QgY2FyVyA9IDVcclxuLy8gNC41bSBsb25nIC0gYWJvdXQgcmlnaHRcclxuY29uc3QgY2FySCA9IDlcclxuXHJcbmNvbnN0IGNhckN4ID0gTWF0aC5mbG9vcihjYXJXIC8gMilcclxuY29uc3QgY2FyQ3kgPSBNYXRoLmZsb29yKGNhckggLyAyKVxyXG5cclxuY29uc3QgY2FyQ29sb3IgPSAweGZmZmY5OTMzXHJcbmNvbnN0IGhlYWRsaWdodENvbG9yID0gMHhmZjAwZmZmZlxyXG5cclxudHlwZSBDYXJDb25maWcgPSB7XHJcbiAgd2hlZWxCYXNlOiBudW1iZXIgLy8gcGl4ZWxzIC0gZGlzdGFuY2UgYmV0d2VlbiBmcm9udCBhbmQgYmFjayB3aGVlbHNcclxuICBhY2NlbF8wXzEwMDogbnVtYmVyIC8vIHNlY29uZHNcclxuICBtYXhTcGVlZEttcGg6IG51bWJlclxyXG4gIHJldlNwZWVkRmFjdG9yOiBudW1iZXJcclxuICBicmFrZUZhY3RvcjogbnVtYmVyXHJcbiAgZnJpY3Rpb25GYWN0b3I6IG51bWJlclxyXG4gIHR1cm5SYXRlOiBudW1iZXIgLy8gcmFkcyBwZXIgbXNcclxuICBzdGVlclJldHVyblNwZWVkOiBudW1iZXIgLy8gcmFkcyBwZXIgbXNcclxuICBtYXhTdGVlckFuZ2xlOiBudW1iZXJcclxufVxyXG5cclxuY29uc3QgY2FyQ29uZmlnOiBDYXJDb25maWcgPSB7XHJcbiAgd2hlZWxCYXNlOiA3LFxyXG4gIGFjY2VsXzBfMTAwOiA4LFxyXG4gIG1heFNwZWVkS21waDogMTgwLFxyXG4gIHJldlNwZWVkRmFjdG9yOiAwLjUsXHJcbiAgYnJha2VGYWN0b3I6IDIsXHJcbiAgZnJpY3Rpb25GYWN0b3I6IDEsXHJcbiAgdHVyblJhdGU6IDAuMDAwNSxcclxuICBzdGVlclJldHVyblNwZWVkOiAwLjAwMSxcclxuICBtYXhTdGVlckFuZ2xlOiAwLjVcclxufVxyXG5cclxudHlwZSBXb3JsZENvbmZpZyA9IHtcclxuICBwaXhlbHNQZXJNZXRlcjogbnVtYmVyXHJcbiAgZ2xvYmFsRnJpY3Rpb246IG51bWJlclxyXG59XHJcblxyXG5jb25zdCB3b3JsZENvbmZpZzogV29ybGRDb25maWcgPSB7XHJcbiAgcGl4ZWxzUGVyTWV0ZXI6IDIsXHJcbiAgZ2xvYmFsRnJpY3Rpb246IDVcclxufVxyXG5cclxuLy8gZGVyaXZlZCBmcm9tIGNhciBhbmQgd29ybGQgY29uZmlnXHJcbmNvbnN0IGRlZzkwID0gTWF0aC5QSSAvIDJcclxuY29uc3QgZGVnMjcwID0gMyAqIGRlZzkwXHJcblxyXG5jb25zdCBrbXBoU2NhbGUgPSA5MDAgKiB3b3JsZENvbmZpZy5waXhlbHNQZXJNZXRlclxyXG5cclxuLy8gbm8gcmF0aW9uYWwgYmFzaXMgLSAganVzdCBmZWVscyAqYWJvdXQqIHJpZ2h0XHJcbi8vIHdvcnRoIHBsYXlpbmcgd2l0aCFcclxuY29uc3QgZnJpY3Rpb25NcHMyID0gd29ybGRDb25maWcuZ2xvYmFsRnJpY3Rpb24gKiBjYXJDb25maWcuZnJpY3Rpb25GYWN0b3IgLy8gbS9zXjJcclxuY29uc3QgZnJpY3Rpb24gPSBmcmljdGlvbk1wczIgKiAod29ybGRDb25maWcucGl4ZWxzUGVyTWV0ZXIgLyAxZTYpXHJcblxyXG5jb25zdCB0aW1lVG8xMDBtcyA9IGNhckNvbmZpZy5hY2NlbF8wXzEwMCAqIDEwMDAgLy8gZWcgODAwMG1zXHJcbi8vIDEwMGttcGggaW4gcGl4ZWxzIHBlciBtc1xyXG5jb25zdCBzcGVlZDEwMCA9IDEwMCAvIGttcGhTY2FsZVxyXG5cclxuY29uc3QgbmV0QWNjZWwgPSBzcGVlZDEwMCAvIHRpbWVUbzEwMG1zXHJcbmNvbnN0IGFjY2VsID0gbmV0QWNjZWwgKyBmcmljdGlvbiAvLyBlbnN1cmUgd2UgdGFrZSBmcmljdGlvbiBpbnRvIGFjY291bnRcclxuLy8gYWdhaW4gLSBubyByYXRpb25hbCBiYXNpcyAtIGp1c3QgZmVlbHMgKmFib3V0KiByaWdodFxyXG5cclxuLy8gY2FyIHNwZWNpZmljXHJcbmNvbnN0IGJyYWtlID0gYWNjZWwgKiBjYXJDb25maWcuYnJha2VGYWN0b3JcclxuXHJcbmNvbnN0IG1heFNwZWVkID0gY2FyQ29uZmlnLm1heFNwZWVkS21waCAvIGttcGhTY2FsZVxyXG5jb25zdCBtaW5SZXZTcGVlZCA9IC0obWF4U3BlZWQgKiBjYXJDb25maWcucmV2U3BlZWRGYWN0b3IpXHJcblxyXG5leHBvcnQgY29uc3QgY2FyU2NlbmUgPSAoKTogU2NlbmUgPT4ge1xyXG4gIGxldCBpc0FjdGl2ZSA9IGZhbHNlXHJcbiAgbGV0IGxhc3RXID0gMFxyXG4gIGxldCBsYXN0SCA9IDBcclxuXHJcbiAgbGV0IGRlYnVnSGVscGVyOiBNYXliZTxTY2VuZT5cclxuICBsZXQgZGVidWdUZXh0OiBzdHJpbmdbXSA9IFtdXHJcblxyXG4gIGxldCB0cmFjazogTWF5YmU8SW1hZ2VEYXRhPlxyXG4gIGxldCBjYXJTcHJpdGU6IE1heWJlPEltYWdlRGF0YT5cclxuXHJcbiAgLy8gd2h5IGJpY3ljbGU/IGJlY2F1c2UgaXQncyBhIHNpbXBsZSB3YXkgdG8gbW9kZWwgY2FyIHBoeXNpY3NcclxuICBsZXQgY2FyOiBNYXliZTxCaWN5Y2xlPlxyXG5cclxuICAvL1xyXG5cclxuICBjb25zdCBpbml0ID0gYXN5bmMgKHN0YXRlOiBTdGF0ZSkgPT4ge1xyXG4gICAgZGVidWdIZWxwZXIgPSBkZWJ1Z1RleHRTY2VuZUhlbHBlcigoKSA9PiBkZWJ1Z1RleHQpXHJcblxyXG4gICAgYXdhaXQgZGVidWdIZWxwZXIuaW5pdChzdGF0ZSlcclxuXHJcbiAgICAvL1xyXG5cclxuICAgIC8vdHJhY2sgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvdHJhY2sucG5nJylcclxuICAgIC8vdHJhY2sgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvdHJhY2staHVnZS5wbmcnKVxyXG4gICAgdHJhY2sgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvdHJhY2staHVnZS1jLnBuZycpXHJcblxyXG4gICAgLy8gY2FyU3ByaXRlID0gY3JlYXRlSW1hZ2UoY2FyVywgY2FySClcclxuXHJcbiAgICAvLyBmaWxsKGNhclNwcml0ZSwgY2FyQ29sb3IpXHJcbiAgICAvLyBwc2V0KGNhclNwcml0ZSwgMSwgMCwgaGVhZGxpZ2h0Q29sb3IpXHJcbiAgICAvLyBwc2V0KGNhclNwcml0ZSwgMywgMCwgaGVhZGxpZ2h0Q29sb3IpXHJcbiAgICBjYXJTcHJpdGUgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvY2FyLnBuZycpXHJcblxyXG4gICAgLy9jb25zdCB0cmFja0N4ID0gTWF0aC5mbG9vcih0cmFjay53aWR0aCAvIDIpXHJcbiAgICAvL2NvbnN0IHRyYWNrQ3kgPSBNYXRoLmZsb29yKHRyYWNrLmhlaWdodCAvIDIpXHJcbiAgICBjb25zdCB0cmFja0N4ID0gNTA4MlxyXG4gICAgY29uc3QgdHJhY2tDeSA9IDExNDM4XHJcblxyXG4gICAgY2FyID0gY3JlYXRlQmljeWNsZShbdHJhY2tDeCwgdHJhY2tDeV0sIGRlZzI3MCwgMCwgMCwgY2FyQ29uZmlnLndoZWVsQmFzZSlcclxuXHJcbiAgICBpc0FjdGl2ZSA9IHRydWVcclxuICB9XHJcblxyXG4gIGxldCB0dXJuID0gMFxyXG4gIGxldCB2ZWxvY2l0eSA9IDBcclxuXHJcbiAgY29uc3QgaW8gPSAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCBrZXlzID0gc3RhdGUuZ2V0S2V5cygpXHJcblxyXG4gICAgdHVybiA9IDBcclxuICAgIHZlbG9jaXR5ID0gMFxyXG5cclxuICAgIGlmIChrZXlzWyd3J10gfHwga2V5c1snVyddKSB7XHJcbiAgICAgIHZlbG9jaXR5ID0gMVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChrZXlzWydzJ10gfHwga2V5c1snUyddKSB7XHJcbiAgICAgIHZlbG9jaXR5ID0gLTFcclxuICAgIH1cclxuXHJcbiAgICBpZiAoa2V5c1snYSddIHx8IGtleXNbJ0EnXSkge1xyXG4gICAgICB0dXJuID0gLTFcclxuICAgIH1cclxuXHJcbiAgICBpZiAoa2V5c1snZCddIHx8IGtleXNbJ0QnXSkge1xyXG4gICAgICB0dXJuID0gMVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh6b29tT25XaGVlbChzdGF0ZSkpIHtcclxuICAgICAgbGFzdFcgPSAwXHJcbiAgICAgIGxhc3RIID0gMFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgdXBkYXRlID0gKHN0YXRlOiBTdGF0ZSkgPT4ge1xyXG4gICAgaWYgKCFtYXliZSh0cmFjaykpIHRocm93IEVycm9yKCdFeHBlY3RlZCB0cmFjaycpXHJcbiAgICBpZiAoIW1heWJlKGNhclNwcml0ZSkpIHRocm93IEVycm9yKCdFeHBlY3RlZCBjYXJTcHJpdGUnKVxyXG4gICAgaWYgKCFtYXliZShjYXIpKSB0aHJvdyBFcnJvcignRXhwZWN0ZWQgY2FyJylcclxuXHJcbiAgICBpZiAoaXNBY3RpdmUpIGlvKHN0YXRlKVxyXG5cclxuICAgIGNvbnN0IGRlbHRhID0gc3RhdGUudGltZS5nZXRGcmFtZVRpbWUoKVxyXG5cclxuICAgIC8vIGFkanVzdCBjYXIgc3BlZWQgYW5kIHN0ZWVyaW5nIGFuZ2xlIGJhc2VkIG9uIGlucHV0XHJcblxyXG4gICAgLy8gYXJlIHdlIGFjY2VsZXJhdGluZyBvciBicmFraW5nP1xyXG4gICAgY29uc3QgYSA9IHZlbG9jaXR5ID4gMCAmJiBjYXIuc3BlZWQgPiAwID8gYWNjZWwgOiBicmFrZVxyXG5cclxuICAgIGNhci5zcGVlZCArPSB2ZWxvY2l0eSAqIGRlbHRhICogYVxyXG5cclxuICAgIGlmIChjYXIuc3BlZWQgPiAwKSB7XHJcbiAgICAgIC8vIGFwcGx5IGZyaWN0aW9uXHJcbiAgICAgIGNhci5zcGVlZCAtPSBmcmljdGlvbiAqIGRlbHRhXHJcblxyXG4gICAgICAvLyBlbmZvcmNlIHNwZWVkIGxpbWl0cyBhbmQgZW5zdXJlIGZyaWN0aW9uIGRvZXNuJ3QgbWFrZSB1cyBnbyBiYWNrd2FyZHNcclxuICAgICAgaWYgKGNhci5zcGVlZCA8IDApIGNhci5zcGVlZCA9IDBcclxuICAgICAgaWYgKGNhci5zcGVlZCA+IG1heFNwZWVkKSBjYXIuc3BlZWQgPSBtYXhTcGVlZFxyXG4gICAgfSBlbHNlIGlmIChjYXIuc3BlZWQgPCAwKSB7XHJcbiAgICAgIC8vIGFwcGx5IGZyaWN0aW9uXHJcbiAgICAgIGNhci5zcGVlZCArPSBmcmljdGlvbiAqIGRlbHRhXHJcblxyXG4gICAgICAvLyBlbmZvcmNlIHNwZWVkIGxpbWl0cyBhbmQgZW5zdXJlIGZyaWN0aW9uIGRvZXNuJ3QgbWFrZSB1cyBnbyBmb3J3YXJkc1xyXG4gICAgICBpZiAoY2FyLnNwZWVkID4gMCkgY2FyLnNwZWVkID0gMFxyXG4gICAgICBpZiAoY2FyLnNwZWVkIDwgbWluUmV2U3BlZWQpIGNhci5zcGVlZCA9IG1pblJldlNwZWVkXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR1cm4pIHtcclxuICAgICAgLy8gdGhlIHNsb3dlciB3ZSdyZSBnb2luZywgdGhlIGxlc3Mgd2UgY2FuIHR1cm5cclxuICAgICAgY29uc3Qgc3BlZWRGYWN0b3IgPSBNYXRoLm1pbihcclxuICAgICAgICAxLCBNYXRoLm1heCgwLCBNYXRoLmFicyhjYXIuc3BlZWQpIC8gbWF4U3BlZWQpXHJcbiAgICAgIClcclxuXHJcbiAgICAgIGNhci5zdGVlckFuZ2xlICs9IHR1cm4gKiBkZWx0YSAqIGNhckNvbmZpZy50dXJuUmF0ZSAqIHNwZWVkRmFjdG9yXHJcblxyXG4gICAgICAvLyBlbmZvcmNlIHN0ZWVyaW5nIGxpbWl0c1xyXG4gICAgICBjYXIuc3RlZXJBbmdsZSA9IE1hdGgubWF4KFxyXG4gICAgICAgIC1jYXJDb25maWcubWF4U3RlZXJBbmdsZSxcclxuICAgICAgICBNYXRoLm1pbihjYXJDb25maWcubWF4U3RlZXJBbmdsZSwgY2FyLnN0ZWVyQW5nbGUpXHJcbiAgICAgIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHJldHVybiBzdGVlcmluZyB0byBjZW50ZXJcclxuICAgICAgaWYgKGNhci5zdGVlckFuZ2xlID4gMCkge1xyXG4gICAgICAgIGNhci5zdGVlckFuZ2xlID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICAwLCBjYXIuc3RlZXJBbmdsZSAtIGRlbHRhICogY2FyQ29uZmlnLnN0ZWVyUmV0dXJuU3BlZWRcclxuICAgICAgICApXHJcbiAgICAgIH0gZWxzZSBpZiAoY2FyLnN0ZWVyQW5nbGUgPCAwKSB7XHJcbiAgICAgICAgY2FyLnN0ZWVyQW5nbGUgPSBNYXRoLm1pbihcclxuICAgICAgICAgIDAsIGNhci5zdGVlckFuZ2xlICsgZGVsdGEgKiBjYXJDb25maWcuc3RlZXJSZXR1cm5TcGVlZFxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWQgPSB1cGRhdGVCaWN5Y2xlKGNhciwgZGVsdGEpXHJcblxyXG4gICAgLy8gd2UgY291bGQgY2hlY2sgaGVyZSBmb3IgY29sbGlzaW9uLCB0aGF0J3Mgd2h5IGl0J3Mgc2VwYXJhdGUgZnJvbSBjYXJcclxuICAgIC8vIHRvZG8gLSBjb2xsaXNpb24gZGV0ZWN0aW9uXHJcblxyXG4gICAgLy8gaWYgbm8gY29sbGlzaW9uLCB1cGRhdGUgY2FyXHJcbiAgICBjYXIubG9jYXRpb24gPSB1cGRhdGVkLmxvY2F0aW9uXHJcbiAgICBjYXIuaGVhZGluZyA9IHVwZGF0ZWQuaGVhZGluZ1xyXG5cclxuICAgIC8vXHJcblxyXG4gICAgY29uc3QgYnVmZmVyID0gc3RhdGUudmlldy5nZXRCdWZmZXIoKVxyXG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBidWZmZXJcclxuXHJcbiAgICBjb25zdCB2eCA9IE1hdGguZmxvb3Iod2lkdGggLyAyKVxyXG4gICAgLy8gd2UgcGxhY2UgdGhlIGNhciBkb3duIHRoZSBzY3JlZW4gZmFjaW5nIHVwLFxyXG4gICAgLy8gc28gd2UgY2FuIHNlZSBtb3JlIG9mIHRoZSByb2FkIGFoZWFkXHJcbiAgICBjb25zdCB2eSA9IE1hdGguZmxvb3IoaGVpZ2h0ICogMC44NzUpXHJcblxyXG4gICAgLy8gZHJhdyB0aGUgdHJhY2ssIGNlbnRlcmVkIG9uIHRoZSBjYXIsIG9udG8gdGhlIHZpZXcsIHJvdGF0ZWQgYnkgLWNhckhlYWRpbmdcclxuICAgIC8vIGFuZCB0aGVuIGRlZzkwIHRvIGZhY2UgXCJ1cFwiXHJcbiAgICBkcmF3Um90YXRlZChcclxuICAgICAgdHJhY2ssIGNhci5sb2NhdGlvblswXSwgY2FyLmxvY2F0aW9uWzFdLCBidWZmZXIsIHZ4LCB2eSxcclxuICAgICAgLWNhci5oZWFkaW5nIC0gZGVnOTBcclxuICAgIClcclxuICAgIC8vIGRyYXcgdGhlIGNhciwgY2VudGVyZWQgb24gdGhlIGNhciwgb250byB0aGUgdmlld1xyXG4gICAgZHJhd1JvdGF0ZWQoY2FyU3ByaXRlLCBjYXJDeCwgY2FyQ3ksIGJ1ZmZlciwgdngsIHZ5LCBjYXIuc3RlZXJBbmdsZSlcclxuXHJcbiAgICAvLyBtaW5pIG1hcFxyXG5cclxuICAgIGNvbnN0IG1tSGVpZ2h0ID0gTWF0aC5mbG9vcihoZWlnaHQgLyAyKVxyXG5cclxuICAgIC8vIHNjYWxlIHRvIHRyYWNrLmhlaWdodFxyXG4gICAgY29uc3QgbW1TY2FsZSA9IG1tSGVpZ2h0IC8gdHJhY2suaGVpZ2h0XHJcblxyXG4gICAgY29uc3QgbW1XaWR0aCA9IE1hdGguZmxvb3IodHJhY2sud2lkdGggKiBtbVNjYWxlKVxyXG5cclxuICAgIGNvbnN0IG1tWCA9IDJcclxuICAgIGNvbnN0IG1tWSA9IGhlaWdodCAtIG1tSGVpZ2h0IC0gMlxyXG5cclxuICAgIHJlc2l6ZShcclxuICAgICAgdHJhY2ssIGJ1ZmZlcixcclxuICAgICAgWzAsIDAsIHRyYWNrLndpZHRoLCB0cmFjay5oZWlnaHRdLFxyXG4gICAgICBbbW1YLCBtbVksIG1tV2lkdGgsIG1tSGVpZ2h0XVxyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0IG1tQ2FyWCA9IE1hdGguZmxvb3IoY2FyLmxvY2F0aW9uWzBdICogbW1TY2FsZSkgKyBtbVhcclxuICAgIGNvbnN0IG1tQ2FyWSA9IE1hdGguZmxvb3IoY2FyLmxvY2F0aW9uWzFdICogbW1TY2FsZSkgKyBtbVlcclxuXHJcbiAgICBjb25zdCByZWQgPSBjcmVhdGVDb2xvcigyNTUsIDAsIDApXHJcblxyXG4gICAgcHNldChidWZmZXIsIG1tQ2FyWCwgbW1DYXJZLCByZWQpXHJcblxyXG4gICAgaWYgKCFtYXliZShkZWJ1Z0hlbHBlcikpIHJldHVyblxyXG5cclxuICAgIGNvbnN0IGttcGggPSBjYXIuc3BlZWQgKiBrbXBoU2NhbGVcclxuXHJcbiAgICBjb25zdCBmcHMgPSBNYXRoLnJvdW5kKDEwMDAgLyBkZWx0YSlcclxuICAgIGNvbnN0IGZwc1RleHQgPSBgJHtmcHN9IGZwcyAoJHtkZWx0YS50b0ZpeGVkKDEpfW1zKWBcclxuXHJcbiAgICBjb25zdCB0YWJsZSA9IHRleHRUYWJsZShbXHJcbiAgICAgIFsneDonLCBgJHtjYXIubG9jYXRpb25bMF0udG9GaXhlZCg0KX1gXSxcclxuICAgICAgWyd5OicsIGAke2Nhci5sb2NhdGlvblsxXS50b0ZpeGVkKDQpfWBdLFxyXG4gICAgICBbJ2hlYWRpbmc6JywgYCR7Y2FyLmhlYWRpbmcudG9GaXhlZCg0KX1gXSxcclxuICAgICAgWydzcGVlZDonLCBgJHtjYXIuc3BlZWQudG9GaXhlZCg0KX1gXSxcclxuICAgICAgWydzdGVlcjonLCBgJHtjYXIuc3RlZXJBbmdsZS50b0ZpeGVkKDQpfWBdLFxyXG4gICAgICBbJ2ttcGg6JywgYCR7a21waC50b0ZpeGVkKDQpfWBdLFxyXG4gICAgICBbJ3R1cm46JywgYCR7dHVybn1gXSxcclxuICAgICAgWyd2ZWxvY2l0eTonLCBgJHt2ZWxvY2l0eX1gXVxyXG4gICAgXSlcclxuXHJcbiAgICBkZWJ1Z1RleHQgPSBbXHJcbiAgICAgIGZwc1RleHQsXHJcbiAgICAgIC4uLnRhYmxlXHJcbiAgICBdXHJcblxyXG4gICAgZGVidWdIZWxwZXIudXBkYXRlKHN0YXRlKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcXVpdCA9IGFzeW5jIChzdGF0ZTogU3RhdGUpID0+IHtcclxuICAgIGlzQWN0aXZlID0gZmFsc2VcclxuXHJcbiAgICBpZiAobWF5YmUoZGVidWdIZWxwZXIpKSBhd2FpdCBkZWJ1Z0hlbHBlci5xdWl0KHN0YXRlKVxyXG5cclxuICAgIGRlYnVnSGVscGVyID0gbnVsbFxyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2V0QWN0aXZlID0gKGFjdGl2ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgaXNBY3RpdmUgPSBhY3RpdmVcclxuICB9XHJcblxyXG4gIHJldHVybiB7IGluaXQsIHVwZGF0ZSwgcXVpdCwgc2V0QWN0aXZlIH1cclxufVxyXG4iXX0=