import { createImage } from '../lib/image/create.js';
import { fill } from '../lib/image/fill.js';
import { loadImage } from '../lib/image/load.js';
import { drawRotated } from '../lib/image/rotate.js';
import { pset } from '../lib/image/util.js';
import { debugTextSceneHelper } from '../lib/scene/debug-text.js';
import { textTable } from '../lib/text/table-layout.js';
import { maybe } from '../lib/util.js';
import { createBicycle, updateBicycle } from './car/bicycle.js';
// 2.5m wide - a little wide but needed to fit headlights lol
const carW = 5;
// 4.5m long - about right
const carH = 9;
const wheelBase = 7; // difference between two axles
const carCx = Math.floor(carW / 2);
const carCy = Math.floor(carH / 2);
const carColor = 0xffff9933;
const headlightColor = 0xff00ffff;
export const carScene = () => {
    let isActive = false;
    let debugHelper;
    let debugText = [];
    let track;
    let carSprite;
    // why bicycle? because it's a simple way to model car physics
    let car;
    //
    const init = async (state) => {
        debugHelper = debugTextSceneHelper(() => debugText);
        await debugHelper.init(state);
        //
        track = await loadImage('scenes/car/track.png');
        carSprite = createImage(carW, carH);
        fill(carSprite, carColor);
        pset(carSprite, 1, 0, headlightColor);
        pset(carSprite, 3, 0, headlightColor);
        const trackCx = Math.floor(track.width / 2);
        const trackCy = Math.floor(track.height / 2);
        car = createBicycle([trackCx, trackCy], 0, 0, 0, wheelBase);
        isActive = true;
    };
    let turn = 0;
    let velocity = 0;
    const io = (state) => {
        const keys = state.getKeys();
        turn = 0;
        velocity = 0;
        if (keys['w'] || keys['W']) {
            velocity = 1;
        }
        if (keys['s'] || keys['S']) {
            velocity = -1;
        }
        if (keys['a'] || keys['A']) {
            turn = -1;
        }
        if (keys['d'] || keys['D']) {
            turn = 1;
        }
    };
    const deg90 = Math.PI / 2;
    const pixelsPerMeter = 2;
    const kmphScale = 900 * pixelsPerMeter;
    // car specific
    const maxSpeedKmph = 180;
    // no rational basis -  just feels *about* right
    // worth playing with!
    const frictionMps2 = 5; // m/s^2
    const friction = frictionMps2 * (pixelsPerMeter / 1e6);
    // 8 seconds to accelerate from 0 to 100 km/h
    const accel_0_100 = 8; // car specific
    const timeTo100ms = accel_0_100 * 1000; // eg 8000ms
    // 100kmph in pixels per ms
    const speed100 = 100 / kmphScale;
    const netAccel = speed100 / timeTo100ms;
    const accel = netAccel + friction; // ensure we take friction into account
    // again - no rational basis - just feels *about* right
    // car specific
    const brakeFactor = 2;
    const brake = accel * brakeFactor;
    const turnRate = 0.0005;
    const steerReturnSpeed = 0.001;
    const maxSteerAngle = 0.5;
    const maxSpeed = maxSpeedKmph / kmphScale;
    const minRevSpeed = -(maxSpeed / 2);
    const update = (state) => {
        if (!maybe(track))
            throw Error('Expected track');
        if (!maybe(carSprite))
            throw Error('Expected carSprite');
        if (!maybe(car))
            throw Error('Expected car');
        if (isActive)
            io(state);
        const delta = state.time.getFrameTime();
        //
        // adjust car speed and steering angle based on input
        const a = velocity > 0 && car.speed > 0 ? accel : brake;
        car.speed += velocity * delta * a;
        if (car.speed > 0) {
            // apply friction
            car.speed -= friction * delta;
            // enforce speed limits and ensure friction doesn't make us go backwards
            if (car.speed < 0)
                car.speed = 0;
            if (car.speed > maxSpeed)
                car.speed = maxSpeed;
        }
        else if (car.speed < 0) {
            // apply friction
            car.speed += friction * delta;
            // enforce speed limits and ensure friction doesn't make us go forwards
            if (car.speed > 0)
                car.speed = 0;
            if (car.speed < minRevSpeed)
                car.speed = minRevSpeed;
        }
        if (turn) {
            // the faster we're going, the less we can turn
            const speedFactor = Math.min(1, Math.max(0, Math.abs(car.speed) / maxSpeed));
            car.steerAngle += turn * delta * turnRate * speedFactor;
            // enforce steering limits
            car.steerAngle = Math.max(-maxSteerAngle, Math.min(maxSteerAngle, car.steerAngle));
        }
        else {
            // return steering to center
            if (car.steerAngle > 0) {
                car.steerAngle = Math.max(0, car.steerAngle - delta * steerReturnSpeed);
            }
            else if (car.steerAngle < 0) {
                car.steerAngle = Math.min(0, car.steerAngle + delta * steerReturnSpeed);
            }
        }
        const updated = updateBicycle(car, delta);
        // we could check here for collision, that's why updated is separate from car
        // if no collision, update car
        car.location = updated.location;
        car.heading = updated.heading;
        //
        const buffer = state.view.getBuffer();
        const { width, height } = buffer;
        const vx = Math.floor(width / 2);
        // we place the car three quarters of the way down the screen facing up,
        // so we can see more of the road
        const vy = Math.floor(height * 0.75);
        // draw the track, centered on the car, onto the view, rotated by -carHeading
        drawRotated(track, car.location[0], car.location[1], buffer, vx, vy, -car.heading - deg90);
        // draw the car, centered on the car, onto the view
        drawRotated(carSprite, carCx, carCy, buffer, vx, vy, car.steerAngle);
        //
        if (!maybe(debugHelper))
            return;
        const kmph = car.speed * kmphScale;
        const fps = Math.round(1000 / delta);
        const fpsText = `${fps} fps (${delta.toFixed(1)}ms)`;
        const table = textTable([
            ['carX:', `${car.location[0].toFixed(4)}`],
            ['carY:', `${car.location[1].toFixed(4)}`],
            ['carHeading:', `${car.heading.toFixed(4)}`],
            ['carSpeed:', `${car.speed.toFixed(4)}`],
            ['carSteerAngle:', `${car.steerAngle.toFixed(4)}`],
            ['kmph:', `${kmph.toFixed(4)}`],
            ['turn:', `${turn}`],
            ['velocity:', `${velocity}`]
        ]);
        debugText = [
            fpsText,
            ...table
        ];
        debugHelper.update(state);
    };
    const quit = async (state) => {
        isActive = false;
        if (maybe(debugHelper))
            await debugHelper.quit(state);
        debugHelper = null;
    };
    const setActive = (active) => {
        isActive = active;
    };
    return { init, update, quit, setActive };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyLXNjZW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NjZW5lcy9jYXItc2NlbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUNqRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFFdkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ3RDLE9BQU8sRUFBVyxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFeEUsNkRBQTZEO0FBQzdELE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQTtBQUNkLDBCQUEwQjtBQUMxQixNQUFNLElBQUksR0FBRyxDQUFDLENBQUE7QUFFZCxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUEsQ0FBQywrQkFBK0I7QUFFbkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFFbEMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFBO0FBQzNCLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQTtBQUVqQyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsR0FBVSxFQUFFO0lBQ2xDLElBQUksUUFB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QUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM1QyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDeEMsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbEQsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDL0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQztZQUNwQixDQUFDLFdBQVcsRUFBRSxHQUFHLFFBQVEsRUFBRSxDQUFDO1NBQzdCLENBQUMsQ0FBQTtRQUVGLFNBQVMsR0FBRztZQUNWLE9BQU87WUFDUCxHQUFHLEtBQUs7U0FDVCxDQUFBO1FBRUQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUMzQixDQUFDLENBQUE7SUFFRCxNQUFNLElBQUksR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLEVBQUU7UUFDbEMsUUFBUSxHQUFHLEtBQUssQ0FBQTtRQUVoQixJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFBRSxNQUFNLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFckQsV0FBVyxHQUFHLElBQUksQ0FBQTtJQUNwQixDQUFDLENBQUE7SUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQWUsRUFBRSxFQUFFO1FBQ3BDLFFBQVEsR0FBRyxNQUFNLENBQUE7SUFDbkIsQ0FBQyxDQUFBO0lBRUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFBO0FBQzFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUltYWdlIH0gZnJvbSAnLi4vbGliL2ltYWdlL2NyZWF0ZS5qcydcclxuaW1wb3J0IHsgZmlsbCB9IGZyb20gJy4uL2xpYi9pbWFnZS9maWxsLmpzJ1xyXG5pbXBvcnQgeyBsb2FkSW1hZ2UgfSBmcm9tICcuLi9saWIvaW1hZ2UvbG9hZC5qcydcclxuaW1wb3J0IHsgZHJhd1JvdGF0ZWQgfSBmcm9tICcuLi9saWIvaW1hZ2Uvcm90YXRlLmpzJ1xyXG5pbXBvcnQgeyBwc2V0IH0gZnJvbSAnLi4vbGliL2ltYWdlL3V0aWwuanMnXHJcbmltcG9ydCB7IGRlYnVnVGV4dFNjZW5lSGVscGVyIH0gZnJvbSAnLi4vbGliL3NjZW5lL2RlYnVnLXRleHQuanMnXHJcbmltcG9ydCB7IHRleHRUYWJsZSB9IGZyb20gJy4uL2xpYi90ZXh0L3RhYmxlLWxheW91dC5qcydcclxuaW1wb3J0IHsgTWF5YmUsIFNjZW5lLCBTdGF0ZSB9IGZyb20gJy4uL2xpYi90eXBlcy5qcydcclxuaW1wb3J0IHsgbWF5YmUgfSBmcm9tICcuLi9saWIvdXRpbC5qcydcclxuaW1wb3J0IHsgQmljeWNsZSwgY3JlYXRlQmljeWNsZSwgdXBkYXRlQmljeWNsZSB9IGZyb20gJy4vY2FyL2JpY3ljbGUuanMnXHJcblxyXG4vLyAyLjVtIHdpZGUgLSBhIGxpdHRsZSB3aWRlIGJ1dCBuZWVkZWQgdG8gZml0IGhlYWRsaWdodHMgbG9sXHJcbmNvbnN0IGNhclcgPSA1XHJcbi8vIDQuNW0gbG9uZyAtIGFib3V0IHJpZ2h0XHJcbmNvbnN0IGNhckggPSA5XHJcblxyXG5jb25zdCB3aGVlbEJhc2UgPSA3IC8vIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gYXhsZXNcclxuXHJcbmNvbnN0IGNhckN4ID0gTWF0aC5mbG9vcihjYXJXIC8gMilcclxuY29uc3QgY2FyQ3kgPSBNYXRoLmZsb29yKGNhckggLyAyKVxyXG5cclxuY29uc3QgY2FyQ29sb3IgPSAweGZmZmY5OTMzXHJcbmNvbnN0IGhlYWRsaWdodENvbG9yID0gMHhmZjAwZmZmZlxyXG5cclxuZXhwb3J0IGNvbnN0IGNhclNjZW5lID0gKCk6IFNjZW5lID0+IHtcclxuICBsZXQgaXNBY3RpdmUgPSBmYWxzZVxyXG5cclxuICBsZXQgZGVidWdIZWxwZXI6IE1heWJlPFNjZW5lPlxyXG4gIGxldCBkZWJ1Z1RleHQ6IHN0cmluZ1tdID0gW11cclxuXHJcbiAgbGV0IHRyYWNrOiBNYXliZTxJbWFnZURhdGE+XHJcbiAgbGV0IGNhclNwcml0ZTogTWF5YmU8SW1hZ2VEYXRhPlxyXG5cclxuICAvLyB3aHkgYmljeWNsZT8gYmVjYXVzZSBpdCdzIGEgc2ltcGxlIHdheSB0byBtb2RlbCBjYXIgcGh5c2ljc1xyXG4gIGxldCBjYXI6IE1heWJlPEJpY3ljbGU+XHJcblxyXG4gIC8vXHJcblxyXG4gIGNvbnN0IGluaXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgICBkZWJ1Z0hlbHBlciA9IGRlYnVnVGV4dFNjZW5lSGVscGVyKCgpID0+IGRlYnVnVGV4dClcclxuXHJcbiAgICBhd2FpdCBkZWJ1Z0hlbHBlci5pbml0KHN0YXRlKVxyXG5cclxuICAgIC8vXHJcblxyXG4gICAgdHJhY2sgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvdHJhY2sucG5nJylcclxuXHJcbiAgICBjYXJTcHJpdGUgPSBjcmVhdGVJbWFnZShjYXJXLCBjYXJIKVxyXG5cclxuICAgIGZpbGwoY2FyU3ByaXRlLCBjYXJDb2xvcilcclxuICAgIHBzZXQoY2FyU3ByaXRlLCAxLCAwLCBoZWFkbGlnaHRDb2xvcilcclxuICAgIHBzZXQoY2FyU3ByaXRlLCAzLCAwLCBoZWFkbGlnaHRDb2xvcilcclxuXHJcbiAgICBjb25zdCB0cmFja0N4ID0gTWF0aC5mbG9vcih0cmFjay53aWR0aCAvIDIpXHJcbiAgICBjb25zdCB0cmFja0N5ID0gTWF0aC5mbG9vcih0cmFjay5oZWlnaHQgLyAyKVxyXG5cclxuICAgIGNhciA9IGNyZWF0ZUJpY3ljbGUoW3RyYWNrQ3gsIHRyYWNrQ3ldLCAwLCAwLCAwLCB3aGVlbEJhc2UpXHJcblxyXG4gICAgaXNBY3RpdmUgPSB0cnVlXHJcbiAgfVxyXG5cclxuICBsZXQgdHVybiA9IDBcclxuICBsZXQgdmVsb2NpdHkgPSAwXHJcblxyXG4gIGNvbnN0IGlvID0gKHN0YXRlOiBTdGF0ZSkgPT4ge1xyXG4gICAgY29uc3Qga2V5cyA9IHN0YXRlLmdldEtleXMoKVxyXG5cclxuICAgIHR1cm4gPSAwXHJcbiAgICB2ZWxvY2l0eSA9IDBcclxuXHJcbiAgICBpZiAoa2V5c1sndyddIHx8IGtleXNbJ1cnXSkge1xyXG4gICAgICB2ZWxvY2l0eSA9IDFcclxuICAgIH1cclxuXHJcbiAgICBpZiAoa2V5c1sncyddIHx8IGtleXNbJ1MnXSkge1xyXG4gICAgICB2ZWxvY2l0eSA9IC0xXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGtleXNbJ2EnXSB8fCBrZXlzWydBJ10pIHtcclxuICAgICAgdHVybiA9IC0xXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGtleXNbJ2QnXSB8fCBrZXlzWydEJ10pIHtcclxuICAgICAgdHVybiA9IDFcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBjb25zdCBkZWc5MCA9IE1hdGguUEkgLyAyXHJcblxyXG4gIGNvbnN0IHBpeGVsc1Blck1ldGVyID0gMlxyXG4gIGNvbnN0IGttcGhTY2FsZSA9IDkwMCAqIHBpeGVsc1Blck1ldGVyXHJcblxyXG4gIC8vIGNhciBzcGVjaWZpY1xyXG4gIGNvbnN0IG1heFNwZWVkS21waCA9IDE4MFxyXG5cclxuICAvLyBubyByYXRpb25hbCBiYXNpcyAtICBqdXN0IGZlZWxzICphYm91dCogcmlnaHRcclxuICAvLyB3b3J0aCBwbGF5aW5nIHdpdGghXHJcbiAgY29uc3QgZnJpY3Rpb25NcHMyID0gNSAvLyBtL3NeMlxyXG4gIGNvbnN0IGZyaWN0aW9uID0gZnJpY3Rpb25NcHMyICogKHBpeGVsc1Blck1ldGVyIC8gMWU2KVxyXG5cclxuICAvLyA4IHNlY29uZHMgdG8gYWNjZWxlcmF0ZSBmcm9tIDAgdG8gMTAwIGttL2hcclxuXHJcbiAgY29uc3QgYWNjZWxfMF8xMDAgPSA4IC8vIGNhciBzcGVjaWZpY1xyXG4gIGNvbnN0IHRpbWVUbzEwMG1zID0gYWNjZWxfMF8xMDAgKiAxMDAwIC8vIGVnIDgwMDBtc1xyXG4gIC8vIDEwMGttcGggaW4gcGl4ZWxzIHBlciBtc1xyXG4gIGNvbnN0IHNwZWVkMTAwID0gMTAwIC8ga21waFNjYWxlXHJcblxyXG4gIGNvbnN0IG5ldEFjY2VsID0gc3BlZWQxMDAgLyB0aW1lVG8xMDBtc1xyXG4gIGNvbnN0IGFjY2VsID0gbmV0QWNjZWwgKyBmcmljdGlvbiAvLyBlbnN1cmUgd2UgdGFrZSBmcmljdGlvbiBpbnRvIGFjY291bnRcclxuICAvLyBhZ2FpbiAtIG5vIHJhdGlvbmFsIGJhc2lzIC0ganVzdCBmZWVscyAqYWJvdXQqIHJpZ2h0XHJcblxyXG4gIC8vIGNhciBzcGVjaWZpY1xyXG4gIGNvbnN0IGJyYWtlRmFjdG9yID0gMlxyXG4gIGNvbnN0IGJyYWtlID0gYWNjZWwgKiBicmFrZUZhY3RvclxyXG5cclxuICBjb25zdCB0dXJuUmF0ZSA9IDAuMDAwNVxyXG4gIGNvbnN0IHN0ZWVyUmV0dXJuU3BlZWQgPSAwLjAwMVxyXG4gIGNvbnN0IG1heFN0ZWVyQW5nbGUgPSAwLjVcclxuXHJcbiAgY29uc3QgbWF4U3BlZWQgPSBtYXhTcGVlZEttcGggLyBrbXBoU2NhbGVcclxuICBjb25zdCBtaW5SZXZTcGVlZCA9IC0obWF4U3BlZWQgLyAyKVxyXG5cclxuICBjb25zdCB1cGRhdGUgPSAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgICBpZiAoIW1heWJlKHRyYWNrKSkgdGhyb3cgRXJyb3IoJ0V4cGVjdGVkIHRyYWNrJylcclxuICAgIGlmICghbWF5YmUoY2FyU3ByaXRlKSkgdGhyb3cgRXJyb3IoJ0V4cGVjdGVkIGNhclNwcml0ZScpXHJcbiAgICBpZiAoIW1heWJlKGNhcikpIHRocm93IEVycm9yKCdFeHBlY3RlZCBjYXInKVxyXG5cclxuICAgIGlmIChpc0FjdGl2ZSkgaW8oc3RhdGUpXHJcblxyXG4gICAgY29uc3QgZGVsdGEgPSBzdGF0ZS50aW1lLmdldEZyYW1lVGltZSgpXHJcblxyXG4gICAgLy9cclxuXHJcbiAgICAvLyBhZGp1c3QgY2FyIHNwZWVkIGFuZCBzdGVlcmluZyBhbmdsZSBiYXNlZCBvbiBpbnB1dFxyXG4gICAgY29uc3QgYSA9IHZlbG9jaXR5ID4gMCAmJiBjYXIuc3BlZWQgPiAwID8gYWNjZWwgOiBicmFrZVxyXG5cclxuICAgIGNhci5zcGVlZCArPSB2ZWxvY2l0eSAqIGRlbHRhICogYVxyXG5cclxuICAgIGlmIChjYXIuc3BlZWQgPiAwKSB7XHJcbiAgICAgIC8vIGFwcGx5IGZyaWN0aW9uXHJcbiAgICAgIGNhci5zcGVlZCAtPSBmcmljdGlvbiAqIGRlbHRhXHJcblxyXG4gICAgICAvLyBlbmZvcmNlIHNwZWVkIGxpbWl0cyBhbmQgZW5zdXJlIGZyaWN0aW9uIGRvZXNuJ3QgbWFrZSB1cyBnbyBiYWNrd2FyZHNcclxuICAgICAgaWYgKGNhci5zcGVlZCA8IDApIGNhci5zcGVlZCA9IDBcclxuICAgICAgaWYgKGNhci5zcGVlZCA+IG1heFNwZWVkKSBjYXIuc3BlZWQgPSBtYXhTcGVlZFxyXG4gICAgfSBlbHNlIGlmIChjYXIuc3BlZWQgPCAwKSB7XHJcbiAgICAgIC8vIGFwcGx5IGZyaWN0aW9uXHJcbiAgICAgIGNhci5zcGVlZCArPSBmcmljdGlvbiAqIGRlbHRhXHJcblxyXG4gICAgICAvLyBlbmZvcmNlIHNwZWVkIGxpbWl0cyBhbmQgZW5zdXJlIGZyaWN0aW9uIGRvZXNuJ3QgbWFrZSB1cyBnbyBmb3J3YXJkc1xyXG4gICAgICBpZiAoY2FyLnNwZWVkID4gMCkgY2FyLnNwZWVkID0gMFxyXG4gICAgICBpZiAoY2FyLnNwZWVkIDwgbWluUmV2U3BlZWQpIGNhci5zcGVlZCA9IG1pblJldlNwZWVkXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR1cm4pIHtcclxuICAgICAgLy8gdGhlIGZhc3RlciB3ZSdyZSBnb2luZywgdGhlIGxlc3Mgd2UgY2FuIHR1cm5cclxuICAgICAgY29uc3Qgc3BlZWRGYWN0b3IgPSBNYXRoLm1pbihcclxuICAgICAgICAxLCBNYXRoLm1heCgwLCBNYXRoLmFicyhjYXIuc3BlZWQpIC8gbWF4U3BlZWQpXHJcbiAgICAgIClcclxuXHJcbiAgICAgIGNhci5zdGVlckFuZ2xlICs9IHR1cm4gKiBkZWx0YSAqIHR1cm5SYXRlICogc3BlZWRGYWN0b3JcclxuXHJcbiAgICAgIC8vIGVuZm9yY2Ugc3RlZXJpbmcgbGltaXRzXHJcbiAgICAgIGNhci5zdGVlckFuZ2xlID0gTWF0aC5tYXgoXHJcbiAgICAgICAgLW1heFN0ZWVyQW5nbGUsXHJcbiAgICAgICAgTWF0aC5taW4obWF4U3RlZXJBbmdsZSwgY2FyLnN0ZWVyQW5nbGUpXHJcbiAgICAgIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHJldHVybiBzdGVlcmluZyB0byBjZW50ZXJcclxuICAgICAgaWYgKGNhci5zdGVlckFuZ2xlID4gMCkge1xyXG4gICAgICAgIGNhci5zdGVlckFuZ2xlID0gTWF0aC5tYXgoMCwgY2FyLnN0ZWVyQW5nbGUgLSBkZWx0YSAqIHN0ZWVyUmV0dXJuU3BlZWQpXHJcbiAgICAgIH0gZWxzZSBpZiAoY2FyLnN0ZWVyQW5nbGUgPCAwKSB7XHJcbiAgICAgICAgY2FyLnN0ZWVyQW5nbGUgPSBNYXRoLm1pbigwLCBjYXIuc3RlZXJBbmdsZSArIGRlbHRhICogc3RlZXJSZXR1cm5TcGVlZClcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWQgPSB1cGRhdGVCaWN5Y2xlKGNhciwgZGVsdGEpXHJcblxyXG4gICAgLy8gd2UgY291bGQgY2hlY2sgaGVyZSBmb3IgY29sbGlzaW9uLCB0aGF0J3Mgd2h5IHVwZGF0ZWQgaXMgc2VwYXJhdGUgZnJvbSBjYXJcclxuXHJcbiAgICAvLyBpZiBubyBjb2xsaXNpb24sIHVwZGF0ZSBjYXJcclxuICAgIGNhci5sb2NhdGlvbiA9IHVwZGF0ZWQubG9jYXRpb25cclxuICAgIGNhci5oZWFkaW5nID0gdXBkYXRlZC5oZWFkaW5nXHJcblxyXG4gICAgLy9cclxuXHJcbiAgICBjb25zdCBidWZmZXIgPSBzdGF0ZS52aWV3LmdldEJ1ZmZlcigpXHJcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGJ1ZmZlclxyXG5cclxuICAgIGNvbnN0IHZ4ID0gTWF0aC5mbG9vcih3aWR0aCAvIDIpXHJcbiAgICAvLyB3ZSBwbGFjZSB0aGUgY2FyIHRocmVlIHF1YXJ0ZXJzIG9mIHRoZSB3YXkgZG93biB0aGUgc2NyZWVuIGZhY2luZyB1cCxcclxuICAgIC8vIHNvIHdlIGNhbiBzZWUgbW9yZSBvZiB0aGUgcm9hZFxyXG4gICAgY29uc3QgdnkgPSBNYXRoLmZsb29yKGhlaWdodCAqIDAuNzUpXHJcblxyXG4gICAgLy8gZHJhdyB0aGUgdHJhY2ssIGNlbnRlcmVkIG9uIHRoZSBjYXIsIG9udG8gdGhlIHZpZXcsIHJvdGF0ZWQgYnkgLWNhckhlYWRpbmdcclxuICAgIGRyYXdSb3RhdGVkKFxyXG4gICAgICB0cmFjaywgY2FyLmxvY2F0aW9uWzBdLCBjYXIubG9jYXRpb25bMV0sIGJ1ZmZlciwgdngsIHZ5LFxyXG4gICAgICAtY2FyLmhlYWRpbmcgLSBkZWc5MFxyXG4gICAgKVxyXG4gICAgLy8gZHJhdyB0aGUgY2FyLCBjZW50ZXJlZCBvbiB0aGUgY2FyLCBvbnRvIHRoZSB2aWV3XHJcbiAgICBkcmF3Um90YXRlZChjYXJTcHJpdGUsIGNhckN4LCBjYXJDeSwgYnVmZmVyLCB2eCwgdnksIGNhci5zdGVlckFuZ2xlKVxyXG5cclxuICAgIC8vXHJcblxyXG4gICAgaWYgKCFtYXliZShkZWJ1Z0hlbHBlcikpIHJldHVyblxyXG5cclxuICAgIGNvbnN0IGttcGggPSBjYXIuc3BlZWQgKiBrbXBoU2NhbGVcclxuXHJcbiAgICBjb25zdCBmcHMgPSBNYXRoLnJvdW5kKDEwMDAgLyBkZWx0YSlcclxuICAgIGNvbnN0IGZwc1RleHQgPSBgJHtmcHN9IGZwcyAoJHtkZWx0YS50b0ZpeGVkKDEpfW1zKWBcclxuXHJcbiAgICBjb25zdCB0YWJsZSA9IHRleHRUYWJsZShbXHJcbiAgICAgIFsnY2FyWDonLCBgJHtjYXIubG9jYXRpb25bMF0udG9GaXhlZCg0KX1gXSxcclxuICAgICAgWydjYXJZOicsIGAke2Nhci5sb2NhdGlvblsxXS50b0ZpeGVkKDQpfWBdLFxyXG4gICAgICBbJ2NhckhlYWRpbmc6JywgYCR7Y2FyLmhlYWRpbmcudG9GaXhlZCg0KX1gXSxcclxuICAgICAgWydjYXJTcGVlZDonLCBgJHtjYXIuc3BlZWQudG9GaXhlZCg0KX1gXSxcclxuICAgICAgWydjYXJTdGVlckFuZ2xlOicsIGAke2Nhci5zdGVlckFuZ2xlLnRvRml4ZWQoNCl9YF0sXHJcbiAgICAgIFsna21waDonLCBgJHtrbXBoLnRvRml4ZWQoNCl9YF0sXHJcbiAgICAgIFsndHVybjonLCBgJHt0dXJufWBdLFxyXG4gICAgICBbJ3ZlbG9jaXR5OicsIGAke3ZlbG9jaXR5fWBdXHJcbiAgICBdKVxyXG5cclxuICAgIGRlYnVnVGV4dCA9IFtcclxuICAgICAgZnBzVGV4dCxcclxuICAgICAgLi4udGFibGVcclxuICAgIF1cclxuXHJcbiAgICBkZWJ1Z0hlbHBlci51cGRhdGUoc3RhdGUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBxdWl0ID0gYXN5bmMgKHN0YXRlOiBTdGF0ZSkgPT4ge1xyXG4gICAgaXNBY3RpdmUgPSBmYWxzZVxyXG5cclxuICAgIGlmIChtYXliZShkZWJ1Z0hlbHBlcikpIGF3YWl0IGRlYnVnSGVscGVyLnF1aXQoc3RhdGUpXHJcblxyXG4gICAgZGVidWdIZWxwZXIgPSBudWxsXHJcbiAgfVxyXG5cclxuICBjb25zdCBzZXRBY3RpdmUgPSAoYWN0aXZlOiBib29sZWFuKSA9PiB7XHJcbiAgICBpc0FjdGl2ZSA9IGFjdGl2ZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgaW5pdCwgdXBkYXRlLCBxdWl0LCBzZXRBY3RpdmUgfVxyXG59XHJcbiJdfQ==