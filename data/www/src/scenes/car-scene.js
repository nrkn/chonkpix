import { createHeightmapI16 } from '../lib/heightmap/create.js';
import { bresenhamLine } from '../lib/image/bresenham.js';
import { createColor } from '../lib/image/color.js';
import { loadImage } from '../lib/image/load.js';
import { bilinearResize } from '../lib/image/resize.js';
import { drawRotatedAndPointScaled } from '../lib/image/rotate.js';
import { clampRect, pset } from '../lib/image/util.js';
import { debugTextSceneHelper } from '../lib/scene/debug-text.js';
import { zoomOnWheel } from '../lib/scene/io.js';
import { textTable } from '../lib/text/table-layout.js';
import { maybe } from '../lib/util.js';
import { createBicycle, updateBicycle } from './car/bicycle.js';
// 2.5m wide - a little wide but needed to fit headlights lol
const carW = 5;
// 4.5m long - about right
const carH = 9;
const carCx = Math.floor(carW / 2);
const carCy = Math.floor(carH / 2);
const carColor = 0xffff9933;
const headlightColor = 0xff00ffff;
const carConfig = {
    wheelBase: 7,
    accel_0_100: 8,
    maxSpeedKmph: 180,
    revSpeedFactor: 0.5,
    brakeFactor: 2,
    frictionFactor: 1,
    turnRate: 0.0005,
    steerReturnSpeed: 0.001,
    maxSteerAngle: 0.5
};
const worldConfig = {
    pixelsPerMeter: 2,
    globalFriction: 5
};
const minZoom = 0.75;
const maxZoom = 1.5;
const zoomDelta = maxZoom - minZoom;
// derived from car and world config
const deg90 = Math.PI / 2;
const deg270 = 3 * deg90;
const kmphScale = 900 * worldConfig.pixelsPerMeter;
// no rational basis -  just feels *about* right
// worth playing with!
const frictionMps2 = worldConfig.globalFriction * carConfig.frictionFactor; // m/s^2
const friction = frictionMps2 * (worldConfig.pixelsPerMeter / 1e6);
const timeTo100ms = carConfig.accel_0_100 * 1000; // eg 8000ms
// 100kmph in pixels per ms
const speed100 = 100 / kmphScale;
const netAccel = speed100 / timeTo100ms;
const accel = netAccel + friction; // ensure we take friction into account
// again - no rational basis - just feels *about* right
// car specific
const brake = accel * carConfig.brakeFactor;
const maxSpeed = carConfig.maxSpeedKmph / kmphScale;
const minRevSpeed = -(maxSpeed * carConfig.revSpeedFactor);
const fillHm = (hm, rect, value) => {
    rect = clampRect(hm.width, hm.height, rect);
    for (let y = rect[1]; y < rect[3]; y++) {
        const rowStart = y * hm.width;
        for (let x = rect[0]; x < rect[2]; x++) {
            hm.data[rowStart + x] = value;
        }
    }
};
export const carScene = () => {
    let isActive = false;
    let lastW = 0;
    let lastH = 0;
    let debugHelper;
    let debugText = [];
    let track;
    let hm;
    let carSprite;
    // why bicycle? because it's a simple way to model car physics
    let car;
    let reverseTurning = 'arcade';
    //
    const init = async (state) => {
        debugHelper = debugTextSceneHelper(() => debugText);
        await debugHelper.init(state);
        // // test tracks - worlds from other games etc
        //track = await loadImage('scenes/car/track.png')
        //track = await loadImage('scenes/car/gtav-1bpp.png')
        //track = await loadImage('scenes/car/gtav-map.png')
        //track = await loadImage('scenes/car/gtav-satellite.png')
        //track = await loadImage('scenes/car/fortnite.jpg')
        //track = await loadImage('scenes/car/fantasy-world.png')
        //track = await loadImage('scenes/car/fantasy-city.jpg')
        track = await loadImage('scenes/car/GrandTheftAuto2-Downtown.jpg');
        //track = await loadImage('scenes/car/MarioKart64-MushroomCup-KalimariDesert.jpg')
        //track = await loadImage('scenes/car/MarioKart64-MushroomCup-KoopaTroopaBeach.jpg')
        //track = await loadImage('scenes/car/MarioKart64-MushroomCup-LuigiRaceway.jpg')
        //track = await loadImage('scenes/car/MarioKart64-MushroomCup-MooMooFarm.jpg')
        //track = await loadImage('scenes/car/MarioKart64-FlowerCup-MarioRaceway.jpg')
        // custom world
        const worldW = 2048;
        const worldH = 2048;
        // texture
        // track = createImage(worldW, worldH)
        // heightmap
        hm = createHeightmapI16(worldW, worldH);
        // carSprite = createImage(carW, carH)
        // fill(carSprite, carColor)
        // pset(carSprite, 1, 0, headlightColor)
        // pset(carSprite, 3, 0, headlightColor)
        carSprite = await loadImage('scenes/car/car.png');
        const trackCx = Math.floor(track.width / 2);
        const trackCy = Math.floor(track.height / 2);
        //const trackCx = 5411
        //const trackCy = 14696
        car = createBicycle([trackCx, trackCy], deg270, 0, 0, carConfig.wheelBase);
        reverseTurning = 'realistic';
        isActive = true;
    };
    let turn = 0;
    let velocity = 0;
    const io = (state) => {
        const keys = state.getKeys();
        turn = 0;
        velocity = 0;
        if (keys['w'] || keys['W']) {
            velocity = 1;
        }
        if (keys['s'] || keys['S']) {
            velocity = -1;
        }
        if (keys['a'] || keys['A']) {
            turn = -1;
        }
        if (keys['d'] || keys['D']) {
            turn = 1;
        }
        if (zoomOnWheel(state)) {
            lastW = 0;
            lastH = 0;
        }
    };
    const update = (state) => {
        if (!maybe(track))
            throw Error('Expected track');
        if (!maybe(hm))
            throw Error('Expected hm');
        if (!maybe(carSprite))
            throw Error('Expected carSprite');
        if (!maybe(car))
            throw Error('Expected car');
        if (isActive)
            io(state);
        const delta = state.time.getFrameTime();
        // adjust car speed and steering angle based on input
        // are we accelerating or braking?
        const a = velocity > 0 && car.speed > 0 ? accel : brake;
        car.speed += velocity * delta * a;
        if (car.speed > 0) {
            // apply friction
            car.speed -= friction * delta;
            // enforce speed limits and ensure friction doesn't make us go backwards
            if (car.speed < 0)
                car.speed = 0;
            if (car.speed > maxSpeed)
                car.speed = maxSpeed;
        }
        else if (car.speed < 0) {
            // apply friction
            car.speed += friction * delta;
            // enforce speed limits and ensure friction doesn't make us go forwards
            if (car.speed > 0)
                car.speed = 0;
            if (car.speed < minRevSpeed)
                car.speed = minRevSpeed;
        }
        if (turn) {
            if (reverseTurning === 'arcade' || car.speed >= 0) {
                car.steerAngle += turn * delta * carConfig.turnRate;
            }
            else {
                // reversing - invert turn
                car.steerAngle -= turn * delta * carConfig.turnRate;
            }
            // enforce steering limits
            car.steerAngle = Math.max(-carConfig.maxSteerAngle, Math.min(carConfig.maxSteerAngle, car.steerAngle));
        }
        else {
            // return steering to center
            if (car.steerAngle > 0) {
                car.steerAngle = Math.max(0, car.steerAngle - delta * carConfig.steerReturnSpeed);
            }
            else if (car.steerAngle < 0) {
                car.steerAngle = Math.min(0, car.steerAngle + delta * carConfig.steerReturnSpeed);
            }
        }
        const updated = updateBicycle(car, delta);
        // collision detection
        const travel = bresenhamLine(car.location[0], car.location[1], updated.location[0], updated.location[1]);
        if (travel.length > 1) {
            let first = travel[0];
            for (let i = 1; i < travel.length; i++) {
                // todo
            }
        }
        // if no collision, update car
        car.location = updated.location;
        car.heading = updated.heading;
        //
        const zoom = minZoom + (1 - (Math.abs(car.speed) / maxSpeed)) * zoomDelta;
        //
        const buffer = state.view.getBuffer();
        const { width, height } = buffer;
        const vx = Math.floor(width / 2);
        // we place the car down the screen facing up,
        // so we can see more of the road ahead
        const vy = Math.floor(height * 0.875);
        // draw the track, centered on the car, onto the view, rotated by -carHeading
        // and then deg90 to face "up"
        drawRotatedAndPointScaled(track, car.location[0], car.location[1], buffer, vx, vy, -car.heading - deg90, zoom);
        // draw the car, centered on the car, onto the view
        drawRotatedAndPointScaled(carSprite, carCx, carCy, buffer, vx, vy, car.steerAngle, zoom);
        // mini map
        const mmHeight = Math.floor(height / 2);
        const mmScale = mmHeight / track.height;
        const mmWidth = Math.floor(track.width * mmScale);
        const mmX = 2;
        const mmY = height - mmHeight - 2;
        // pointResize(
        //   track, buffer,
        //   [0, 0, track.width, track.height],
        //   [mmX, mmY, mmWidth, mmHeight]
        // )
        bilinearResize(track, buffer, [0, 0, track.width, track.height], [mmX, mmY, mmWidth, mmHeight]);
        const mmCarX = Math.floor(car.location[0] * mmScale) + mmX;
        const mmCarY = Math.floor(car.location[1] * mmScale) + mmY;
        const red = createColor(255, 0, 0);
        pset(buffer, mmCarX, mmCarY, red);
        if (!maybe(debugHelper))
            return;
        const kmph = car.speed * kmphScale;
        const fps = Math.round(1000 / delta);
        const fpsText = `${fps} fps (${delta.toFixed(1)}ms)`;
        const table = textTable([
            ['x:', `${car.location[0].toFixed(4)}`],
            ['y:', `${car.location[1].toFixed(4)}`],
            ['heading:', `${car.heading.toFixed(4)}`],
            ['speed:', `${car.speed.toFixed(4)}`],
            ['steer:', `${car.steerAngle.toFixed(4)}`],
            ['kmph:', `${kmph.toFixed(4)}`],
            ['turn:', `${turn}`],
            ['velocity:', `${velocity}`]
        ]);
        debugText = [
            fpsText,
            ...table
        ];
        debugHelper.update(state);
    };
    const quit = async (state) => {
        isActive = false;
        if (maybe(debugHelper))
            await debugHelper.quit(state);
        debugHelper = null;
    };
    const setActive = (active) => {
        isActive = active;
    };
    return { init, update, quit, setActive };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyLXNjZW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NjZW5lcy9jYXItc2NlbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFFL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUduRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBZSxNQUFNLHdCQUF3QixDQUFBO0FBQ3BFLE9BQU8sRUFBZSx5QkFBeUIsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQy9FLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDakUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUV2RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDdEMsT0FBTyxFQUFXLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUV4RSw2REFBNkQ7QUFDN0QsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFBO0FBQ2QsMEJBQTBCO0FBQzFCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQTtBQUVkLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBRWxDLE1BQU0sUUFBUSxH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QUNwQyxRQUFRLEdBQUcsTUFBTSxDQUFBO0lBQ25CLENBQUMsQ0FBQTtJQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQTtBQUMxQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVIZWlnaHRtYXBJMTYgfSBmcm9tICcuLi9saWIvaGVpZ2h0bWFwL2NyZWF0ZS5qcydcclxuaW1wb3J0IHsgSGVpZ2h0bWFwIH0gZnJvbSAnLi4vbGliL2hlaWdodG1hcC90eXBlcy5qcydcclxuaW1wb3J0IHsgYnJlc2VuaGFtTGluZSB9IGZyb20gJy4uL2xpYi9pbWFnZS9icmVzZW5oYW0uanMnXHJcbmltcG9ydCB7IGNyZWF0ZUNvbG9yIH0gZnJvbSAnLi4vbGliL2ltYWdlL2NvbG9yLmpzJ1xyXG5pbXBvcnQgeyBjcmVhdGVJbWFnZSB9IGZyb20gJy4uL2xpYi9pbWFnZS9jcmVhdGUuanMnXHJcbmltcG9ydCB7IGZpbGwgfSBmcm9tICcuLi9saWIvaW1hZ2UvZmlsbC5qcydcclxuaW1wb3J0IHsgbG9hZEltYWdlIH0gZnJvbSAnLi4vbGliL2ltYWdlL2xvYWQuanMnXHJcbmltcG9ydCB7IGJpbGluZWFyUmVzaXplLCBwb2ludFJlc2l6ZSB9IGZyb20gJy4uL2xpYi9pbWFnZS9yZXNpemUuanMnXHJcbmltcG9ydCB7IGRyYXdSb3RhdGVkLCBkcmF3Um90YXRlZEFuZFBvaW50U2NhbGVkIH0gZnJvbSAnLi4vbGliL2ltYWdlL3JvdGF0ZS5qcydcclxuaW1wb3J0IHsgY2xhbXBSZWN0LCBwc2V0IH0gZnJvbSAnLi4vbGliL2ltYWdlL3V0aWwuanMnXHJcbmltcG9ydCB7IGRlYnVnVGV4dFNjZW5lSGVscGVyIH0gZnJvbSAnLi4vbGliL3NjZW5lL2RlYnVnLXRleHQuanMnXHJcbmltcG9ydCB7IHpvb21PbldoZWVsIH0gZnJvbSAnLi4vbGliL3NjZW5lL2lvLmpzJ1xyXG5pbXBvcnQgeyB0ZXh0VGFibGUgfSBmcm9tICcuLi9saWIvdGV4dC90YWJsZS1sYXlvdXQuanMnXHJcbmltcG9ydCB7IE1heWJlLCBTY2VuZSwgU3RhdGUsIFQ0IH0gZnJvbSAnLi4vbGliL3R5cGVzLmpzJ1xyXG5pbXBvcnQgeyBtYXliZSB9IGZyb20gJy4uL2xpYi91dGlsLmpzJ1xyXG5pbXBvcnQgeyBCaWN5Y2xlLCBjcmVhdGVCaWN5Y2xlLCB1cGRhdGVCaWN5Y2xlIH0gZnJvbSAnLi9jYXIvYmljeWNsZS5qcydcclxuXHJcbi8vIDIuNW0gd2lkZSAtIGEgbGl0dGxlIHdpZGUgYnV0IG5lZWRlZCB0byBmaXQgaGVhZGxpZ2h0cyBsb2xcclxuY29uc3QgY2FyVyA9IDVcclxuLy8gNC41bSBsb25nIC0gYWJvdXQgcmlnaHRcclxuY29uc3QgY2FySCA9IDlcclxuXHJcbmNvbnN0IGNhckN4ID0gTWF0aC5mbG9vcihjYXJXIC8gMilcclxuY29uc3QgY2FyQ3kgPSBNYXRoLmZsb29yKGNhckggLyAyKVxyXG5cclxuY29uc3QgY2FyQ29sb3IgPSAweGZmZmY5OTMzXHJcbmNvbnN0IGhlYWRsaWdodENvbG9yID0gMHhmZjAwZmZmZlxyXG5cclxudHlwZSBDYXJDb25maWcgPSB7XHJcbiAgd2hlZWxCYXNlOiBudW1iZXIgLy8gcGl4ZWxzIC0gZGlzdGFuY2UgYmV0d2VlbiBmcm9udCBhbmQgYmFjayB3aGVlbHNcclxuICBhY2NlbF8wXzEwMDogbnVtYmVyIC8vIHNlY29uZHNcclxuICBtYXhTcGVlZEttcGg6IG51bWJlclxyXG4gIHJldlNwZWVkRmFjdG9yOiBudW1iZXJcclxuICBicmFrZUZhY3RvcjogbnVtYmVyXHJcbiAgZnJpY3Rpb25GYWN0b3I6IG51bWJlclxyXG4gIHR1cm5SYXRlOiBudW1iZXIgLy8gcmFkcyBwZXIgbXNcclxuICBzdGVlclJldHVyblNwZWVkOiBudW1iZXIgLy8gcmFkcyBwZXIgbXNcclxuICBtYXhTdGVlckFuZ2xlOiBudW1iZXJcclxufVxyXG5cclxuY29uc3QgY2FyQ29uZmlnOiBDYXJDb25maWcgPSB7XHJcbiAgd2hlZWxCYXNlOiA3LFxyXG4gIGFjY2VsXzBfMTAwOiA4LFxyXG4gIG1heFNwZWVkS21waDogMTgwLFxyXG4gIHJldlNwZWVkRmFjdG9yOiAwLjUsXHJcbiAgYnJha2VGYWN0b3I6IDIsXHJcbiAgZnJpY3Rpb25GYWN0b3I6IDEsXHJcbiAgdHVyblJhdGU6IDAuMDAwNSxcclxuICBzdGVlclJldHVyblNwZWVkOiAwLjAwMSxcclxuICBtYXhTdGVlckFuZ2xlOiAwLjVcclxufVxyXG5cclxudHlwZSBXb3JsZENvbmZpZyA9IHtcclxuICBwaXhlbHNQZXJNZXRlcjogbnVtYmVyXHJcbiAgZ2xvYmFsRnJpY3Rpb246IG51bWJlclxyXG59XHJcblxyXG5jb25zdCB3b3JsZENvbmZpZzogV29ybGRDb25maWcgPSB7XHJcbiAgcGl4ZWxzUGVyTWV0ZXI6IDIsXHJcbiAgZ2xvYmFsRnJpY3Rpb246IDVcclxufVxyXG5cclxuY29uc3QgbWluWm9vbSA9IDAuNzVcclxuY29uc3QgbWF4Wm9vbSA9IDEuNVxyXG5cclxuY29uc3Qgem9vbURlbHRhID0gbWF4Wm9vbSAtIG1pblpvb21cclxuXHJcbi8vIGRlcml2ZWQgZnJvbSBjYXIgYW5kIHdvcmxkIGNvbmZpZ1xyXG5jb25zdCBkZWc5MCA9IE1hdGguUEkgLyAyXHJcbmNvbnN0IGRlZzI3MCA9IDMgKiBkZWc5MFxyXG5cclxuY29uc3Qga21waFNjYWxlID0gOTAwICogd29ybGRDb25maWcucGl4ZWxzUGVyTWV0ZXJcclxuXHJcbi8vIG5vIHJhdGlvbmFsIGJhc2lzIC0gIGp1c3QgZmVlbHMgKmFib3V0KiByaWdodFxyXG4vLyB3b3J0aCBwbGF5aW5nIHdpdGghXHJcbmNvbnN0IGZyaWN0aW9uTXBzMiA9IHdvcmxkQ29uZmlnLmdsb2JhbEZyaWN0aW9uICogY2FyQ29uZmlnLmZyaWN0aW9uRmFjdG9yIC8vIG0vc14yXHJcbmNvbnN0IGZyaWN0aW9uID0gZnJpY3Rpb25NcHMyICogKHdvcmxkQ29uZmlnLnBpeGVsc1Blck1ldGVyIC8gMWU2KVxyXG5cclxuY29uc3QgdGltZVRvMTAwbXMgPSBjYXJDb25maWcuYWNjZWxfMF8xMDAgKiAxMDAwIC8vIGVnIDgwMDBtc1xyXG4vLyAxMDBrbXBoIGluIHBpeGVscyBwZXIgbXNcclxuY29uc3Qgc3BlZWQxMDAgPSAxMDAgLyBrbXBoU2NhbGVcclxuXHJcbmNvbnN0IG5ldEFjY2VsID0gc3BlZWQxMDAgLyB0aW1lVG8xMDBtc1xyXG5jb25zdCBhY2NlbCA9IG5ldEFjY2VsICsgZnJpY3Rpb24gLy8gZW5zdXJlIHdlIHRha2UgZnJpY3Rpb24gaW50byBhY2NvdW50XHJcbi8vIGFnYWluIC0gbm8gcmF0aW9uYWwgYmFzaXMgLSBqdXN0IGZlZWxzICphYm91dCogcmlnaHRcclxuXHJcbi8vIGNhciBzcGVjaWZpY1xyXG5jb25zdCBicmFrZSA9IGFjY2VsICogY2FyQ29uZmlnLmJyYWtlRmFjdG9yXHJcblxyXG5jb25zdCBtYXhTcGVlZCA9IGNhckNvbmZpZy5tYXhTcGVlZEttcGggLyBrbXBoU2NhbGVcclxuY29uc3QgbWluUmV2U3BlZWQgPSAtKG1heFNwZWVkICogY2FyQ29uZmlnLnJldlNwZWVkRmFjdG9yKVxyXG5cclxudHlwZSBSZXZlcnNlVHVybmluZyA9ICdhcmNhZGUnIHwgJ3JlYWxpc3RpYydcclxuXHJcbnR5cGUgSG0gPSBIZWlnaHRtYXA8SW50MTZBcnJheT5cclxuXHJcbmNvbnN0IGZpbGxIbSA9IChobTogSG0sIHJlY3Q6IFQ0LCB2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgcmVjdCA9IGNsYW1wUmVjdChobS53aWR0aCwgaG0uaGVpZ2h0LCByZWN0KVxyXG5cclxuICBmb3IgKGxldCB5ID0gcmVjdFsxXTsgeSA8IHJlY3RbM107IHkrKykge1xyXG4gICAgY29uc3Qgcm93U3RhcnQgPSB5ICogaG0ud2lkdGhcclxuICAgIGZvciAobGV0IHggPSByZWN0WzBdOyB4IDwgcmVjdFsyXTsgeCsrKSB7XHJcbiAgICAgIGhtLmRhdGFbcm93U3RhcnQgKyB4XSA9IHZhbHVlXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2FyU2NlbmUgPSAoKTogU2NlbmUgPT4ge1xyXG4gIGxldCBpc0FjdGl2ZSA9IGZhbHNlXHJcbiAgbGV0IGxhc3RXID0gMFxyXG4gIGxldCBsYXN0SCA9IDBcclxuXHJcbiAgbGV0IGRlYnVnSGVscGVyOiBNYXliZTxTY2VuZT5cclxuICBsZXQgZGVidWdUZXh0OiBzdHJpbmdbXSA9IFtdXHJcblxyXG4gIGxldCB0cmFjazogTWF5YmU8SW1hZ2VEYXRhPlxyXG4gIGxldCBobTogTWF5YmU8SG0+XHJcbiAgbGV0IGNhclNwcml0ZTogTWF5YmU8SW1hZ2VEYXRhPlxyXG5cclxuICAvLyB3aHkgYmljeWNsZT8gYmVjYXVzZSBpdCdzIGEgc2ltcGxlIHdheSB0byBtb2RlbCBjYXIgcGh5c2ljc1xyXG4gIGxldCBjYXI6IE1heWJlPEJpY3ljbGU+XHJcblxyXG4gIGxldCByZXZlcnNlVHVybmluZzogUmV2ZXJzZVR1cm5pbmcgPSAnYXJjYWRlJ1xyXG5cclxuICAvL1xyXG5cclxuICBjb25zdCBpbml0ID0gYXN5bmMgKHN0YXRlOiBTdGF0ZSkgPT4ge1xyXG4gICAgZGVidWdIZWxwZXIgPSBkZWJ1Z1RleHRTY2VuZUhlbHBlcigoKSA9PiBkZWJ1Z1RleHQpXHJcblxyXG4gICAgYXdhaXQgZGVidWdIZWxwZXIuaW5pdChzdGF0ZSlcclxuXHJcbiAgICAvLyAvLyB0ZXN0IHRyYWNrcyAtIHdvcmxkcyBmcm9tIG90aGVyIGdhbWVzIGV0Y1xyXG4gICAgLy90cmFjayA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL2Nhci90cmFjay5wbmcnKVxyXG4gICAgLy90cmFjayA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL2Nhci9ndGF2LTFicHAucG5nJylcclxuICAgIC8vdHJhY2sgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvZ3Rhdi1tYXAucG5nJylcclxuICAgIC8vdHJhY2sgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvZ3Rhdi1zYXRlbGxpdGUucG5nJylcclxuICAgIC8vdHJhY2sgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvZm9ydG5pdGUuanBnJylcclxuICAgIC8vdHJhY2sgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9jYXIvZmFudGFzeS13b3JsZC5wbmcnKVxyXG4gICAgLy90cmFjayA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL2Nhci9mYW50YXN5LWNpdHkuanBnJylcclxuICAgIHRyYWNrID0gYXdhaXQgbG9hZEltYWdlKCdzY2VuZXMvY2FyL0dyYW5kVGhlZnRBdXRvMi1Eb3dudG93bi5qcGcnKVxyXG4gICAgLy90cmFjayA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL2Nhci9NYXJpb0thcnQ2NC1NdXNocm9vbUN1cC1LYWxpbWFyaURlc2VydC5qcGcnKVxyXG4gICAgLy90cmFjayA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL2Nhci9NYXJpb0thcnQ2NC1NdXNocm9vbUN1cC1Lb29wYVRyb29wYUJlYWNoLmpwZycpXHJcbiAgICAvL3RyYWNrID0gYXdhaXQgbG9hZEltYWdlKCdzY2VuZXMvY2FyL01hcmlvS2FydDY0LU11c2hyb29tQ3VwLUx1aWdpUmFjZXdheS5qcGcnKVxyXG4gICAgLy90cmFjayA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL2Nhci9NYXJpb0thcnQ2NC1NdXNocm9vbUN1cC1Nb29Nb29GYXJtLmpwZycpXHJcbiAgICAvL3RyYWNrID0gYXdhaXQgbG9hZEltYWdlKCdzY2VuZXMvY2FyL01hcmlvS2FydDY0LUZsb3dlckN1cC1NYXJpb1JhY2V3YXkuanBnJylcclxuXHJcbiAgICAvLyBjdXN0b20gd29ybGRcclxuICAgIGNvbnN0IHdvcmxkVyA9IDIwNDhcclxuICAgIGNvbnN0IHdvcmxkSCA9IDIwNDhcclxuICAgIC8vIHRleHR1cmVcclxuICAgIC8vIHRyYWNrID0gY3JlYXRlSW1hZ2Uod29ybGRXLCB3b3JsZEgpXHJcbiAgICAvLyBoZWlnaHRtYXBcclxuICAgIGhtID0gY3JlYXRlSGVpZ2h0bWFwSTE2KHdvcmxkVywgd29ybGRIKVxyXG5cclxuICAgIC8vIGNhclNwcml0ZSA9IGNyZWF0ZUltYWdlKGNhclcsIGNhckgpXHJcblxyXG4gICAgLy8gZmlsbChjYXJTcHJpdGUsIGNhckNvbG9yKVxyXG4gICAgLy8gcHNldChjYXJTcHJpdGUsIDEsIDAsIGhlYWRsaWdodENvbG9yKVxyXG4gICAgLy8gcHNldChjYXJTcHJpdGUsIDMsIDAsIGhlYWRsaWdodENvbG9yKVxyXG4gICAgY2FyU3ByaXRlID0gYXdhaXQgbG9hZEltYWdlKCdzY2VuZXMvY2FyL2Nhci5wbmcnKVxyXG5cclxuICAgIGNvbnN0IHRyYWNrQ3ggPSBNYXRoLmZsb29yKHRyYWNrLndpZHRoIC8gMilcclxuICAgIGNvbnN0IHRyYWNrQ3kgPSBNYXRoLmZsb29yKHRyYWNrLmhlaWdodCAvIDIpXHJcbiAgICAvL2NvbnN0IHRyYWNrQ3ggPSA1NDExXHJcbiAgICAvL2NvbnN0IHRyYWNrQ3kgPSAxNDY5NlxyXG5cclxuICAgIGNhciA9IGNyZWF0ZUJpY3ljbGUoW3RyYWNrQ3gsIHRyYWNrQ3ldLCBkZWcyNzAsIDAsIDAsIGNhckNvbmZpZy53aGVlbEJhc2UpXHJcblxyXG4gICAgcmV2ZXJzZVR1cm5pbmcgPSAncmVhbGlzdGljJ1xyXG5cclxuICAgIGlzQWN0aXZlID0gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgbGV0IHR1cm4gPSAwXHJcbiAgbGV0IHZlbG9jaXR5ID0gMFxyXG5cclxuICBjb25zdCBpbyA9IChzdGF0ZTogU3RhdGUpID0+IHtcclxuICAgIGNvbnN0IGtleXMgPSBzdGF0ZS5nZXRLZXlzKClcclxuXHJcbiAgICB0dXJuID0gMFxyXG4gICAgdmVsb2NpdHkgPSAwXHJcblxyXG4gICAgaWYgKGtleXNbJ3cnXSB8fCBrZXlzWydXJ10pIHtcclxuICAgICAgdmVsb2NpdHkgPSAxXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGtleXNbJ3MnXSB8fCBrZXlzWydTJ10pIHtcclxuICAgICAgdmVsb2NpdHkgPSAtMVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChrZXlzWydhJ10gfHwga2V5c1snQSddKSB7XHJcbiAgICAgIHR1cm4gPSAtMVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChrZXlzWydkJ10gfHwga2V5c1snRCddKSB7XHJcbiAgICAgIHR1cm4gPSAxXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHpvb21PbldoZWVsKHN0YXRlKSkge1xyXG4gICAgICBsYXN0VyA9IDBcclxuICAgICAgbGFzdEggPSAwXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCB1cGRhdGUgPSAoc3RhdGU6IFN0YXRlKSA9PiB7XHJcbiAgICBpZiAoIW1heWJlKHRyYWNrKSkgdGhyb3cgRXJyb3IoJ0V4cGVjdGVkIHRyYWNrJylcclxuICAgIGlmICghbWF5YmUoaG0pKSB0aHJvdyBFcnJvcignRXhwZWN0ZWQgaG0nKVxyXG5cclxuICAgIGlmICghbWF5YmUoY2FyU3ByaXRlKSkgdGhyb3cgRXJyb3IoJ0V4cGVjdGVkIGNhclNwcml0ZScpXHJcbiAgICBpZiAoIW1heWJlKGNhcikpIHRocm93IEVycm9yKCdFeHBlY3RlZCBjYXInKVxyXG5cclxuICAgIGlmIChpc0FjdGl2ZSkgaW8oc3RhdGUpXHJcblxyXG4gICAgY29uc3QgZGVsdGEgPSBzdGF0ZS50aW1lLmdldEZyYW1lVGltZSgpXHJcblxyXG4gICAgLy8gYWRqdXN0IGNhciBzcGVlZCBhbmQgc3RlZXJpbmcgYW5nbGUgYmFzZWQgb24gaW5wdXRcclxuXHJcbiAgICAvLyBhcmUgd2UgYWNjZWxlcmF0aW5nIG9yIGJyYWtpbmc/XHJcbiAgICBjb25zdCBhID0gdmVsb2NpdHkgPiAwICYmIGNhci5zcGVlZCA+IDAgPyBhY2NlbCA6IGJyYWtlXHJcblxyXG4gICAgY2FyLnNwZWVkICs9IHZlbG9jaXR5ICogZGVsdGEgKiBhXHJcblxyXG4gICAgaWYgKGNhci5zcGVlZCA+IDApIHtcclxuICAgICAgLy8gYXBwbHkgZnJpY3Rpb25cclxuICAgICAgY2FyLnNwZWVkIC09IGZyaWN0aW9uICogZGVsdGFcclxuXHJcbiAgICAgIC8vIGVuZm9yY2Ugc3BlZWQgbGltaXRzIGFuZCBlbnN1cmUgZnJpY3Rpb24gZG9lc24ndCBtYWtlIHVzIGdvIGJhY2t3YXJkc1xyXG4gICAgICBpZiAoY2FyLnNwZWVkIDwgMCkgY2FyLnNwZWVkID0gMFxyXG4gICAgICBpZiAoY2FyLnNwZWVkID4gbWF4U3BlZWQpIGNhci5zcGVlZCA9IG1heFNwZWVkXHJcbiAgICB9IGVsc2UgaWYgKGNhci5zcGVlZCA8IDApIHtcclxuICAgICAgLy8gYXBwbHkgZnJpY3Rpb25cclxuICAgICAgY2FyLnNwZWVkICs9IGZyaWN0aW9uICogZGVsdGFcclxuXHJcbiAgICAgIC8vIGVuZm9yY2Ugc3BlZWQgbGltaXRzIGFuZCBlbnN1cmUgZnJpY3Rpb24gZG9lc24ndCBtYWtlIHVzIGdvIGZvcndhcmRzXHJcbiAgICAgIGlmIChjYXIuc3BlZWQgPiAwKSBjYXIuc3BlZWQgPSAwXHJcbiAgICAgIGlmIChjYXIuc3BlZWQgPCBtaW5SZXZTcGVlZCkgY2FyLnNwZWVkID0gbWluUmV2U3BlZWRcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHVybikge1xyXG4gICAgICBpZiAocmV2ZXJzZVR1cm5pbmcgPT09ICdhcmNhZGUnIHx8IGNhci5zcGVlZCA+PSAwKSB7XHJcbiAgICAgICAgY2FyLnN0ZWVyQW5nbGUgKz0gdHVybiAqIGRlbHRhICogY2FyQ29uZmlnLnR1cm5SYXRlXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gcmV2ZXJzaW5nIC0gaW52ZXJ0IHR1cm5cclxuICAgICAgICBjYXIuc3RlZXJBbmdsZSAtPSB0dXJuICogZGVsdGEgKiBjYXJDb25maWcudHVyblJhdGVcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICAgIC8vIGVuZm9yY2Ugc3RlZXJpbmcgbGltaXRzXHJcbiAgICAgIGNhci5zdGVlckFuZ2xlID0gTWF0aC5tYXgoXHJcbiAgICAgICAgLWNhckNvbmZpZy5tYXhTdGVlckFuZ2xlLFxyXG4gICAgICAgIE1hdGgubWluKGNhckNvbmZpZy5tYXhTdGVlckFuZ2xlLCBjYXIuc3RlZXJBbmdsZSlcclxuICAgICAgKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gcmV0dXJuIHN0ZWVyaW5nIHRvIGNlbnRlclxyXG4gICAgICBpZiAoY2FyLnN0ZWVyQW5nbGUgPiAwKSB7XHJcbiAgICAgICAgY2FyLnN0ZWVyQW5nbGUgPSBNYXRoLm1heChcclxuICAgICAgICAgIDAsIGNhci5zdGVlckFuZ2xlIC0gZGVsdGEgKiBjYXJDb25maWcuc3RlZXJSZXR1cm5TcGVlZFxyXG4gICAgICAgIClcclxuICAgICAgfSBlbHNlIGlmIChjYXIuc3RlZXJBbmdsZSA8IDApIHtcclxuICAgICAgICBjYXIuc3RlZXJBbmdsZSA9IE1hdGgubWluKFxyXG4gICAgICAgICAgMCwgY2FyLnN0ZWVyQW5nbGUgKyBkZWx0YSAqIGNhckNvbmZpZy5zdGVlclJldHVyblNwZWVkXHJcbiAgICAgICAgKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXBkYXRlZCA9IHVwZGF0ZUJpY3ljbGUoY2FyLCBkZWx0YSlcclxuXHJcbiAgICAvLyBjb2xsaXNpb24gZGV0ZWN0aW9uXHJcbiAgICBjb25zdCB0cmF2ZWwgPSBicmVzZW5oYW1MaW5lKFxyXG4gICAgICBjYXIubG9jYXRpb25bMF0sIGNhci5sb2NhdGlvblsxXSwgdXBkYXRlZC5sb2NhdGlvblswXSwgdXBkYXRlZC5sb2NhdGlvblsxXVxyXG4gICAgKVxyXG5cclxuICAgIGlmICh0cmF2ZWwubGVuZ3RoID4gMSkge1xyXG4gICAgICBsZXQgZmlyc3QgPSB0cmF2ZWxbMF1cclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdHJhdmVsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gdG9kb1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaWYgbm8gY29sbGlzaW9uLCB1cGRhdGUgY2FyXHJcbiAgICBjYXIubG9jYXRpb24gPSB1cGRhdGVkLmxvY2F0aW9uXHJcbiAgICBjYXIuaGVhZGluZyA9IHVwZGF0ZWQuaGVhZGluZ1xyXG5cclxuICAgIC8vXHJcblxyXG4gICAgY29uc3Qgem9vbSA9IG1pblpvb20gKyAoMSAtIChNYXRoLmFicyhjYXIuc3BlZWQpIC8gbWF4U3BlZWQpKSAqIHpvb21EZWx0YVxyXG5cclxuICAgIC8vXHJcblxyXG4gICAgY29uc3QgYnVmZmVyID0gc3RhdGUudmlldy5nZXRCdWZmZXIoKVxyXG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBidWZmZXJcclxuXHJcbiAgICBjb25zdCB2eCA9IE1hdGguZmxvb3Iod2lkdGggLyAyKVxyXG4gICAgLy8gd2UgcGxhY2UgdGhlIGNhciBkb3duIHRoZSBzY3JlZW4gZmFjaW5nIHVwLFxyXG4gICAgLy8gc28gd2UgY2FuIHNlZSBtb3JlIG9mIHRoZSByb2FkIGFoZWFkXHJcbiAgICBjb25zdCB2eSA9IE1hdGguZmxvb3IoaGVpZ2h0ICogMC44NzUpXHJcblxyXG4gICAgLy8gZHJhdyB0aGUgdHJhY2ssIGNlbnRlcmVkIG9uIHRoZSBjYXIsIG9udG8gdGhlIHZpZXcsIHJvdGF0ZWQgYnkgLWNhckhlYWRpbmdcclxuICAgIC8vIGFuZCB0aGVuIGRlZzkwIHRvIGZhY2UgXCJ1cFwiXHJcbiAgICBkcmF3Um90YXRlZEFuZFBvaW50U2NhbGVkKFxyXG4gICAgICB0cmFjayxcclxuICAgICAgY2FyLmxvY2F0aW9uWzBdLCBjYXIubG9jYXRpb25bMV0sXHJcbiAgICAgIGJ1ZmZlciwgdngsIHZ5LFxyXG4gICAgICAtY2FyLmhlYWRpbmcgLSBkZWc5MCwgem9vbVxyXG4gICAgKVxyXG4gICAgLy8gZHJhdyB0aGUgY2FyLCBjZW50ZXJlZCBvbiB0aGUgY2FyLCBvbnRvIHRoZSB2aWV3XHJcbiAgICBkcmF3Um90YXRlZEFuZFBvaW50U2NhbGVkKFxyXG4gICAgICBjYXJTcHJpdGUsIGNhckN4LCBjYXJDeSwgYnVmZmVyLCB2eCwgdnksIGNhci5zdGVlckFuZ2xlLCB6b29tXHJcbiAgICApXHJcblxyXG4gICAgLy8gbWluaSBtYXBcclxuXHJcbiAgICBjb25zdCBtbUhlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0IC8gMilcclxuICAgIGNvbnN0IG1tU2NhbGUgPSBtbUhlaWdodCAvIHRyYWNrLmhlaWdodFxyXG4gICAgY29uc3QgbW1XaWR0aCA9IE1hdGguZmxvb3IodHJhY2sud2lkdGggKiBtbVNjYWxlKVxyXG5cclxuICAgIGNvbnN0IG1tWCA9IDJcclxuICAgIGNvbnN0IG1tWSA9IGhlaWdodCAtIG1tSGVpZ2h0IC0gMlxyXG5cclxuICAgIC8vIHBvaW50UmVzaXplKFxyXG4gICAgLy8gICB0cmFjaywgYnVmZmVyLFxyXG4gICAgLy8gICBbMCwgMCwgdHJhY2sud2lkdGgsIHRyYWNrLmhlaWdodF0sXHJcbiAgICAvLyAgIFttbVgsIG1tWSwgbW1XaWR0aCwgbW1IZWlnaHRdXHJcbiAgICAvLyApXHJcbiAgICBiaWxpbmVhclJlc2l6ZShcclxuICAgICAgdHJhY2ssIGJ1ZmZlcixcclxuICAgICAgWzAsIDAsIHRyYWNrLndpZHRoLCB0cmFjay5oZWlnaHRdLFxyXG4gICAgICBbbW1YLCBtbVksIG1tV2lkdGgsIG1tSGVpZ2h0XVxyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0IG1tQ2FyWCA9IE1hdGguZmxvb3IoY2FyLmxvY2F0aW9uWzBdICogbW1TY2FsZSkgKyBtbVhcclxuICAgIGNvbnN0IG1tQ2FyWSA9IE1hdGguZmxvb3IoY2FyLmxvY2F0aW9uWzFdICogbW1TY2FsZSkgKyBtbVlcclxuXHJcbiAgICBjb25zdCByZWQgPSBjcmVhdGVDb2xvcigyNTUsIDAsIDApXHJcblxyXG4gICAgcHNldChidWZmZXIsIG1tQ2FyWCwgbW1DYXJZLCByZWQpXHJcblxyXG4gICAgaWYgKCFtYXliZShkZWJ1Z0hlbHBlcikpIHJldHVyblxyXG5cclxuICAgIGNvbnN0IGttcGggPSBjYXIuc3BlZWQgKiBrbXBoU2NhbGVcclxuXHJcbiAgICBjb25zdCBmcHMgPSBNYXRoLnJvdW5kKDEwMDAgLyBkZWx0YSlcclxuICAgIGNvbnN0IGZwc1RleHQgPSBgJHtmcHN9IGZwcyAoJHtkZWx0YS50b0ZpeGVkKDEpfW1zKWBcclxuXHJcbiAgICBjb25zdCB0YWJsZSA9IHRleHRUYWJsZShbXHJcbiAgICAgIFsneDonLCBgJHtjYXIubG9jYXRpb25bMF0udG9GaXhlZCg0KX1gXSxcclxuICAgICAgWyd5OicsIGAke2Nhci5sb2NhdGlvblsxXS50b0ZpeGVkKDQpfWBdLFxyXG4gICAgICBbJ2hlYWRpbmc6JywgYCR7Y2FyLmhlYWRpbmcudG9GaXhlZCg0KX1gXSxcclxuICAgICAgWydzcGVlZDonLCBgJHtjYXIuc3BlZWQudG9GaXhlZCg0KX1gXSxcclxuICAgICAgWydzdGVlcjonLCBgJHtjYXIuc3RlZXJBbmdsZS50b0ZpeGVkKDQpfWBdLFxyXG4gICAgICBbJ2ttcGg6JywgYCR7a21waC50b0ZpeGVkKDQpfWBdLFxyXG4gICAgICBbJ3R1cm46JywgYCR7dHVybn1gXSxcclxuICAgICAgWyd2ZWxvY2l0eTonLCBgJHt2ZWxvY2l0eX1gXVxyXG4gICAgXSlcclxuXHJcbiAgICBkZWJ1Z1RleHQgPSBbXHJcbiAgICAgIGZwc1RleHQsXHJcbiAgICAgIC4uLnRhYmxlXHJcbiAgICBdXHJcblxyXG4gICAgZGVidWdIZWxwZXIudXBkYXRlKHN0YXRlKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcXVpdCA9IGFzeW5jIChzdGF0ZTogU3RhdGUpID0+IHtcclxuICAgIGlzQWN0aXZlID0gZmFsc2VcclxuXHJcbiAgICBpZiAobWF5YmUoZGVidWdIZWxwZXIpKSBhd2FpdCBkZWJ1Z0hlbHBlci5xdWl0KHN0YXRlKVxyXG5cclxuICAgIGRlYnVnSGVscGVyID0gbnVsbFxyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2V0QWN0aXZlID0gKGFjdGl2ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgaXNBY3RpdmUgPSBhY3RpdmVcclxuICB9XHJcblxyXG4gIHJldHVybiB7IGluaXQsIHVwZGF0ZSwgcXVpdCwgc2V0QWN0aXZlIH1cclxufVxyXG4iXX0=