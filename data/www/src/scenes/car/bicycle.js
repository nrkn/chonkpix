// bicycle style steering for car physics
export const createBicycle = () => {
    const location = [0, 0];
    const heading = 0;
    const speed = 0;
    const steerAngle = 0;
    const wheelBase = 0;
    return { location, heading, speed, steerAngle, wheelBase };
};
export const frontWheel = (bicycle, center = bicycle.wheelBase / 2, cosHead = Math.cos(bicycle.heading), sinHead = Math.sin(bicycle.heading)) => [
    bicycle.location[0] + center * cosHead,
    bicycle.location[1] + center * sinHead
];
export const backWheel = (bicycle, center = bicycle.wheelBase / 2, cosHead = Math.cos(bicycle.heading), sinHead = Math.sin(bicycle.heading)) => [
    bicycle.location[0] - center * cosHead,
    bicycle.location[1] - center * sinHead
];
export const updateBicycle = (bicycle, delta) => {
    const center = bicycle.wheelBase / 2;
    const cosHead = Math.cos(bicycle.heading);
    const sinHead = Math.sin(bicycle.heading);
    let [bwx, bwy] = backWheel(bicycle, center, cosHead, sinHead);
    let [fwx, fwy] = frontWheel(bicycle, center, cosHead, sinHead);
    const ds = bicycle.speed * delta;
    const fa = bicycle.heading + bicycle.steerAngle;
    bwx += ds * cosHead;
    bwy += ds * sinHead;
    fwx += ds * Math.cos(fa);
    fwy += ds * Math.sin(fa);
    const location = [(fwx + bwx) / 2, (fwy + bwy) / 2];
    const heading = Math.atan2(fwy - bwy, fwx - bwx);
    return { location, heading };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmljeWNsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZXMvY2FyL2JpY3ljbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUNBQXlDO0FBZXpDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUU7SUFDaEMsTUFBTSxRQUFRLEdBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDM0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0lBQ2pCLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUNmLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQTtJQUNwQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUE7SUFFbkIsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQTtBQUM1RCxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsT0FBZ0IsRUFDaEIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQ25DLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDL0IsRUFBRSxDQUFDO0lBQ0wsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsT0FBTztJQUN0QyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxPQUFPO0NBQ3ZDLENBQUE7QUFHSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsT0FBZ0IsRUFDaEIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQ25DLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDL0IsRUFBRSxDQUFDO0lBQ0wsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsT0FBTztJQUN0QyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxPQUFPO0NBQ3ZDLENBQUE7QUFFSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FDM0IsT0FBZ0IsRUFBRSxLQUFhLEVBQ2hCLEVBQUU7SUFDakIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUE7SUFDcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFekMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDN0QsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFFOUQsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDaEMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFBO0lBRS9DLEdBQUcsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFBO0lBQ25CLEdBQUcsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFBO0lBRW5CLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN4QixHQUFHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFeEIsTUFBTSxRQUFRLEdBQU8sQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDdkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUVoRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBQzlCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGJpY3ljbGUgc3R5bGUgc3RlZXJpbmcgZm9yIGNhciBwaHlzaWNzXHJcblxyXG5pbXBvcnQgeyBUMiB9IGZyb20gJy4uLy4uL2xpYi90eXBlcy5qcydcclxuXHJcbmV4cG9ydCB0eXBlIEJpY3ljbGVVcGRhdGUgPSB7XHJcbiAgbG9jYXRpb246IFQyXHJcbiAgaGVhZGluZzogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEJpY3ljbGUgPSBCaWN5Y2xlVXBkYXRlICYge1xyXG4gIHNwZWVkOiBudW1iZXJcclxuICBzdGVlckFuZ2xlOiBudW1iZXJcclxuICB3aGVlbEJhc2U6IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlQmljeWNsZSA9ICgpID0+IHtcclxuICBjb25zdCBsb2NhdGlvbjogVDIgPSBbMCwgMF1cclxuICBjb25zdCBoZWFkaW5nID0gMFxyXG4gIGNvbnN0IHNwZWVkID0gMFxyXG4gIGNvbnN0IHN0ZWVyQW5nbGUgPSAwXHJcbiAgY29uc3Qgd2hlZWxCYXNlID0gMFxyXG5cclxuICByZXR1cm4geyBsb2NhdGlvbiwgaGVhZGluZywgc3BlZWQsIHN0ZWVyQW5nbGUsIHdoZWVsQmFzZSB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmcm9udFdoZWVsID0gKFxyXG4gIGJpY3ljbGU6IEJpY3ljbGUsXHJcbiAgY2VudGVyID0gYmljeWNsZS53aGVlbEJhc2UgLyAyLFxyXG4gIGNvc0hlYWQgPSBNYXRoLmNvcyhiaWN5Y2xlLmhlYWRpbmcpLFxyXG4gIHNpbkhlYWQgPSBNYXRoLnNpbihiaWN5Y2xlLmhlYWRpbmcpXHJcbik6IFQyID0+IFtcclxuICAgIGJpY3ljbGUubG9jYXRpb25bMF0gKyBjZW50ZXIgKiBjb3NIZWFkLFxyXG4gICAgYmljeWNsZS5sb2NhdGlvblsxXSArIGNlbnRlciAqIHNpbkhlYWRcclxuICBdXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGJhY2tXaGVlbCA9IChcclxuICBiaWN5Y2xlOiBCaWN5Y2xlLFxyXG4gIGNlbnRlciA9IGJpY3ljbGUud2hlZWxCYXNlIC8gMixcclxuICBjb3NIZWFkID0gTWF0aC5jb3MoYmljeWNsZS5oZWFkaW5nKSxcclxuICBzaW5IZWFkID0gTWF0aC5zaW4oYmljeWNsZS5oZWFkaW5nKVxyXG4pOiBUMiA9PiBbXHJcbiAgICBiaWN5Y2xlLmxvY2F0aW9uWzBdIC0gY2VudGVyICogY29zSGVhZCxcclxuICAgIGJpY3ljbGUubG9jYXRpb25bMV0gLSBjZW50ZXIgKiBzaW5IZWFkXHJcbiAgXVxyXG5cclxuZXhwb3J0IGNvbnN0IHVwZGF0ZUJpY3ljbGUgPSAoXHJcbiAgYmljeWNsZTogQmljeWNsZSwgZGVsdGE6IG51bWJlclxyXG4pOiBCaWN5Y2xlVXBkYXRlID0+IHtcclxuICBjb25zdCBjZW50ZXIgPSBiaWN5Y2xlLndoZWVsQmFzZSAvIDJcclxuICBjb25zdCBjb3NIZWFkID0gTWF0aC5jb3MoYmljeWNsZS5oZWFkaW5nKVxyXG4gIGNvbnN0IHNpbkhlYWQgPSBNYXRoLnNpbihiaWN5Y2xlLmhlYWRpbmcpXHJcblxyXG4gIGxldCBbYnd4LCBid3ldID0gYmFja1doZWVsKGJpY3ljbGUsIGNlbnRlciwgY29zSGVhZCwgc2luSGVhZClcclxuICBsZXQgW2Z3eCwgZnd5XSA9IGZyb250V2hlZWwoYmljeWNsZSwgY2VudGVyLCBjb3NIZWFkLCBzaW5IZWFkKVxyXG5cclxuICBjb25zdCBkcyA9IGJpY3ljbGUuc3BlZWQgKiBkZWx0YVxyXG4gIGNvbnN0IGZhID0gYmljeWNsZS5oZWFkaW5nICsgYmljeWNsZS5zdGVlckFuZ2xlXHJcblxyXG4gIGJ3eCArPSBkcyAqIGNvc0hlYWRcclxuICBid3kgKz0gZHMgKiBzaW5IZWFkXHJcblxyXG4gIGZ3eCArPSBkcyAqIE1hdGguY29zKGZhKVxyXG4gIGZ3eSArPSBkcyAqIE1hdGguc2luKGZhKVxyXG5cclxuICBjb25zdCBsb2NhdGlvbjogVDIgPSBbKGZ3eCArIGJ3eCkgLyAyLCAoZnd5ICsgYnd5KSAvIDJdXHJcbiAgY29uc3QgaGVhZGluZyA9IE1hdGguYXRhbjIoZnd5IC0gYnd5LCBmd3ggLSBid3gpXHJcblxyXG4gIHJldHVybiB7IGxvY2F0aW9uLCBoZWFkaW5nIH1cclxufSJdfQ==