export const rangerIo = (state, deps, fs) => {
    const keys = state.getKeys();
    if (keys['Escape']) {
        state.setRunning(false);
        // consume the key
        keys['Escape'] = false;
        return;
    }
    const wheel = state.mouse.takeWheel();
    const zoom = state.view.getZoom();
    if (wheel < 0) {
        state.view.setZoom(zoom + 1);
        fs.lastW = 0;
        fs.lastH = 0;
    }
    else if (wheel > 0) {
        state.view.setZoom(zoom - 1);
        fs.lastW = 0;
        fs.lastH = 0;
    }
    const presses = state.getKeyPresses();
    for (const key of presses) {
        let ocx = fs.cameraX;
        let ocy = fs.cameraY;
        const isLeft = key.toLowerCase() === 'a' || key === 'ArrowLeft';
        const isRight = key.toLowerCase() === 'd' || key === 'ArrowRight';
        const isUp = key.toLowerCase() === 'w' || key === 'ArrowUp';
        const isDown = key.toLowerCase() === 's' || key === 'ArrowDown';
        if (isUp && fs.cameraY > 0) {
            fs.cameraY--;
        }
        if (isDown && fs.cameraY < deps.tileMap.height - 1) {
            fs.cameraY++;
        }
        if (isLeft && fs.cameraX > 0) {
            fs.cameraX--;
        }
        if (isRight && fs.cameraX < deps.tileMap.width - 1) {
            fs.cameraX++;
        }
        // change facing even if blocked/oob
        fs.facing = isLeft ? 'left' : isRight ? 'right' : fs.facing;
        // check blocking
        const cameraTile = deps.tileMap.data[fs.cameraY * deps.tileMap.width + fs.cameraX];
        if (deps.blocking.has(cameraTile)) {
            fs.cameraX = ocx;
            fs.cameraY = ocy;
        }
    }
    // consume all key presses
    presses.length = 0;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmVzL3NhbmRib3gvcmFuZ2VyL2lvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQVksRUFBRSxJQUFnQixFQUFFLEVBQWUsRUFBRSxFQUFFO0lBQzFFLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUU1QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ25CLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFdkIsa0JBQWtCO1FBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUE7UUFFdEIsT0FBTTtJQUNSLENBQUM7SUFFRCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7SUFFakMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDNUIsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDWixFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUNkLENBQUM7U0FBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNyQixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDNUIsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7UUFDWixFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUNkLENBQUM7SUFFRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUE7SUFFckMsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUMxQixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFBO1FBQ3BCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUE7UUFFcEIsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssV0FBVyxDQUFBO1FBQy9ELE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLFlBQVksQ0FBQTtRQUNqRSxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxTQUFTLENBQUE7UUFDM0QsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLEdBQUcsSUFBSSxHQUFHLEtBQUssV0FBVyxDQUFBO1FBRS9ELElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDM0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2QsQ0FBQztRQUNELElBQUksTUFBTSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbkQsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2QsQ0FBQztRQUVELElBQUksTUFBTSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDN0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2QsQ0FBQztRQUNELElBQUksT0FBTyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDbkQsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2QsQ0FBQztRQUVELG9DQUFvQztRQUNwQyxFQUFFLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQTtRQUUzRCxpQkFBaUI7UUFDakIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2xDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FDN0MsQ0FBQTtRQUVELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUNsQyxFQUFFLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQTtZQUNoQixFQUFFLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQTtRQUNsQixDQUFDO0lBQ0gsQ0FBQztJQUVELDBCQUEwQjtJQUMxQixPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtBQUNwQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL2xpYi90eXBlcy5qcydcbmltcG9ydCB7IFJhbmdlckRlcHMsIFJhbmdlclN0YXRlIH0gZnJvbSAnLi90eXBlcy5qcydcblxuZXhwb3J0IGNvbnN0IHJhbmdlcklvID0gKHN0YXRlOiBTdGF0ZSwgZGVwczogUmFuZ2VyRGVwcywgZnM6IFJhbmdlclN0YXRlKSA9PiB7XG4gIGNvbnN0IGtleXMgPSBzdGF0ZS5nZXRLZXlzKClcblxuICBpZiAoa2V5c1snRXNjYXBlJ10pIHtcbiAgICBzdGF0ZS5zZXRSdW5uaW5nKGZhbHNlKVxuXG4gICAgLy8gY29uc3VtZSB0aGUga2V5XG4gICAga2V5c1snRXNjYXBlJ10gPSBmYWxzZVxuXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCB3aGVlbCA9IHN0YXRlLm1vdXNlLnRha2VXaGVlbCgpXG4gIGNvbnN0IHpvb20gPSBzdGF0ZS52aWV3LmdldFpvb20oKVxuXG4gIGlmICh3aGVlbCA8IDApIHtcbiAgICBzdGF0ZS52aWV3LnNldFpvb20oem9vbSArIDEpXG4gICAgZnMubGFzdFcgPSAwXG4gICAgZnMubGFzdEggPSAwXG4gIH0gZWxzZSBpZiAod2hlZWwgPiAwKSB7XG4gICAgc3RhdGUudmlldy5zZXRab29tKHpvb20gLSAxKVxuICAgIGZzLmxhc3RXID0gMFxuICAgIGZzLmxhc3RIID0gMFxuICB9XG5cbiAgY29uc3QgcHJlc3NlcyA9IHN0YXRlLmdldEtleVByZXNzZXMoKVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIHByZXNzZXMpIHtcbiAgICBsZXQgb2N4ID0gZnMuY2FtZXJhWFxuICAgIGxldCBvY3kgPSBmcy5jYW1lcmFZXG5cbiAgICBjb25zdCBpc0xlZnQgPSBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2EnIHx8IGtleSA9PT0gJ0Fycm93TGVmdCdcbiAgICBjb25zdCBpc1JpZ2h0ID0ga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdkJyB8fCBrZXkgPT09ICdBcnJvd1JpZ2h0J1xuICAgIGNvbnN0IGlzVXAgPSBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ3cnIHx8IGtleSA9PT0gJ0Fycm93VXAnXG4gICAgY29uc3QgaXNEb3duID0ga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdzJyB8fCBrZXkgPT09ICdBcnJvd0Rvd24nXG5cbiAgICBpZiAoaXNVcCAmJiBmcy5jYW1lcmFZID4gMCkge1xuICAgICAgZnMuY2FtZXJhWS0tXG4gICAgfVxuICAgIGlmIChpc0Rvd24gJiYgZnMuY2FtZXJhWSA8IGRlcHMudGlsZU1hcC5oZWlnaHQgLSAxKSB7XG4gICAgICBmcy5jYW1lcmFZKytcbiAgICB9XG5cbiAgICBpZiAoaXNMZWZ0ICYmIGZzLmNhbWVyYVggPiAwKSB7XG4gICAgICBmcy5jYW1lcmFYLS1cbiAgICB9XG4gICAgaWYgKGlzUmlnaHQgJiYgZnMuY2FtZXJhWCA8IGRlcHMudGlsZU1hcC53aWR0aCAtIDEpIHtcbiAgICAgIGZzLmNhbWVyYVgrK1xuICAgIH1cblxuICAgIC8vIGNoYW5nZSBmYWNpbmcgZXZlbiBpZiBibG9ja2VkL29vYlxuICAgIGZzLmZhY2luZyA9IGlzTGVmdCA/ICdsZWZ0JyA6IGlzUmlnaHQgPyAncmlnaHQnIDogZnMuZmFjaW5nXG5cbiAgICAvLyBjaGVjayBibG9ja2luZ1xuICAgIGNvbnN0IGNhbWVyYVRpbGUgPSBkZXBzLnRpbGVNYXAuZGF0YVtcbiAgICAgIGZzLmNhbWVyYVkgKiBkZXBzLnRpbGVNYXAud2lkdGggKyBmcy5jYW1lcmFYXG4gICAgXVxuXG4gICAgaWYgKGRlcHMuYmxvY2tpbmcuaGFzKGNhbWVyYVRpbGUpKSB7XG4gICAgICBmcy5jYW1lcmFYID0gb2N4XG4gICAgICBmcy5jYW1lcmFZID0gb2N5XG4gICAgfVxuICB9XG5cbiAgLy8gY29uc3VtZSBhbGwga2V5IHByZXNzZXNcbiAgcHJlc3Nlcy5sZW5ndGggPSAwXG59Il19