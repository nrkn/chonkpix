import { fontImageToPoints } from '../../../lib/bmpfont/layout.js';
import { loadFontMono } from '../../../lib/bmpfont/load.js';
import { loadImage } from '../../../lib/image/load.js';
import { animator } from '../../../lib/sprites/animator.js';
import { createTileSheet } from '../../../lib/sprites/index.js';
import { generateMap } from './map-gen.js';
import { tileW, tileH, tileCols, tileRows } from './tile-data.js';
export const rangerInit = async (_state) => {
    const tileSheet = await loadImage('scenes/ranger/tiles.png');
    const tiles = createTileSheet(tileSheet, tileW, tileH);
    const spriteSheet = await loadImage('scenes/ranger/sprites.png');
    const sprites = createTileSheet(spriteSheet, tileW, tileH);
    const playerAnimRight = animator([[500, 0], [500, 1]]);
    const playerAnimLeft = animator([[500, 2], [500, 3]]);
    const map = generateMap(tileCols, tileRows);
    const { tileMap, blocking } = map;
    const cameraX = Math.floor(tileMap.width / 2);
    const cameraY = Math.floor(tileMap.height / 2);
    const font = await loadFontMono('EverexME_5x8');
    const fontPts = fontImageToPoints(font);
    const prevRectIndices = new Map();
    const lastW = 0;
    const lastH = 0;
    const deps = {
        tiles, sprites, font, fontPts, tileMap, blocking,
        playerAnimLeft, playerAnimRight
    };
    const fstate = {
        facing: 'right',
        cameraX, cameraY, lastW, lastH,
        prevRectIndices
    };
    return { deps, fstate };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZXMvc2FuZGJveC9yYW5nZXIvaW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFDM0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFFL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUMxQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFHakUsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxNQUFhLEVBQUUsRUFBRTtJQUNoRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0lBRTVELE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRXRELE1BQU0sV0FBVyxHQUFHLE1BQU0sU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUE7SUFFaEUsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFFMUQsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3RELE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVyRCxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRTNDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFBO0lBRWpDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM3QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFFOUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDL0MsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFdkMsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUE7SUFFakQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBQ2YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFBO0lBRWYsTUFBTSxJQUFJLEdBQWU7UUFDdkIsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRO1FBQ2hELGNBQWMsRUFBRSxlQUFlO0tBQ2hDLENBQUE7SUFFRCxNQUFNLE1BQU0sR0FBZ0I7UUFDMUIsTUFBTSxFQUFFLE9BQU87UUFDZixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQzlCLGVBQWU7S0FDaEIsQ0FBQTtJQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUE7QUFDekIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZm9udEltYWdlVG9Qb2ludHMgfSBmcm9tICcuLi8uLi8uLi9saWIvYm1wZm9udC9sYXlvdXQuanMnXG5pbXBvcnQgeyBsb2FkRm9udE1vbm8gfSBmcm9tICcuLi8uLi8uLi9saWIvYm1wZm9udC9sb2FkLmpzJ1xuaW1wb3J0IHsgbG9hZEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vbGliL2ltYWdlL2xvYWQuanMnXG5pbXBvcnQgeyBhbmltYXRvciB9IGZyb20gJy4uLy4uLy4uL2xpYi9zcHJpdGVzL2FuaW1hdG9yLmpzJ1xuaW1wb3J0IHsgY3JlYXRlVGlsZVNoZWV0IH0gZnJvbSAnLi4vLi4vLi4vbGliL3Nwcml0ZXMvaW5kZXguanMnXG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL2xpYi90eXBlcy5qcydcbmltcG9ydCB7IGdlbmVyYXRlTWFwIH0gZnJvbSAnLi9tYXAtZ2VuLmpzJ1xuaW1wb3J0IHsgdGlsZVcsIHRpbGVILCB0aWxlQ29scywgdGlsZVJvd3MgfSBmcm9tICcuL3RpbGUtZGF0YS5qcydcbmltcG9ydCB7IFJhbmdlckRlcHMsIFJhbmdlclN0YXRlIH0gZnJvbSAnLi90eXBlcy5qcydcblxuZXhwb3J0IGNvbnN0IHJhbmdlckluaXQgPSBhc3luYyAoX3N0YXRlOiBTdGF0ZSkgPT4ge1xuICBjb25zdCB0aWxlU2hlZXQgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9yYW5nZXIvdGlsZXMucG5nJylcblxuICBjb25zdCB0aWxlcyA9IGNyZWF0ZVRpbGVTaGVldCh0aWxlU2hlZXQsIHRpbGVXLCB0aWxlSClcblxuICBjb25zdCBzcHJpdGVTaGVldCA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL3Jhbmdlci9zcHJpdGVzLnBuZycpXG5cbiAgY29uc3Qgc3ByaXRlcyA9IGNyZWF0ZVRpbGVTaGVldChzcHJpdGVTaGVldCwgdGlsZVcsIHRpbGVIKVxuXG4gIGNvbnN0IHBsYXllckFuaW1SaWdodCA9IGFuaW1hdG9yKFtbNTAwLCAwXSwgWzUwMCwgMV1dKVxuICBjb25zdCBwbGF5ZXJBbmltTGVmdCA9IGFuaW1hdG9yKFtbNTAwLCAyXSwgWzUwMCwgM11dKVxuXG4gIGNvbnN0IG1hcCA9IGdlbmVyYXRlTWFwKHRpbGVDb2xzLCB0aWxlUm93cylcblxuICBjb25zdCB7IHRpbGVNYXAsIGJsb2NraW5nIH0gPSBtYXBcblxuICBjb25zdCBjYW1lcmFYID0gTWF0aC5mbG9vcih0aWxlTWFwLndpZHRoIC8gMilcbiAgY29uc3QgY2FtZXJhWSA9IE1hdGguZmxvb3IodGlsZU1hcC5oZWlnaHQgLyAyKVxuXG4gIGNvbnN0IGZvbnQgPSBhd2FpdCBsb2FkRm9udE1vbm8oJ0V2ZXJleE1FXzV4OCcpXG4gIGNvbnN0IGZvbnRQdHMgPSBmb250SW1hZ2VUb1BvaW50cyhmb250KVxuXG4gIGNvbnN0IHByZXZSZWN0SW5kaWNlcyA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KClcblxuICBjb25zdCBsYXN0VyA9IDBcbiAgY29uc3QgbGFzdEggPSAwXG5cbiAgY29uc3QgZGVwczogUmFuZ2VyRGVwcyA9IHtcbiAgICB0aWxlcywgc3ByaXRlcywgZm9udCwgZm9udFB0cywgdGlsZU1hcCwgYmxvY2tpbmcsXG4gICAgcGxheWVyQW5pbUxlZnQsIHBsYXllckFuaW1SaWdodFxuICB9XG5cbiAgY29uc3QgZnN0YXRlOiBSYW5nZXJTdGF0ZSA9IHtcbiAgICBmYWNpbmc6ICdyaWdodCcsXG4gICAgY2FtZXJhWCwgY2FtZXJhWSwgbGFzdFcsIGxhc3RILFxuICAgIHByZXZSZWN0SW5kaWNlc1xuICB9XG5cbiAgcmV0dXJuIHsgZGVwcywgZnN0YXRlIH1cbn1cbiJdfQ==