import { fontImageToPoints, layoutTextLine, textLayoutToIndices } from '../../lib/bmpfont/layout.js';
import { createColor } from '../../lib/image/color.js';
import { fill, fillIndices } from '../../lib/image/fill.js';
import { loadImage } from '../../lib/image/load.js';
import { printableKeySet } from '../../lib/io/const.js';
import { findSizeSlug, parseSizeSlug } from '../../lib/slug.js';
import { createTerminal } from '../../lib/term/index.js';
import { assrt, assrtInt } from '../../lib/util.js';
const fontPath = 'data';
const monoFontFiles = [
    'ATI_SmallW_6x8',
    'EverexME_5x8',
    'HP_100LX_6x8',
    'Portfolio_6x8',
    'TsengEVA_132_6x8',
    'IBM_EGA_8x8',
    'IBM_VGA_8x14',
    'IBM_VGA_8x16',
    'IBM_VGA_9x8',
    'IBM_VGA_9x14',
    'IBM_VGA_9x16'
];
const loadFontMono = async (name) => {
    const image = await loadImage(`${fontPath}/Bm437_${name}.png`);
    const sizeSlug = assrt(findSizeSlug(name), 'Expected size slug');
    const [width, height] = parseSizeSlug(sizeSlug);
    const cols = assrtInt(image.width / width);
    const rows = assrtInt(image.height / height);
    const font = {
        type: 'mono',
        width,
        height,
        leading: 0, // built into the bitmap glyphs
        image: image,
        rects: {},
        advance: 0, // built into the bitmap glyphs
        fallback: 127
    };
    for (let r = 0; r < rows; r++) {
        const rowIndex = r * cols;
        for (let c = 0; c < cols; c++) {
            const charCode = rowIndex + c;
            font.rects[charCode] = [c * width, r * height, width, height];
        }
    }
    return font;
};
export const textSandboxScene = () => {
    const fonts = new Map();
    const term = createTerminal();
    let fontIndex = 1;
    let font;
    let fontPts;
    let textCols;
    let textRows;
    let isActive = true;
    const setFont = (state, fontIndex) => {
        const fontName = monoFontFiles[fontIndex];
        font = assrt(fonts.get(fontName), `Expected font ${fontName}`);
        fontPts = fontImageToPoints(font);
        const buffer = state.view.getBuffer();
        const vw = buffer.width - padding * 2;
        const vh = buffer.height - padding * 2;
        textCols = Math.floor(vw / font.width);
        textRows = Math.floor(vh / font.height);
        term.appendLine(`FONT=${fontName}`);
    };
    const resized = () => {
        term.appendLine(`TSIZE=${textCols}x${textRows}`);
    };
    const init = async (state) => {
        console.log('initializing text sandbox scene');
        for (const n of monoFontFiles) {
            fonts.set(n, await loadFontMono(n));
        }
        term.clear();
        term.appendLine('Text Mode Sandbox');
        fontIndex = 6; // IBM_VGA_8x14
        setFont(state, fontIndex);
        resized();
    };
    const bgColor = createColor(0x1f, 0x1f, 0x1f);
    const fgColor = createColor(0x4f, 0xc1, 0xff);
    const padding = 2;
    const cursorRate = 500;
    const _handleKeys = (state) => {
        const keys = state.getKeys();
        if (keys['Escape']) {
            state.setRunning(false);
            // consume the key
            keys['Escape'] = false;
            return;
        }
        const fState = keys['F1'];
        if (fState) {
            fontIndex = (fontIndex + 1) % monoFontFiles.length;
            keys['F1'] = false;
            setFont(state, fontIndex);
            resized();
        }
        const keyPresses = state.getKeyPresses();
        for (const key of keyPresses) {
            if (printableKeySet.has(key)) {
                term.append(key);
            }
            if (key === 'Enter') {
                term.appendLine();
            }
            if (key === 'Backspace') {
                term.backspace();
                console.log('backspace');
            }
        }
        // consume all key presses
        keyPresses.length = 0;
    };
    const update = (state) => {
        if (isActive) {
            // keys
            _handleKeys(state);
            // mouse
            const wheel = state.mouse.takeWheel();
            const zoom = state.view.getZoom();
            if (wheel < 0) {
                //state.view.zoom += 1
                state.view.setZoom(zoom + 1);
            }
            else if (wheel > 0) {
                state.view.setZoom(zoom - 1);
            }
        }
        // draw
        const buffer = state.view.getBuffer();
        fill(buffer, bgColor);
        const vw = buffer.width - padding * 2;
        const vh = buffer.height - padding * 2;
        const newTextCols = Math.floor(vw / font.width);
        const newTextRows = Math.floor(vh / font.height);
        if (newTextCols !== textCols || newTextRows !== textRows) {
            textCols = newTextCols;
            textRows = newTextRows;
            resized();
        }
        const termView = term.view(textCols, textRows);
        const isCursor = (state.time.getElapsed() % (cursorRate * 2)) < cursorRate;
        let cursor = isCursor ? '_' : ' ';
        for (let y = 0; y < termView.length; y++) {
            let line = termView[y];
            if (y === termView.length - 1) {
                line += cursor;
            }
            const lineLayout = layoutTextLine(font, line);
            const dx = padding;
            const dy = padding + y * font.height;
            const indices = textLayoutToIndices(buffer, dx, dy, fontPts, lineLayout);
            fillIndices(indices, buffer, fgColor);
        }
        // debug
        const frameTime = state.time.getFrameTime();
        const fps = Math.round(1000 / frameTime);
        const fpsText = `${fps} fps (${frameTime.toFixed(1)}ms)`;
        const fpsW = font.width * fpsText.length + padding * 2;
        const fpsH = font.height + padding * 2;
        const fpsX = buffer.width - fpsW - padding;
        const fpsY = padding;
        const fpsBg = createColor(0x00, 0x78, 0xd4);
        const fpsFg = createColor(0xff, 0xd7, 0x00);
        fill(buffer, fpsBg, [fpsX, fpsY, fpsW, fpsH]);
        const fpsLayout = layoutTextLine(font, fpsText);
        const fpsIndices = textLayoutToIndices(buffer, fpsX + padding, fpsY + padding, fontPts, fpsLayout);
        fillIndices(fpsIndices, buffer, fpsFg);
    };
    const quit = async (_state) => {
        console.log('quitting text sandbox scene');
    };
    const setActive = (active) => {
        isActive = active;
    };
    return { init, update, quit, setActive };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1zYW5kYm94LXNjZW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3NjZW5lcy9zYW5kYm94L3RleHQtc2FuZGJveC1zY2VuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLG1CQUFtQixFQUN2RCxNQUFNLDZCQUE2QixDQUFBO0FBR3BDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUN0RCxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUNuRCxPQUFPLEVBQWdCLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRXhELE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFbkQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFBO0FBRXZCLE1BQU0sYUFBYSxHQUFHO0lBQ3BCLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsY0FBYztJQUNkLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLGNBQWM7SUFDZCxjQUFjO0lBQ2QsYUFBYTtJQUNiLGNBQWM7SUFDZCxjQUFjO0NBQ04sQ0FBQTtBQUlWLE1BQU0sWUFBWSxHQUFHLEtBQUssRUFBRSxJQUFrQixFQUFFLEVBQUU7SUFDaEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxTQUFTLENBQUMsR0FBRyxRQUFRLFVBQVUsSUFBSSxNQUFNLENBQUMsQ0FBQTtJQUM5RCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxF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b250SW1hZ2VUb1BvaW50cywgbGF5b3V0VGV4dExpbmUsIHRleHRMYXlvdXRUb0luZGljZXNcbn0gZnJvbSAnLi4vLi4vbGliL2JtcGZvbnQvbGF5b3V0LmpzJ1xuXG5pbXBvcnQgeyBCbXBGb250TSwgRm9udFBvaW50cyB9IGZyb20gJy4uLy4uL2xpYi9ibXBmb250L3R5cGVzLmpzJ1xuaW1wb3J0IHsgY3JlYXRlQ29sb3IgfSBmcm9tICcuLi8uLi9saWIvaW1hZ2UvY29sb3IuanMnXG5pbXBvcnQgeyBmaWxsLCBmaWxsSW5kaWNlcyB9IGZyb20gJy4uLy4uL2xpYi9pbWFnZS9maWxsLmpzJ1xuaW1wb3J0IHsgbG9hZEltYWdlIH0gZnJvbSAnLi4vLi4vbGliL2ltYWdlL2xvYWQuanMnXG5pbXBvcnQgeyBQcmludGFibGVLZXksIHByaW50YWJsZUtleVNldCB9IGZyb20gJy4uLy4uL2xpYi9pby9jb25zdC5qcydcbmltcG9ydCB7IGZpbmRTaXplU2x1ZywgcGFyc2VTaXplU2x1ZyB9IGZyb20gJy4uLy4uL2xpYi9zbHVnLmpzJ1xuaW1wb3J0IHsgY3JlYXRlVGVybWluYWwgfSBmcm9tICcuLi8uLi9saWIvdGVybS9pbmRleC5qcydcbmltcG9ydCB7IFNjZW5lLCBTdGF0ZSB9IGZyb20gJy4uLy4uL2xpYi90eXBlcy5qcydcbmltcG9ydCB7IGFzc3J0LCBhc3NydEludCB9IGZyb20gJy4uLy4uL2xpYi91dGlsLmpzJ1xuXG5jb25zdCBmb250UGF0aCA9ICdkYXRhJ1xuXG5jb25zdCBtb25vRm9udEZpbGVzID0gW1xuICAnQVRJX1NtYWxsV182eDgnLFxuICAnRXZlcmV4TUVfNXg4JyxcbiAgJ0hQXzEwMExYXzZ4OCcsXG4gICdQb3J0Zm9saW9fNng4JyxcbiAgJ1RzZW5nRVZBXzEzMl82eDgnLFxuICAnSUJNX0VHQV84eDgnLFxuICAnSUJNX1ZHQV84eDE0JyxcbiAgJ0lCTV9WR0FfOHgxNicsXG4gICdJQk1fVkdBXzl4OCcsXG4gICdJQk1fVkdBXzl4MTQnLFxuICAnSUJNX1ZHQV85eDE2J1xuXSBhcyBjb25zdFxuXG50eXBlIE1vbm9Gb250TmFtZSA9IHR5cGVvZiBtb25vRm9udEZpbGVzW251bWJlcl1cblxuY29uc3QgbG9hZEZvbnRNb25vID0gYXN5bmMgKG5hbWU6IE1vbm9Gb250TmFtZSkgPT4ge1xuICBjb25zdCBpbWFnZSA9IGF3YWl0IGxvYWRJbWFnZShgJHtmb250UGF0aH0vQm00MzdfJHtuYW1lfS5wbmdgKVxuICBjb25zdCBzaXplU2x1ZyA9IGFzc3J0KGZpbmRTaXplU2x1ZyhuYW1lKSwgJ0V4cGVjdGVkIHNpemUgc2x1ZycpXG4gIGNvbnN0IFt3aWR0aCwgaGVpZ2h0XSA9IHBhcnNlU2l6ZVNsdWcoc2l6ZVNsdWcpXG5cbiAgY29uc3QgY29scyA9IGFzc3J0SW50KGltYWdlLndpZHRoIC8gd2lkdGgpXG4gIGNvbnN0IHJvd3MgPSBhc3NydEludChpbWFnZS5oZWlnaHQgLyBoZWlnaHQpXG5cbiAgY29uc3QgZm9udDogQm1wRm9udE0gPSB7XG4gICAgdHlwZTogJ21vbm8nLFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBsZWFkaW5nOiAwLCAvLyBidWlsdCBpbnRvIHRoZSBiaXRtYXAgZ2x5cGhzXG4gICAgaW1hZ2U6IGltYWdlLFxuICAgIHJlY3RzOiB7fSxcbiAgICBhZHZhbmNlOiAwLCAvLyBidWlsdCBpbnRvIHRoZSBiaXRtYXAgZ2x5cGhzXG4gICAgZmFsbGJhY2s6IDEyN1xuICB9XG5cbiAgZm9yIChsZXQgciA9IDA7IHIgPCByb3dzOyByKyspIHtcbiAgICBjb25zdCByb3dJbmRleCA9IHIgKiBjb2xzXG4gICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjb2xzOyBjKyspIHtcbiAgICAgIGNvbnN0IGNoYXJDb2RlID0gcm93SW5kZXggKyBjXG5cbiAgICAgIGZvbnQucmVjdHNbY2hhckNvZGVdID0gW2MgKiB3aWR0aCwgciAqIGhlaWdodCwgd2lkdGgsIGhlaWdodF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZm9udFxufVxuXG5leHBvcnQgY29uc3QgdGV4dFNhbmRib3hTY2VuZSA9ICgpOiBTY2VuZSA9PiB7XG4gIGNvbnN0IGZvbnRzID0gbmV3IE1hcDxNb25vRm9udE5hbWUsIEJtcEZvbnRNPigpXG4gIGNvbnN0IHRlcm0gPSBjcmVhdGVUZXJtaW5hbCgpXG5cbiAgbGV0IGZvbnRJbmRleCA9IDFcbiAgbGV0IGZvbnQ6IEJtcEZvbnRNXG4gIGxldCBmb250UHRzOiBGb250UG9pbnRzXG4gIGxldCB0ZXh0Q29sczogbnVtYmVyXG4gIGxldCB0ZXh0Um93czogbnVtYmVyXG5cbiAgbGV0IGlzQWN0aXZlID0gdHJ1ZVxuXG4gIGNvbnN0IHNldEZvbnQgPSAoc3RhdGU6IFN0YXRlLCBmb250SW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGZvbnROYW1lOiBNb25vRm9udE5hbWUgPSBtb25vRm9udEZpbGVzW2ZvbnRJbmRleF1cblxuICAgIGZvbnQgPSBhc3NydChmb250cy5nZXQoZm9udE5hbWUpLCBgRXhwZWN0ZWQgZm9udCAke2ZvbnROYW1lfWApXG4gICAgZm9udFB0cyA9IGZvbnRJbWFnZVRvUG9pbnRzKGZvbnQpXG5cbiAgICBjb25zdCBidWZmZXIgPSBzdGF0ZS52aWV3LmdldEJ1ZmZlcigpXG5cbiAgICBjb25zdCB2dyA9IGJ1ZmZlci53aWR0aCAtIHBhZGRpbmcgKiAyXG4gICAgY29uc3QgdmggPSBidWZmZXIuaGVpZ2h0IC0gcGFkZGluZyAqIDJcblxuICAgIHRleHRDb2xzID0gTWF0aC5mbG9vcih2dyAvIGZvbnQud2lkdGgpXG4gICAgdGV4dFJvd3MgPSBNYXRoLmZsb29yKHZoIC8gZm9udC5oZWlnaHQpXG5cbiAgICB0ZXJtLmFwcGVuZExpbmUoYEZPTlQ9JHtmb250TmFtZX1gKVxuICB9XG5cbiAgY29uc3QgcmVzaXplZCA9ICgpID0+IHtcbiAgICB0ZXJtLmFwcGVuZExpbmUoYFRTSVpFPSR7dGV4dENvbHN9eCR7dGV4dFJvd3N9YClcbiAgfVxuXG4gIGNvbnN0IGluaXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2luaXRpYWxpemluZyB0ZXh0IHNhbmRib3ggc2NlbmUnKVxuXG4gICAgZm9yIChjb25zdCBuIG9mIG1vbm9Gb250RmlsZXMpIHtcbiAgICAgIGZvbnRzLnNldChuLCBhd2FpdCBsb2FkRm9udE1vbm8obikpXG4gICAgfVxuXG4gICAgdGVybS5jbGVhcigpXG4gICAgdGVybS5hcHBlbmRMaW5lKCdUZXh0IE1vZGUgU2FuZGJveCcpXG5cbiAgICBmb250SW5kZXggPSA2IC8vIElCTV9WR0FfOHgxNFxuXG4gICAgc2V0Rm9udChzdGF0ZSwgZm9udEluZGV4KVxuICAgIHJlc2l6ZWQoKVxuICB9XG5cbiAgY29uc3QgYmdDb2xvciA9IGNyZWF0ZUNvbG9yKDB4MWYsIDB4MWYsIDB4MWYpXG4gIGNvbnN0IGZnQ29sb3IgPSBjcmVhdGVDb2xvcigweDRmLCAweGMxLCAweGZmKVxuXG4gIGNvbnN0IHBhZGRpbmcgPSAyXG5cbiAgY29uc3QgY3Vyc29yUmF0ZSA9IDUwMFxuXG4gIGNvbnN0IF9oYW5kbGVLZXlzID0gKHN0YXRlOiBTdGF0ZSkgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBzdGF0ZS5nZXRLZXlzKClcblxuICAgIGlmIChrZXlzWydFc2NhcGUnXSkge1xuICAgICAgc3RhdGUuc2V0UnVubmluZyhmYWxzZSlcblxuICAgICAgLy8gY29uc3VtZSB0aGUga2V5XG4gICAgICBrZXlzWydFc2NhcGUnXSA9IGZhbHNlXG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGZTdGF0ZSA9IGtleXNbJ0YxJ11cblxuICAgIGlmIChmU3RhdGUpIHtcbiAgICAgIGZvbnRJbmRleCA9IChmb250SW5kZXggKyAxKSAlIG1vbm9Gb250RmlsZXMubGVuZ3RoXG4gICAgICBrZXlzWydGMSddID0gZmFsc2VcbiAgICAgIHNldEZvbnQoc3RhdGUsIGZvbnRJbmRleClcbiAgICAgIHJlc2l6ZWQoKVxuICAgIH1cblxuICAgIGNvbnN0IGtleVByZXNzZXMgPSBzdGF0ZS5nZXRLZXlQcmVzc2VzKClcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleVByZXNzZXMpIHtcbiAgICAgIGlmIChwcmludGFibGVLZXlTZXQuaGFzKGtleSBhcyBQcmludGFibGVLZXkpKSB7XG4gICAgICAgIHRlcm0uYXBwZW5kKGtleSlcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICB0ZXJtLmFwcGVuZExpbmUoKVxuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09PSAnQmFja3NwYWNlJykge1xuICAgICAgICB0ZXJtLmJhY2tzcGFjZSgpXG4gICAgICAgIGNvbnNvbGUubG9nKCdiYWNrc3BhY2UnKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN1bWUgYWxsIGtleSBwcmVzc2VzXG4gICAga2V5UHJlc3Nlcy5sZW5ndGggPSAwXG4gIH1cblxuICBjb25zdCB1cGRhdGUgPSAoc3RhdGU6IFN0YXRlKSA9PiB7XG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAvLyBrZXlzXG4gICAgICBfaGFuZGxlS2V5cyhzdGF0ZSlcblxuICAgICAgLy8gbW91c2VcblxuICAgICAgY29uc3Qgd2hlZWwgPSBzdGF0ZS5tb3VzZS50YWtlV2hlZWwoKVxuICAgICAgY29uc3Qgem9vbSA9IHN0YXRlLnZpZXcuZ2V0Wm9vbSgpXG5cbiAgICAgIGlmICh3aGVlbCA8IDApIHtcbiAgICAgICAgLy9zdGF0ZS52aWV3Lnpvb20gKz0gMVxuICAgICAgICBzdGF0ZS52aWV3LnNldFpvb20oem9vbSArIDEpXG4gICAgICB9IGVsc2UgaWYgKHdoZWVsID4gMCkge1xuICAgICAgICBzdGF0ZS52aWV3LnNldFpvb20oem9vbSAtIDEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZHJhd1xuXG4gICAgY29uc3QgYnVmZmVyID0gc3RhdGUudmlldy5nZXRCdWZmZXIoKVxuXG4gICAgZmlsbChidWZmZXIsIGJnQ29sb3IpXG5cbiAgICBjb25zdCB2dyA9IGJ1ZmZlci53aWR0aCAtIHBhZGRpbmcgKiAyXG4gICAgY29uc3QgdmggPSBidWZmZXIuaGVpZ2h0IC0gcGFkZGluZyAqIDJcblxuICAgIGNvbnN0IG5ld1RleHRDb2xzID0gTWF0aC5mbG9vcih2dyAvIGZvbnQud2lkdGgpXG4gICAgY29uc3QgbmV3VGV4dFJvd3MgPSBNYXRoLmZsb29yKHZoIC8gZm9udC5oZWlnaHQpXG5cbiAgICBpZiAobmV3VGV4dENvbHMgIT09IHRleHRDb2xzIHx8IG5ld1RleHRSb3dzICE9PSB0ZXh0Um93cykge1xuICAgICAgdGV4dENvbHMgPSBuZXdUZXh0Q29sc1xuICAgICAgdGV4dFJvd3MgPSBuZXdUZXh0Um93c1xuXG4gICAgICByZXNpemVkKClcbiAgICB9XG5cbiAgICBjb25zdCB0ZXJtVmlldyA9IHRlcm0udmlldyh0ZXh0Q29scywgdGV4dFJvd3MpXG5cbiAgICBjb25zdCBpc0N1cnNvciA9IChzdGF0ZS50aW1lLmdldEVsYXBzZWQoKSAlIChjdXJzb3JSYXRlICogMikpIDwgY3Vyc29yUmF0ZVxuXG4gICAgbGV0IGN1cnNvciA9IGlzQ3Vyc29yID8gJ18nIDogJyAnXG5cbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRlcm1WaWV3Lmxlbmd0aDsgeSsrKSB7XG4gICAgICBsZXQgbGluZSA9IHRlcm1WaWV3W3ldXG5cbiAgICAgIGlmICh5ID09PSB0ZXJtVmlldy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGxpbmUgKz0gY3Vyc29yXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxpbmVMYXlvdXQgPSBsYXlvdXRUZXh0TGluZShmb250LCBsaW5lKVxuICAgICAgY29uc3QgZHggPSBwYWRkaW5nXG4gICAgICBjb25zdCBkeSA9IHBhZGRpbmcgKyB5ICogZm9udC5oZWlnaHRcblxuICAgICAgY29uc3QgaW5kaWNlcyA9IHRleHRMYXlvdXRUb0luZGljZXMoXG4gICAgICAgIGJ1ZmZlciwgZHgsIGR5LCBmb250UHRzLCBsaW5lTGF5b3V0XG4gICAgICApXG5cbiAgICAgIGZpbGxJbmRpY2VzKGluZGljZXMsIGJ1ZmZlciwgZmdDb2xvcilcbiAgICB9XG5cbiAgICAvLyBkZWJ1Z1xuXG4gICAgY29uc3QgZnJhbWVUaW1lID0gc3RhdGUudGltZS5nZXRGcmFtZVRpbWUoKVxuICAgIGNvbnN0IGZwcyA9IE1hdGgucm91bmQoMTAwMCAvIGZyYW1lVGltZSlcbiAgICBjb25zdCBmcHNUZXh0ID0gYCR7ZnBzfSBmcHMgKCR7ZnJhbWVUaW1lLnRvRml4ZWQoMSl9bXMpYFxuXG4gICAgY29uc3QgZnBzVyA9IGZvbnQud2lkdGggKiBmcHNUZXh0Lmxlbmd0aCArIHBhZGRpbmcgKiAyXG4gICAgY29uc3QgZnBzSCA9IGZvbnQuaGVpZ2h0ICsgcGFkZGluZyAqIDJcbiAgICBjb25zdCBmcHNYID0gYnVmZmVyLndpZHRoIC0gZnBzVyAtIHBhZGRpbmdcbiAgICBjb25zdCBmcHNZID0gcGFkZGluZ1xuXG4gICAgY29uc3QgZnBzQmcgPSBjcmVhdGVDb2xvcigweDAwLCAweDc4LCAweGQ0KVxuICAgIGNvbnN0IGZwc0ZnID0gY3JlYXRlQ29sb3IoMHhmZiwgMHhkNywgMHgwMClcblxuICAgIGZpbGwoYnVmZmVyLCBmcHNCZywgW2Zwc1gsIGZwc1ksIGZwc1csIGZwc0hdKVxuXG4gICAgY29uc3QgZnBzTGF5b3V0ID0gbGF5b3V0VGV4dExpbmUoZm9udCwgZnBzVGV4dClcblxuICAgIGNvbnN0IGZwc0luZGljZXMgPSB0ZXh0TGF5b3V0VG9JbmRpY2VzKFxuICAgICAgYnVmZmVyLCBmcHNYICsgcGFkZGluZywgZnBzWSArIHBhZGRpbmcsIGZvbnRQdHMsIGZwc0xheW91dFxuICAgIClcblxuICAgIGZpbGxJbmRpY2VzKGZwc0luZGljZXMsIGJ1ZmZlciwgZnBzRmcpXG4gIH1cblxuICBjb25zdCBxdWl0ID0gYXN5bmMgKF9zdGF0ZTogU3RhdGUpID0+IHtcbiAgICBjb25zb2xlLmxvZygncXVpdHRpbmcgdGV4dCBzYW5kYm94IHNjZW5lJylcbiAgfVxuXG4gIGNvbnN0IHNldEFjdGl2ZSA9IChhY3RpdmU6IGJvb2xlYW4pID0+IHtcbiAgICBpc0FjdGl2ZSA9IGFjdGl2ZVxuICB9XG5cbiAgcmV0dXJuIHsgaW5pdCwgdXBkYXRlLCBxdWl0LCBzZXRBY3RpdmUgfVxufVxuIl19