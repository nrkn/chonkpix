import { debugTextSceneHelper } from '../../lib/scene/debug-text.js';
import { exitOnEscape, zoomOnWheel } from '../../lib/scene/io.js';
import { maybe } from '../../lib/util.js';
import { blitVoxels } from '../../lib/voxel/blit.js';
const mapW = 192;
const mapH = 192;
const mapCx = mapW / 2;
const mapCy = mapH / 2;
// todo - set up some guide lines so we can try to sample some of the 3d voxels 
// and drawing into a fixed rect on the buffer
// try using the center of the dest rect as the point to normalize the heightmap
// to, eg if it's height 64, we want that point drawn at the exact center of
// the fixed rect, not 64 pixels up
export const voxelScene = () => {
    let isActive = false;
    let voxels;
    let dirty = true;
    let debugHelper;
    let debugText = [];
    const init = async (state) => {
        voxels = [];
        debugHelper = debugTextSceneHelper(() => debugText);
        await debugHelper.init(state);
        isActive = true;
    };
    const io = (state) => {
        if (exitOnEscape(state))
            return;
        if (zoomOnWheel(state)) {
            dirty = true;
        }
    };
    const update = (state) => {
        if (!maybe(voxels))
            throw Error('voxels not initialized');
        if (!maybe(debugHelper))
            throw Error('debugHelper not initialized');
        if (isActive)
            io(state);
        if (!dirty)
            return;
        const buffer = state.view.getBuffer();
        const { width, height } = buffer;
        blitVoxels(buffer, voxels);
        dirty = false;
        const frameTime = state.time.getFrameTime();
        const fps = Math.round(1000 / frameTime);
        const fpsText = `${fps} fps (${frameTime.toFixed(1)}ms)`;
        debugText = [fpsText];
        debugHelper.update(state);
    };
    const quit = async (_state) => {
        isActive = false;
        voxels = null;
    };
    const setActive = (active) => {
        isActive = active;
    };
    return { init, update, quit, setActive };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm94ZWwtc2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmVzL3NhbmRib3gvdm94ZWwtc2NlbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUVqRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBR3BELE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQTtBQUNoQixNQUFNLElBQUksR0FBRyxHQUFHLENBQUE7QUFFaEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQTtBQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFBO0FBRXRCLGdGQUFnRjtBQUNoRiw4Q0FBOEM7QUFDOUMsZ0ZBQWdGO0FBQ2hGLDRFQUE0RTtBQUM1RSxtQ0FBbUM7QUFFbkMsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLEdBQVUsRUFBRTtJQUNwQyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUE7SUFDcEIsSUFBSSxNQUFvQixDQUFBO0lBQ3hCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNoQixJQUFJLFdBQXlCLENBQUE7SUFDN0IsSUFBSSxTQUFTLEdBQWEsRUFBRSxDQUFBO0lBRTVCLE1BQU0sSUFBSSxHQUFHLEtBQUssRUFBRSxLQUFZLEVBQUUsRUFBRTtRQUNsQyxNQUFNLEdBQUcsRUFBRSxDQUFBO1FBQ1gsV0FBVyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRW5ELE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUU3QixRQUFRLEdBQUcsSUFBSSxDQUFBO0lBQ2pCLENBQUMsQ0FBQTtJQUVELE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDMUIsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTTtRQUUvQixJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDZCxDQUFDO0lBQ0gsQ0FBQyxDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUFFLE1BQU0sS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUE7UUFDekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFBRSxNQUFNLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO1FBRW5FLElBQUksUUFBUTtZQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUV2QixJQUFJLENBQUMsS0FBSztZQUFFLE9BQU07UUFFbEIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNyQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQTtRQUVoQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBRTFCLEtBQUssR0FBRyxLQUFLLENBQUE7UUFFYixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFBO1FBQ3hDLE1BQU0sT0FBTyxHQUFHLEdBQUcsR0FBRyxTQUFTLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtRQUV4RCxTQUFTLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUVyQixXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzNCLENBQUMsQ0FBQTtJQUVELE1BQU0sSUFBSSxHQUFHLEtBQUssRUFBRSxNQUFhLEVBQUUsRUFBRTtRQUNuQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1FBQ2hCLE1BQU0sR0FBRyxJQUFJLENBQUE7SUFDZixDQUFDLENBQUE7SUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQWUsRUFBRSxFQUFFO1FBQ3BDLFFBQVEsR0FBRyxNQUFNLENBQUE7SUFDbkIsQ0FBQyxDQUFBO0lBRUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFBO0FBQzFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlYnVnVGV4dFNjZW5lSGVscGVyIH0gZnJvbSAnLi4vLi4vbGliL3NjZW5lL2RlYnVnLXRleHQuanMnXG5pbXBvcnQgeyBleGl0T25Fc2NhcGUsIHpvb21PbldoZWVsIH0gZnJvbSAnLi4vLi4vbGliL3NjZW5lL2lvLmpzJ1xuaW1wb3J0IHsgTWF5YmUsIFNjZW5lLCBTdGF0ZSB9IGZyb20gJy4uLy4uL2xpYi90eXBlcy5qcydcbmltcG9ydCB7IG1heWJlIH0gZnJvbSAnLi4vLi4vbGliL3V0aWwuanMnXG5pbXBvcnQgeyBibGl0Vm94ZWxzIH0gZnJvbSAnLi4vLi4vbGliL3ZveGVsL2JsaXQuanMnXG5pbXBvcnQgeyBWb3ggfSBmcm9tICcuLi8uLi9saWIvdm94ZWwvdHlwZXMuanMnXG5cbmNvbnN0IG1hcFcgPSAxOTJcbmNvbnN0IG1hcEggPSAxOTJcblxuY29uc3QgbWFwQ3ggPSBtYXBXIC8gMlxuY29uc3QgbWFwQ3kgPSBtYXBIIC8gMlxuXG4vLyB0b2RvIC0gc2V0IHVwIHNvbWUgZ3VpZGUgbGluZXMgc28gd2UgY2FuIHRyeSB0byBzYW1wbGUgc29tZSBvZiB0aGUgM2Qgdm94ZWxzIFxuLy8gYW5kIGRyYXdpbmcgaW50byBhIGZpeGVkIHJlY3Qgb24gdGhlIGJ1ZmZlclxuLy8gdHJ5IHVzaW5nIHRoZSBjZW50ZXIgb2YgdGhlIGRlc3QgcmVjdCBhcyB0aGUgcG9pbnQgdG8gbm9ybWFsaXplIHRoZSBoZWlnaHRtYXBcbi8vIHRvLCBlZyBpZiBpdCdzIGhlaWdodCA2NCwgd2Ugd2FudCB0aGF0IHBvaW50IGRyYXduIGF0IHRoZSBleGFjdCBjZW50ZXIgb2Zcbi8vIHRoZSBmaXhlZCByZWN0LCBub3QgNjQgcGl4ZWxzIHVwXG5cbmV4cG9ydCBjb25zdCB2b3hlbFNjZW5lID0gKCk6IFNjZW5lID0+IHtcbiAgbGV0IGlzQWN0aXZlID0gZmFsc2VcbiAgbGV0IHZveGVsczogTWF5YmU8Vm94W10+XG4gIGxldCBkaXJ0eSA9IHRydWVcbiAgbGV0IGRlYnVnSGVscGVyOiBNYXliZTxTY2VuZT5cbiAgbGV0IGRlYnVnVGV4dDogc3RyaW5nW10gPSBbXVxuXG4gIGNvbnN0IGluaXQgPSBhc3luYyAoc3RhdGU6IFN0YXRlKSA9PiB7XG4gICAgdm94ZWxzID0gW11cbiAgICBkZWJ1Z0hlbHBlciA9IGRlYnVnVGV4dFNjZW5lSGVscGVyKCgpID0+IGRlYnVnVGV4dClcblxuICAgIGF3YWl0IGRlYnVnSGVscGVyLmluaXQoc3RhdGUpXG5cbiAgICBpc0FjdGl2ZSA9IHRydWVcbiAgfVxuXG4gIGNvbnN0IGlvID0gKHN0YXRlOiBTdGF0ZSkgPT4ge1xuICAgIGlmIChleGl0T25Fc2NhcGUoc3RhdGUpKSByZXR1cm5cblxuICAgIGlmICh6b29tT25XaGVlbChzdGF0ZSkpIHtcbiAgICAgIGRpcnR5ID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZSA9IChzdGF0ZTogU3RhdGUpID0+IHtcbiAgICBpZiAoIW1heWJlKHZveGVscykpIHRocm93IEVycm9yKCd2b3hlbHMgbm90IGluaXRpYWxpemVkJylcbiAgICBpZiAoIW1heWJlKGRlYnVnSGVscGVyKSkgdGhyb3cgRXJyb3IoJ2RlYnVnSGVscGVyIG5vdCBpbml0aWFsaXplZCcpXG5cbiAgICBpZiAoaXNBY3RpdmUpIGlvKHN0YXRlKVxuXG4gICAgaWYgKCFkaXJ0eSkgcmV0dXJuXG5cbiAgICBjb25zdCBidWZmZXIgPSBzdGF0ZS52aWV3LmdldEJ1ZmZlcigpXG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBidWZmZXJcblxuICAgIGJsaXRWb3hlbHMoYnVmZmVyLCB2b3hlbHMpXG5cbiAgICBkaXJ0eSA9IGZhbHNlXG5cbiAgICBjb25zdCBmcmFtZVRpbWUgPSBzdGF0ZS50aW1lLmdldEZyYW1lVGltZSgpXG4gICAgY29uc3QgZnBzID0gTWF0aC5yb3VuZCgxMDAwIC8gZnJhbWVUaW1lKVxuICAgIGNvbnN0IGZwc1RleHQgPSBgJHtmcHN9IGZwcyAoJHtmcmFtZVRpbWUudG9GaXhlZCgxKX1tcylgXG5cbiAgICBkZWJ1Z1RleHQgPSBbZnBzVGV4dF1cblxuICAgIGRlYnVnSGVscGVyLnVwZGF0ZShzdGF0ZSlcbiAgfVxuXG4gIGNvbnN0IHF1aXQgPSBhc3luYyAoX3N0YXRlOiBTdGF0ZSkgPT4ge1xuICAgIGlzQWN0aXZlID0gZmFsc2VcbiAgICB2b3hlbHMgPSBudWxsXG4gIH1cblxuICBjb25zdCBzZXRBY3RpdmUgPSAoYWN0aXZlOiBib29sZWFuKSA9PiB7XG4gICAgaXNBY3RpdmUgPSBhY3RpdmVcbiAgfVxuXG4gIHJldHVybiB7IGluaXQsIHVwZGF0ZSwgcXVpdCwgc2V0QWN0aXZlIH1cbn1cbiJdfQ==