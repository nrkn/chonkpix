import { lineToRows, rectToRows, triangleToRows } from '../../lib/image/rows.js';
import { polygonTriangles } from '../../sandbox/util.js';
import { takeMouse, releaseMouse } from '../../lib/engine.js';
import { blit, blitRows } from '../../lib/image/blit.js';
import { bresenhamLine } from '../../lib/image/bresenham.js';
import { colorToRgba, createColor, generateHues, sampleGradient } from '../../lib/image/color.js';
import { composite } from '../../lib/image/composite.js';
import { fill, fillCol, fillIndices, fillRows } from '../../lib/image/fill.js';
import { loadImage } from '../../lib/image/load.js';
import { drawRotated } from '../../lib/image/rotate.js';
import { pointsToIndices } from '../../lib/image/util.js';
import { generateGridLayout, generateNamedGridLayout } from '../../lib/grid/index.js';
import { rowQuery } from '../../lib/image/query.js';
import { createImage } from '../../lib/image/create.js';
import { limitedLogger, maybe } from '../../lib/util.js';
const readAlpha = (state, ch, destroy = false) => {
    const upper = ch.toUpperCase();
    const lower = ch.toLowerCase();
    const keys = state.getKeys();
    const alpha = keys[upper] ? upper : keys[lower] ? lower : null;
    if (destroy && alpha) {
        keys[alpha] = false;
    }
    return alpha;
};
export const debugScene = () => {
    let testImg0;
    let pattern0;
    let cursor;
    let pattern0Rows;
    const patternColors = generateHues(8);
    const patternColorImage = createImage(8, 8);
    for (let x = 0; x < 8; x++) {
        const color = patternColors[x];
        fillCol(patternColorImage, color, x);
    }
    const minPolySides = 3;
    const maxPolySides = 128;
    // enough for one run through, then stop logging, otherwise we flood console
    // calling *every* frame
    const gradientLogger = limitedLogger(32);
    let polySides = 5;
    let polyRotation = 0;
    let strokePoly = false;
    let isActive = true;
    const init = async (_state) => {
        console.log('starting debug scene');
        testImg0 = await loadImage('scenes/debug/test-0.png');
        pattern0 = await loadImage('scenes/debug/pattern-0.png');
        cursor = await loadImage('scenes/debug/cursor.png');
        polyRotation = 0;
        pattern0Rows = rowQuery(pattern0, r => r === 0);
        console.log('pattern0Rows', pattern0Rows);
        takeMouse();
    };
    const bgColor0 = [0x33, 0x99, 0xff];
    const bgColor1 = [0x11, 0x77, 0xdd];
    const paintColor = [0xff, 0x88, 0x00];
    let painting = false;
    let lastPaintX = null;
    let lastPaintY = null;
    // nb - these are retained even when the scene exits and restarts
    // as a test for scenes holding state between runs
    //
    // if this is not desired, state should be reset in init or quit on each run
    //
    const paintPts = {};
    const getPaintRow = (y) => (paintPts[y] || (paintPts[y] = {}));
    const addPaintPt = (x, y) => {
        // you get gaps if you move the mouse quickly, so interpolate between last 
        // point and this point
        if (maybe(lastPaintX) && maybe(lastPaintY)) {
            const line = bresenhamLine(lastPaintX, lastPaintY, x, y);
            for (const [x, y] of line) {
                getPaintRow(y)[x] = true;
            }
        }
        else {
            getPaintRow(y)[x] = true;
        }
        lastPaintX = x;
        lastPaintY = y;
    };
    let frame = 0;
    const _handleKeys = (state) => {
        const keys = state.getKeys();
        if (keys['Escape']) {
            state.setRunning(false);
            // consume the key
            keys['Escape'] = false;
            return;
        }
        if (keys['ArrowUp']) {
            polySides--;
            keys['ArrowUp'] = false;
        }
        if (keys['ArrowDown']) {
            polySides++;
            keys['ArrowDown'] = false;
        }
        const sState = readAlpha(state, 'S', true);
        if (sState) {
            strokePoly = !strokePoly;
        }
    };
    const update = (state) => {
        if (isActive) {
            _handleKeys(state);
            polySides = Math.min(Math.max(polySides, minPolySides), maxPolySides);
            // capture a reference - it is a destructive read
            const wheel = state.mouse.takeWheel();
            const zoom = state.view.getZoom();
            if (wheel < 0) {
                state.view.setZoom(zoom + 1);
            }
            else if (wheel > 0) {
                state.view.setZoom(zoom - 1);
            }
            // maybe paint
            if (state.mouse.getButtons()[0]) {
                addPaintPt(state.mouse.getX(), state.mouse.getY());
                painting = true;
            }
            else if (painting) {
                painting = false;
                lastPaintX = null;
                lastPaintY = null;
            }
        }
        const buffer = state.view.getBuffer();
        const { width, height } = buffer;
        // not very efficent - plenty of faster ways to do this - but that's a good
        // thing, we're trying to stuff as much into the debug scene as possible
        // so we can give it a bit of a stress test
        //
        // even with everything we're doing still comfortably runs at 60fps tho!
        for (let y = 0; y < height; y++) {
            const row = y * width;
            for (let x = 0; x < width; x++) {
                const index = row + x;
                const dataIndex = index * 4;
                const isPaint = paintPts[y] && paintPts[y][x];
                if (isPaint) {
                    buffer.data[dataIndex] = paintColor[0];
                    buffer.data[dataIndex + 1] = paintColor[1];
                    buffer.data[dataIndex + 2] = paintColor[2];
                    buffer.data[dataIndex + 3] = 0xff;
                    continue;
                }
                const isCheck = (x + y) % 2 === 0;
                buffer.data[dataIndex] = isCheck ? bgColor0[0] : bgColor1[0];
                buffer.data[dataIndex + 1] = isCheck ? bgColor0[1] : bgColor1[1];
                buffer.data[dataIndex + 2] = isCheck ? bgColor0[2] : bgColor1[2];
                buffer.data[dataIndex + 3] = 0xff;
            }
        }
        // sprites, blitting, composite etc
        // a0..b7    
        const testGrid = generateNamedGridLayout(generateGridLayout(32, 32, 2, 8, 1, 1));
        const { width: gw } = testGrid;
        const offX = width - gw;
        const offY = 0;
        // straight blit
        const { a0 } = testGrid;
        const a0X = a0[0] + offX;
        const a0Y = a0[1] + offY;
        blit(testImg0, buffer, [0, 0, testImg0.width, testImg0.height, a0X, a0Y]);
        // testing oob on src
        const { b0 } = testGrid;
        const b0X = b0[0] + offX - 16;
        const b0Y = b0[1] + offY - 16;
        blit(testImg0, buffer, [
            -16, -16, testImg0.width + 32, testImg0.height + 32,
            b0X, b0Y
        ]);
        // alpha composite
        const { a1 } = testGrid;
        const a1X = a1[0] + offX;
        const a1Y = a1[1] + offY;
        composite(testImg0, buffer, [0, 0, testImg0.width, testImg0.height, a1X, a1Y], 0.5);
        // oob on dest
        const { b1 } = testGrid;
        const b1X = b1[0] + offX + 16;
        const b1Y = b1[1] + offY;
        blit(testImg0, buffer, [
            0, 0, testImg0.width, testImg0.height,
            b1X, b1Y
        ]);
        // color fill
        const { a2 } = testGrid;
        const a2X = a2[0] + offX;
        const a2Y = a2[1] + offY;
        const color = createColor(0x6c, 0x28, 0xbc);
        fill(buffer, color, [a2X, a2Y, testImg0.width, testImg0.height]);
        // sprite rotation
        const { b2 } = testGrid;
        const b2X = b2[0] + offX + testImg0.width / 2;
        const b2Y = b2[1] + offY + testImg0.height / 2;
        drawRotated(testImg0, testImg0.width / 2, testImg0.height / 2, buffer, b2X, b2Y, polyRotation);
        // blitRows test
        const { a3 } = testGrid;
        const a3X = a3[0] + offX;
        const a3Y = a3[1] + offY;
        fill(buffer, createColor(0, 0, 0), [a3X, a3Y, pattern0.width, pattern0.height]);
        blitRows(patternColorImage, pattern0Rows, buffer, a3X, a3Y);
        // gradient test
        const { b3 } = testGrid;
        const b3X = b3[0] + offX;
        const b3Y = b3[1] + offY;
        const gColors0 = generateHues(6);
        const step0 = 1 / (gColors0.length - 1);
        const gStops0 = gColors0.map((c, i) => {
            const rgba = colorToRgba(c);
            return [...rgba, i * step0];
        });
        const gImage0 = createImage(32, 32);
        for (let x = 0; x < gImage0.width; x++) {
            const at = x / (gImage0.width - 1);
            const rgba = sampleGradient(gStops0, at);
            const color = createColor(...rgba);
            fillCol(gImage0, color, x);
        }
        blit(gImage0, buffer, [0, 0, gImage0.width, gImage0.height, b3X, b3Y]);
        // gradient test 2, alpha + composite
        const { a4 } = testGrid;
        const a4X = a4[0] + offX;
        const a4Y = a4[1] + offY;
        const gColors1 = gColors0.slice().reverse();
        const step1 = 1 / (gColors1.length - 1);
        const gstops1 = gColors1.map((c, i) => {
            const [r, g, b] = colorToRgba(c);
            const a = i * step1 * 255;
            return [r, g, b, a, i * step1];
        });
        const gImage1 = createImage(32, 32);
        for (let x = 0; x < gImage1.width; x++) {
            const at = x / (gImage1.width - 1);
            const rgba = sampleGradient(gstops1, at);
            const color = createColor(...rgba);
            gradientLogger.log('gradient', x, rgba);
            fillCol(gImage1, color, x);
        }
        composite(gImage1, buffer, [0, 0, gImage1.width, gImage1.height, a4X, a4Y]);
        // horizontally sloping line
        const testLineColor = createColor(0x33, 0xff, 0x99);
        const testLine = [-32, height / 2 - 32, width + 32, height / 2 + 32];
        // nb - this is only faster with the right slope - otherwise it is slower
        // it is better to use bresenham for the general case
        const testLineRows = lineToRows(...testLine);
        fillRows(testLineRows, buffer, testLineColor);
        // rect via rows
        const rectColor = createColor(0xff, 0x99, 0x33);
        const testRect = [48, 48, 32, 24];
        const testRectRows = rectToRows(...testRect);
        fillRows(testRectRows, buffer, rectColor);
        // polygon
        const minSide = Math.min(width, height);
        const fillColors = generateHues(polySides);
        const shape = polygonTriangles(polySides, width / 2, height / 2, minSide / 4, polyRotation);
        const frameTime = state.time.getFrameTime();
        const rotateBy = 0.001 * frameTime;
        const strokeLine = (line, color) => {
            const pts = bresenhamLine(...line);
            const indices = pointsToIndices(width, height, 1)(pts);
            fillIndices(indices, buffer, color);
        };
        const strokeTri = (tri, color) => {
            const line0 = [tri[0][0], tri[0][1], tri[1][0], tri[1][1]];
            const line1 = [tri[1][0], tri[1][1], tri[2][0], tri[2][1]];
            const line2 = [tri[2][0], tri[2][1], tri[0][0], tri[0][1]];
            strokeLine(line0, color);
            strokeLine(line1, color);
            strokeLine(line2, color);
        };
        for (let i = 0; i < polySides; i++) {
            const color = fillColors[i % fillColors.length];
            const tri = shape[i];
            const ptriRows = triangleToRows(...tri);
            fillRows(ptriRows, buffer, color);
        }
        const strokeColors = strokePoly ? generateHues(polySides, 50) : fillColors;
        for (let i = 0; i < polySides; i++) {
            const color = strokeColors[i % strokeColors.length];
            const tri = shape[i];
            strokeTri(tri, color);
        }
        // show custom cursor
        if (state.mouse.isInBounds()) {
            composite(cursor, buffer, [0, 0, cursor.width, cursor.height, state.mouse.getX(), state.mouse.getY()]);
        }
        //
        polyRotation += rotateBy;
        frame++;
    };
    const quit = async (state) => {
        console.log('quitting debug scene');
        releaseMouse();
    };
    const setActive = (active) => {
        // we just got focus
        if (active && !isActive) {
            takeMouse();
        }
        // we just lost focus 
        if (!active && isActive) {
            releaseMouse();
        }
        isActive = active;
    };
    return { init, update, quit, setActive };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctc2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmVzL3NhbmRib3gvZGVidWctc2NlbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDaEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUM3RCxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUM1RCxPQUFPLEVBQ0wsV0FBVyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUN2RCxNQUFNLDBCQUEwQixDQUFBO0FBQ2pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDOUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFFekQsT0FBTyxFQUNMLGtCQUFrQixFQUFFLHVCQUF1QixFQUM1QyxNQUFNLHlCQUF5QixDQUFBO0FBRWhDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsTUFBTSxt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QUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUM5RCxNQUFNLEtBQUssR0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRTlELFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDeEIsVUFBVSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtZQUN4QixVQUFVLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzFCLENBQUMsQ0FBQTtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNuQyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUMvQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFFcEIsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7WUFDdkMsUUFBUSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDbkMsQ0FBQztRQUVELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFBO1FBRTFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNuQyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNuRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFFcEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUN2QixDQUFDO1FBRUQscUJBQXFCO1FBRXJCLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDO1lBQzdCLFNBQVMsQ0FDUCxNQUFNLEVBQUUsTUFBTSxFQUNkLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQzVFLENBQUE7UUFDSCxDQUFDO1FBRUQsRUFBRTtRQUVGLFlBQVksSUFBSSxRQUFRLENBQUE7UUFFeEIsS0FBSyxFQUFFLENBQUE7SUFDVCxDQUFDLENBQUE7SUFFRCxNQUFNLElBQUksR0FBRyxLQUFLLEVBQUUsS0FBWSxFQUFFLEVBQUU7UUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO1FBRW5DLFlBQVksRUFBRSxDQUFBO0lBQ2hCLENBQUMsQ0FBQTtJQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBZSxFQUFFLEVBQUU7UUFDcEMsb0JBQW9CO1FBQ3BCLElBQUksTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsU0FBUyxFQUFFLENBQUE7UUFDYixDQUFDO1FBRUQsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxNQUFNLElBQUksUUFBUSxFQUFFLENBQUM7WUFDeEIsWUFBWSxFQUFFLENBQUE7UUFDaEIsQ0FBQztRQUVELFFBQVEsR0FBRyxNQUFNLENBQUE7SUFDbkIsQ0FBQyxDQUFBO0lBRUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFBO0FBQzFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxpbmVUb1Jvd3MsIHJlY3RUb1Jvd3MsIHRyaWFuZ2xlVG9Sb3dzIH0gZnJvbSAnLi4vLi4vbGliL2ltYWdlL3Jvd3MuanMnXG5pbXBvcnQgeyBwb2x5Z29uVHJpYW5nbGVzIH0gZnJvbSAnLi4vLi4vc2FuZGJveC91dGlsLmpzJ1xuaW1wb3J0IHsgdGFrZU1vdXNlLCByZWxlYXNlTW91c2UgfSBmcm9tICcuLi8uLi9saWIvZW5naW5lLmpzJ1xuaW1wb3J0IHsgYmxpdCwgYmxpdFJvd3MgfSBmcm9tICcuLi8uLi9saWIvaW1hZ2UvYmxpdC5qcydcbmltcG9ydCB7IGJyZXNlbmhhbUxpbmUgfSBmcm9tICcuLi8uLi9saWIvaW1hZ2UvYnJlc2VuaGFtLmpzJ1xuaW1wb3J0IHtcbiAgY29sb3JUb1JnYmEsIGNyZWF0ZUNvbG9yLCBnZW5lcmF0ZUh1ZXMsIHNhbXBsZUdyYWRpZW50XG59IGZyb20gJy4uLy4uL2xpYi9pbWFnZS9jb2xvci5qcydcbmltcG9ydCB7IGNvbXBvc2l0ZSB9IGZyb20gJy4uLy4uL2xpYi9pbWFnZS9jb21wb3NpdGUuanMnXG5pbXBvcnQgeyBmaWxsLCBmaWxsQ29sLCBmaWxsSW5kaWNlcywgZmlsbFJvd3MgfSBmcm9tICcuLi8uLi9saWIvaW1hZ2UvZmlsbC5qcydcbmltcG9ydCB7IGxvYWRJbWFnZSB9IGZyb20gJy4uLy4uL2xpYi9pbWFnZS9sb2FkLmpzJ1xuaW1wb3J0IHsgZHJhd1JvdGF0ZWQgfSBmcm9tICcuLi8uLi9saWIvaW1hZ2Uvcm90YXRlLmpzJ1xuaW1wb3J0IHsgcG9pbnRzVG9JbmRpY2VzIH0gZnJvbSAnLi4vLi4vbGliL2ltYWdlL3V0aWwuanMnXG5pbXBvcnQgeyBNYXliZSwgU2NlbmUsIFN0YXRlLCBUMiwgVDMsIFQ0LCBUNSB9IGZyb20gJy4uLy4uL2xpYi90eXBlcy5qcydcbmltcG9ydCB7XG4gIGdlbmVyYXRlR3JpZExheW91dCwgZ2VuZXJhdGVOYW1lZEdyaWRMYXlvdXRcbn0gZnJvbSAnLi4vLi4vbGliL2dyaWQvaW5kZXguanMnXG5pbXBvcnQgeyBSb3cgfSBmcm9tICcuLi8uLi9saWIvaW1hZ2UvdHlwZXMuanMnXG5pbXBvcnQgeyByb3dRdWVyeSB9IGZyb20gJy4uLy4uL2xpYi9pbWFnZS9xdWVyeS5qcydcbmltcG9ydCB7IGNyZWF0ZUltYWdlIH0gZnJvbSAnLi4vLi4vbGliL2ltYWdlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGxpbWl0ZWRMb2dnZXIsIG1heWJlIH0gZnJvbSAnLi4vLi4vbGliL3V0aWwuanMnXG5cbmNvbnN0IHJlYWRBbHBoYSA9IChzdGF0ZTogU3RhdGUsIGNoOiBzdHJpbmcsIGRlc3Ryb3kgPSBmYWxzZSkgPT4ge1xuICBjb25zdCB1cHBlciA9IGNoLnRvVXBwZXJDYXNlKClcbiAgY29uc3QgbG93ZXIgPSBjaC50b0xvd2VyQ2FzZSgpXG5cbiAgY29uc3Qga2V5cyA9IHN0YXRlLmdldEtleXMoKVxuXG4gIGNvbnN0IGFscGhhID0ga2V5c1t1cHBlcl0gPyB1cHBlciA6IGtleXNbbG93ZXJdID8gbG93ZXIgOiBudWxsXG5cbiAgaWYgKGRlc3Ryb3kgJiYgYWxwaGEpIHtcbiAgICBrZXlzW2FscGhhXSA9IGZhbHNlXG4gIH1cblxuICByZXR1cm4gYWxwaGFcbn1cblxuZXhwb3J0IGNvbnN0IGRlYnVnU2NlbmUgPSAoKTogU2NlbmUgPT4ge1xuICBsZXQgdGVzdEltZzA6IEltYWdlRGF0YVxuICBsZXQgcGF0dGVybjA6IEltYWdlRGF0YVxuICBsZXQgY3Vyc29yOiBJbWFnZURhdGFcblxuICBsZXQgcGF0dGVybjBSb3dzOiBSb3c8bmV2ZXI+W11cbiAgY29uc3QgcGF0dGVybkNvbG9ycyA9IGdlbmVyYXRlSHVlcyg4KVxuICBjb25zdCBwYXR0ZXJuQ29sb3JJbWFnZSA9IGNyZWF0ZUltYWdlKDgsIDgpXG5cbiAgZm9yIChsZXQgeCA9IDA7IHggPCA4OyB4KyspIHtcbiAgICBjb25zdCBjb2xvciA9IHBhdHRlcm5Db2xvcnNbeF1cblxuICAgIGZpbGxDb2wocGF0dGVybkNvbG9ySW1hZ2UsIGNvbG9yLCB4KVxuICB9XG5cbiAgY29uc3QgbWluUG9seVNpZGVzID0gM1xuICBjb25zdCBtYXhQb2x5U2lkZXMgPSAxMjhcblxuICAvLyBlbm91Z2ggZm9yIG9uZSBydW4gdGhyb3VnaCwgdGhlbiBzdG9wIGxvZ2dpbmcsIG90aGVyd2lzZSB3ZSBmbG9vZCBjb25zb2xlXG4gIC8vIGNhbGxpbmcgKmV2ZXJ5KiBmcmFtZVxuICBjb25zdCBncmFkaWVudExvZ2dlciA9IGxpbWl0ZWRMb2dnZXIoMzIpXG5cbiAgbGV0IHBvbHlTaWRlcyA9IDVcbiAgbGV0IHBvbHlSb3RhdGlvbiA9IDBcbiAgbGV0IHN0cm9rZVBvbHkgPSBmYWxzZVxuXG4gIGxldCBpc0FjdGl2ZSA9IHRydWVcblxuICBjb25zdCBpbml0ID0gYXN5bmMgKF9zdGF0ZTogU3RhdGUpID0+IHtcbiAgICBjb25zb2xlLmxvZygnc3RhcnRpbmcgZGVidWcgc2NlbmUnKVxuXG4gICAgdGVzdEltZzAgPSBhd2FpdCBsb2FkSW1hZ2UoJ3NjZW5lcy9kZWJ1Zy90ZXN0LTAucG5nJylcbiAgICBwYXR0ZXJuMCA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL2RlYnVnL3BhdHRlcm4tMC5wbmcnKVxuICAgIGN1cnNvciA9IGF3YWl0IGxvYWRJbWFnZSgnc2NlbmVzL2RlYnVnL2N1cnNvci5wbmcnKVxuXG4gICAgcG9seVJvdGF0aW9uID0gMFxuXG4gICAgcGF0dGVybjBSb3dzID0gcm93UXVlcnkocGF0dGVybjAsIHIgPT4gciA9PT0gMClcblxuICAgIGNvbnNvbGUubG9nKCdwYXR0ZXJuMFJvd3MnLCBwYXR0ZXJuMFJvd3MpXG5cbiAgICB0YWtlTW91c2UoKVxuICB9XG5cbiAgY29uc3QgYmdDb2xvcjA6IFQzID0gWzB4MzMsIDB4OTksIDB4ZmZdXG4gIGNvbnN0IGJnQ29sb3IxOiBUMyA9IFsweDExLCAweDc3LCAweGRkXVxuXG4gIGNvbnN0IHBhaW50Q29sb3I6IFQzID0gWzB4ZmYsIDB4ODgsIDB4MDBdXG4gIGxldCBwYWludGluZyA9IGZhbHNlXG4gIGxldCBsYXN0UGFpbnRYOiBNYXliZTxudW1iZXI+ID0gbnVsbFxuICBsZXQgbGFzdFBhaW50WTogTWF5YmU8bnVtYmVyPiA9IG51bGxcblxuICAvLyBuYiAtIHRoZXNlIGFyZSByZXRhaW5lZCBldmVuIHdoZW4gdGhlIHNjZW5lIGV4aXRzIGFuZCByZXN0YXJ0c1xuICAvLyBhcyBhIHRlc3QgZm9yIHNjZW5lcyBob2xkaW5nIHN0YXRlIGJldHdlZW4gcnVuc1xuICAvL1xuICAvLyBpZiB0aGlzIGlzIG5vdCBkZXNpcmVkLCBzdGF0ZSBzaG91bGQgYmUgcmVzZXQgaW4gaW5pdCBvciBxdWl0IG9uIGVhY2ggcnVuXG4gIC8vXG4gIGNvbnN0IHBhaW50UHRzOiBSZWNvcmQ8bnVtYmVyLCBNYXliZTxSZWNvcmQ8bnVtYmVyLCBNYXliZTxib29sZWFuPj4+PiA9IHt9XG5cbiAgY29uc3QgZ2V0UGFpbnRSb3cgPSAoeTogbnVtYmVyKSA9PiAocGFpbnRQdHNbeV0gfHwgKHBhaW50UHRzW3ldID0ge30pKVxuXG4gIGNvbnN0IGFkZFBhaW50UHQgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHtcbiAgICAvLyB5b3UgZ2V0IGdhcHMgaWYgeW91IG1vdmUgdGhlIG1vdXNlIHF1aWNrbHksIHNvIGludGVycG9sYXRlIGJldHdlZW4gbGFzdCBcbiAgICAvLyBwb2ludCBhbmQgdGhpcyBwb2ludFxuICAgIGlmIChtYXliZShsYXN0UGFpbnRYKSAmJiBtYXliZShsYXN0UGFpbnRZKSkge1xuICAgICAgY29uc3QgbGluZSA9IGJyZXNlbmhhbUxpbmUobGFzdFBhaW50WCwgbGFzdFBhaW50WSwgeCwgeSlcblxuICAgICAgZm9yIChjb25zdCBbeCwgeV0gb2YgbGluZSkge1xuICAgICAgICBnZXRQYWludFJvdyh5KVt4XSA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0UGFpbnRSb3coeSlbeF0gPSB0cnVlXG4gICAgfVxuXG4gICAgbGFzdFBhaW50WCA9IHhcbiAgICBsYXN0UGFpbnRZID0geVxuICB9XG5cbiAgbGV0IGZyYW1lID0gMFxuXG4gIGNvbnN0IF9oYW5kbGVLZXlzID0gKHN0YXRlOiBTdGF0ZSkgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBzdGF0ZS5nZXRLZXlzKClcblxuICAgIGlmIChrZXlzWydFc2NhcGUnXSkge1xuICAgICAgc3RhdGUuc2V0UnVubmluZyhmYWxzZSlcblxuICAgICAgLy8gY29uc3VtZSB0aGUga2V5XG4gICAgICBrZXlzWydFc2NhcGUnXSA9IGZhbHNlXG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChrZXlzWydBcnJvd1VwJ10pIHtcbiAgICAgIHBvbHlTaWRlcy0tXG5cbiAgICAgIGtleXNbJ0Fycm93VXAnXSA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKGtleXNbJ0Fycm93RG93biddKSB7XG4gICAgICBwb2x5U2lkZXMrK1xuXG4gICAgICBrZXlzWydBcnJvd0Rvd24nXSA9IGZhbHNlXG4gICAgfVxuXG4gICAgY29uc3Qgc1N0YXRlID0gcmVhZEFscGhhKHN0YXRlLCAnUycsIHRydWUpXG5cbiAgICBpZiAoc1N0YXRlKSB7XG4gICAgICBzdHJva2VQb2x5ID0gIXN0cm9rZVBvbHlcbiAgICB9XG4gIH1cblxuICBjb25zdCB1cGRhdGUgPSAoc3RhdGU6IFN0YXRlKSA9PiB7XG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICBfaGFuZGxlS2V5cyhzdGF0ZSlcblxuICAgICAgcG9seVNpZGVzID0gTWF0aC5taW4oTWF0aC5tYXgocG9seVNpZGVzLCBtaW5Qb2x5U2lkZXMpLCBtYXhQb2x5U2lkZXMpXG5cbiAgICAgIC8vIGNhcHR1cmUgYSByZWZlcmVuY2UgLSBpdCBpcyBhIGRlc3RydWN0aXZlIHJlYWRcbiAgICAgIGNvbnN0IHdoZWVsID0gc3RhdGUubW91c2UudGFrZVdoZWVsKClcbiAgICAgIGNvbnN0IHpvb20gPSBzdGF0ZS52aWV3LmdldFpvb20oKVxuXG4gICAgICBpZiAod2hlZWwgPCAwKSB7XG4gICAgICAgIHN0YXRlLnZpZXcuc2V0Wm9vbSggem9vbSArIDEgKVxuICAgICAgfSBlbHNlIGlmICh3aGVlbCA+IDApIHtcbiAgICAgICAgc3RhdGUudmlldy5zZXRab29tKCB6b29tIC0gMSApXG4gICAgICB9XG5cbiAgICAgIC8vIG1heWJlIHBhaW50XG4gICAgICBpZiAoc3RhdGUubW91c2UuZ2V0QnV0dG9ucygpWzBdKSB7XG4gICAgICAgIGFkZFBhaW50UHQoc3RhdGUubW91c2UuZ2V0WCgpLCBzdGF0ZS5tb3VzZS5nZXRZKCkpXG4gICAgICAgIHBhaW50aW5nID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChwYWludGluZykge1xuICAgICAgICBwYWludGluZyA9IGZhbHNlXG4gICAgICAgIGxhc3RQYWludFggPSBudWxsXG4gICAgICAgIGxhc3RQYWludFkgPSBudWxsXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYnVmZmVyID0gc3RhdGUudmlldy5nZXRCdWZmZXIoKVxuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gYnVmZmVyXG5cbiAgICAvLyBub3QgdmVyeSBlZmZpY2VudCAtIHBsZW50eSBvZiBmYXN0ZXIgd2F5cyB0byBkbyB0aGlzIC0gYnV0IHRoYXQncyBhIGdvb2RcbiAgICAvLyB0aGluZywgd2UncmUgdHJ5aW5nIHRvIHN0dWZmIGFzIG11Y2ggaW50byB0aGUgZGVidWcgc2NlbmUgYXMgcG9zc2libGVcbiAgICAvLyBzbyB3ZSBjYW4gZ2l2ZSBpdCBhIGJpdCBvZiBhIHN0cmVzcyB0ZXN0XG4gICAgLy9cbiAgICAvLyBldmVuIHdpdGggZXZlcnl0aGluZyB3ZSdyZSBkb2luZyBzdGlsbCBjb21mb3J0YWJseSBydW5zIGF0IDYwZnBzIHRobyFcblxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGNvbnN0IHJvdyA9IHkgKiB3aWR0aFxuXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSByb3cgKyB4XG4gICAgICAgIGNvbnN0IGRhdGFJbmRleCA9IGluZGV4ICogNFxuXG4gICAgICAgIGNvbnN0IGlzUGFpbnQgPSBwYWludFB0c1t5XSAmJiBwYWludFB0c1t5XSFbeF1cblxuICAgICAgICBpZiAoaXNQYWludCkge1xuICAgICAgICAgIGJ1ZmZlci5kYXRhW2RhdGFJbmRleF0gPSBwYWludENvbG9yWzBdXG4gICAgICAgICAgYnVmZmVyLmRhdGFbZGF0YUluZGV4ICsgMV0gPSBwYWludENvbG9yWzFdXG4gICAgICAgICAgYnVmZmVyLmRhdGFbZGF0YUluZGV4ICsgMl0gPSBwYWludENvbG9yWzJdXG4gICAgICAgICAgYnVmZmVyLmRhdGFbZGF0YUluZGV4ICsgM10gPSAweGZmXG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNDaGVjayA9ICh4ICsgeSkgJSAyID09PSAwXG5cbiAgICAgICAgYnVmZmVyLmRhdGFbZGF0YUluZGV4XSA9IGlzQ2hlY2sgPyBiZ0NvbG9yMFswXSA6IGJnQ29sb3IxWzBdXG4gICAgICAgIGJ1ZmZlci5kYXRhW2RhdGFJbmRleCArIDFdID0gaXNDaGVjayA/IGJnQ29sb3IwWzFdIDogYmdDb2xvcjFbMV1cbiAgICAgICAgYnVmZmVyLmRhdGFbZGF0YUluZGV4ICsgMl0gPSBpc0NoZWNrID8gYmdDb2xvcjBbMl0gOiBiZ0NvbG9yMVsyXVxuICAgICAgICBidWZmZXIuZGF0YVtkYXRhSW5kZXggKyAzXSA9IDB4ZmZcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzcHJpdGVzLCBibGl0dGluZywgY29tcG9zaXRlIGV0Y1xuXG4gICAgLy8gYTAuLmI3ICAgIFxuICAgIGNvbnN0IHRlc3RHcmlkID0gZ2VuZXJhdGVOYW1lZEdyaWRMYXlvdXQoXG4gICAgICBnZW5lcmF0ZUdyaWRMYXlvdXQoMzIsIDMyLCAyLCA4LCAxLCAxKVxuICAgIClcblxuICAgIGNvbnN0IHsgd2lkdGg6IGd3IH0gPSB0ZXN0R3JpZFxuXG4gICAgY29uc3Qgb2ZmWCA9IHdpZHRoIC0gZ3dcbiAgICBjb25zdCBvZmZZID0gMFxuXG4gICAgLy8gc3RyYWlnaHQgYmxpdFxuXG4gICAgY29uc3QgeyBhMCB9ID0gdGVzdEdyaWRcbiAgICBjb25zdCBhMFggPSBhMFswXSArIG9mZlhcbiAgICBjb25zdCBhMFkgPSBhMFsxXSArIG9mZllcblxuICAgIGJsaXQodGVzdEltZzAsIGJ1ZmZlciwgWzAsIDAsIHRlc3RJbWcwLndpZHRoLCB0ZXN0SW1nMC5oZWlnaHQsIGEwWCwgYTBZXSlcblxuICAgIC8vIHRlc3Rpbmcgb29iIG9uIHNyY1xuXG4gICAgY29uc3QgeyBiMCB9ID0gdGVzdEdyaWRcbiAgICBjb25zdCBiMFggPSBiMFswXSArIG9mZlggLSAxNlxuICAgIGNvbnN0IGIwWSA9IGIwWzFdICsgb2ZmWSAtIDE2XG5cbiAgICBibGl0KFxuICAgICAgdGVzdEltZzAsIGJ1ZmZlcixcbiAgICAgIFtcbiAgICAgICAgLTE2LCAtMTYsIHRlc3RJbWcwLndpZHRoICsgMzIsIHRlc3RJbWcwLmhlaWdodCArIDMyLFxuICAgICAgICBiMFgsIGIwWVxuICAgICAgXVxuICAgIClcblxuICAgIC8vIGFscGhhIGNvbXBvc2l0ZVxuXG4gICAgY29uc3QgeyBhMSB9ID0gdGVzdEdyaWRcbiAgICBjb25zdCBhMVggPSBhMVswXSArIG9mZlhcbiAgICBjb25zdCBhMVkgPSBhMVsxXSArIG9mZllcblxuICAgIGNvbXBvc2l0ZShcbiAgICAgIHRlc3RJbWcwLCBidWZmZXIsIFswLCAwLCB0ZXN0SW1nMC53aWR0aCwgdGVzdEltZzAuaGVpZ2h0LCBhMVgsIGExWV0sIDAuNVxuICAgIClcblxuICAgIC8vIG9vYiBvbiBkZXN0XG5cbiAgICBjb25zdCB7IGIxIH0gPSB0ZXN0R3JpZFxuICAgIGNvbnN0IGIxWCA9IGIxWzBdICsgb2ZmWCArIDE2XG4gICAgY29uc3QgYjFZID0gYjFbMV0gKyBvZmZZXG5cbiAgICBibGl0KFxuICAgICAgdGVzdEltZzAsIGJ1ZmZlcixcbiAgICAgIFtcbiAgICAgICAgMCwgMCwgdGVzdEltZzAud2lkdGgsIHRlc3RJbWcwLmhlaWdodCxcbiAgICAgICAgYjFYLCBiMVlcbiAgICAgIF1cbiAgICApXG5cbiAgICAvLyBjb2xvciBmaWxsXG5cbiAgICBjb25zdCB7IGEyIH0gPSB0ZXN0R3JpZFxuICAgIGNvbnN0IGEyWCA9IGEyWzBdICsgb2ZmWFxuICAgIGNvbnN0IGEyWSA9IGEyWzFdICsgb2ZmWVxuXG4gICAgY29uc3QgY29sb3IgPSBjcmVhdGVDb2xvcigweDZjLCAweDI4LCAweGJjKVxuXG4gICAgZmlsbChcbiAgICAgIGJ1ZmZlciwgY29sb3IsXG4gICAgICBbYTJYLCBhMlksIHRlc3RJbWcwLndpZHRoLCB0ZXN0SW1nMC5oZWlnaHRdXG4gICAgKVxuXG4gICAgLy8gc3ByaXRlIHJvdGF0aW9uXG5cbiAgICBjb25zdCB7IGIyIH0gPSB0ZXN0R3JpZFxuICAgIGNvbnN0IGIyWCA9IGIyWzBdICsgb2ZmWCArIHRlc3RJbWcwLndpZHRoIC8gMlxuICAgIGNvbnN0IGIyWSA9IGIyWzFdICsgb2ZmWSArIHRlc3RJbWcwLmhlaWdodCAvIDJcblxuICAgIGRyYXdSb3RhdGVkKFxuICAgICAgdGVzdEltZzAsIHRlc3RJbWcwLndpZHRoIC8gMiwgdGVzdEltZzAuaGVpZ2h0IC8gMixcbiAgICAgIGJ1ZmZlciwgYjJYLCBiMlksXG4gICAgICBwb2x5Um90YXRpb25cbiAgICApXG5cbiAgICAvLyBibGl0Um93cyB0ZXN0XG5cbiAgICBjb25zdCB7IGEzIH0gPSB0ZXN0R3JpZFxuICAgIGNvbnN0IGEzWCA9IGEzWzBdICsgb2ZmWFxuICAgIGNvbnN0IGEzWSA9IGEzWzFdICsgb2ZmWVxuXG4gICAgZmlsbChidWZmZXIsIGNyZWF0ZUNvbG9yKDAsIDAsIDApLCBbYTNYLCBhM1ksIHBhdHRlcm4wLndpZHRoLCBwYXR0ZXJuMC5oZWlnaHRdKVxuXG4gICAgYmxpdFJvd3MoXG4gICAgICBwYXR0ZXJuQ29sb3JJbWFnZSwgcGF0dGVybjBSb3dzLCBidWZmZXIsIGEzWCwgYTNZXG4gICAgKVxuXG4gICAgLy8gZ3JhZGllbnQgdGVzdFxuXG4gICAgY29uc3QgeyBiMyB9ID0gdGVzdEdyaWRcbiAgICBjb25zdCBiM1ggPSBiM1swXSArIG9mZlhcbiAgICBjb25zdCBiM1kgPSBiM1sxXSArIG9mZllcblxuICAgIGNvbnN0IGdDb2xvcnMwID0gZ2VuZXJhdGVIdWVzKDYpXG5cbiAgICBjb25zdCBzdGVwMCA9IDEgLyAoZ0NvbG9yczAubGVuZ3RoIC0gMSlcblxuICAgIGNvbnN0IGdTdG9wczAgPSBnQ29sb3JzMC5tYXAoKGMsIGkpID0+IHtcbiAgICAgIGNvbnN0IHJnYmEgPSBjb2xvclRvUmdiYShjKVxuXG4gICAgICByZXR1cm4gWy4uLnJnYmEsIGkgKiBzdGVwMF0gYXMgVDVcbiAgICB9KVxuXG4gICAgY29uc3QgZ0ltYWdlMCA9IGNyZWF0ZUltYWdlKDMyLCAzMilcblxuICAgIGZvciAobGV0IHggPSAwOyB4IDwgZ0ltYWdlMC53aWR0aDsgeCsrKSB7XG4gICAgICBjb25zdCBhdCA9IHggLyAoZ0ltYWdlMC53aWR0aCAtIDEpXG4gICAgICBjb25zdCByZ2JhID0gc2FtcGxlR3JhZGllbnQoZ1N0b3BzMCwgYXQpXG4gICAgICBjb25zdCBjb2xvciA9IGNyZWF0ZUNvbG9yKC4uLnJnYmEpXG5cbiAgICAgIGZpbGxDb2woZ0ltYWdlMCwgY29sb3IsIHgpXG4gICAgfVxuXG4gICAgYmxpdChnSW1hZ2UwLCBidWZmZXIsIFswLCAwLCBnSW1hZ2UwLndpZHRoLCBnSW1hZ2UwLmhlaWdodCwgYjNYLCBiM1ldKVxuXG4gICAgLy8gZ3JhZGllbnQgdGVzdCAyLCBhbHBoYSArIGNvbXBvc2l0ZVxuXG4gICAgY29uc3QgeyBhNCB9ID0gdGVzdEdyaWRcbiAgICBjb25zdCBhNFggPSBhNFswXSArIG9mZlhcbiAgICBjb25zdCBhNFkgPSBhNFsxXSArIG9mZllcblxuICAgIGNvbnN0IGdDb2xvcnMxID0gZ0NvbG9yczAuc2xpY2UoKS5yZXZlcnNlKClcblxuICAgIGNvbnN0IHN0ZXAxID0gMSAvIChnQ29sb3JzMS5sZW5ndGggLSAxKVxuXG4gICAgY29uc3QgZ3N0b3BzMSA9IGdDb2xvcnMxLm1hcCgoYywgaSkgPT4ge1xuICAgICAgY29uc3QgW3IsIGcsIGJdID0gY29sb3JUb1JnYmEoYylcbiAgICAgIGNvbnN0IGEgPSBpICogc3RlcDEgKiAyNTVcblxuICAgICAgcmV0dXJuIFtyLCBnLCBiLCBhLCBpICogc3RlcDFdIGFzIFQ1XG4gICAgfSlcblxuICAgIGNvbnN0IGdJbWFnZTEgPSBjcmVhdGVJbWFnZSgzMiwgMzIpXG5cbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGdJbWFnZTEud2lkdGg7IHgrKykge1xuICAgICAgY29uc3QgYXQgPSB4IC8gKGdJbWFnZTEud2lkdGggLSAxKVxuICAgICAgY29uc3QgcmdiYSA9IHNhbXBsZUdyYWRpZW50KGdzdG9wczEsIGF0KVxuICAgICAgY29uc3QgY29sb3IgPSBjcmVhdGVDb2xvciguLi5yZ2JhKVxuXG4gICAgICBncmFkaWVudExvZ2dlci5sb2coJ2dyYWRpZW50JywgeCwgcmdiYSlcblxuICAgICAgZmlsbENvbChnSW1hZ2UxLCBjb2xvciwgeClcbiAgICB9XG5cbiAgICBjb21wb3NpdGUoXG4gICAgICBnSW1hZ2UxLCBidWZmZXIsIFswLCAwLCBnSW1hZ2UxLndpZHRoLCBnSW1hZ2UxLmhlaWdodCwgYTRYLCBhNFldXG4gICAgKVxuXG4gICAgLy8gaG9yaXpvbnRhbGx5IHNsb3BpbmcgbGluZVxuXG4gICAgY29uc3QgdGVzdExpbmVDb2xvciA9IGNyZWF0ZUNvbG9yKDB4MzMsIDB4ZmYsIDB4OTkpXG5cbiAgICBjb25zdCB0ZXN0TGluZTogVDQgPSBbLTMyLCBoZWlnaHQgLyAyIC0gMzIsIHdpZHRoICsgMzIsIGhlaWdodCAvIDIgKyAzMl1cblxuICAgIC8vIG5iIC0gdGhpcyBpcyBvbmx5IGZhc3RlciB3aXRoIHRoZSByaWdodCBzbG9wZSAtIG90aGVyd2lzZSBpdCBpcyBzbG93ZXJcbiAgICAvLyBpdCBpcyBiZXR0ZXIgdG8gdXNlIGJyZXNlbmhhbSBmb3IgdGhlIGdlbmVyYWwgY2FzZVxuICAgIGNvbnN0IHRlc3RMaW5lUm93cyA9IGxpbmVUb1Jvd3MoLi4udGVzdExpbmUpXG5cbiAgICBmaWxsUm93cyh0ZXN0TGluZVJvd3MsIGJ1ZmZlciwgdGVzdExpbmVDb2xvcilcblxuICAgIC8vIHJlY3QgdmlhIHJvd3NcblxuICAgIGNvbnN0IHJlY3RDb2xvciA9IGNyZWF0ZUNvbG9yKDB4ZmYsIDB4OTksIDB4MzMpXG5cbiAgICBjb25zdCB0ZXN0UmVjdDogVDQgPSBbNDgsIDQ4LCAzMiwgMjRdXG4gICAgY29uc3QgdGVzdFJlY3RSb3dzID0gcmVjdFRvUm93cyguLi50ZXN0UmVjdClcblxuICAgIGZpbGxSb3dzKHRlc3RSZWN0Um93cywgYnVmZmVyLCByZWN0Q29sb3IpXG5cbiAgICAvLyBwb2x5Z29uXG5cbiAgICBjb25zdCBtaW5TaWRlID0gTWF0aC5taW4od2lkdGgsIGhlaWdodClcbiAgICBjb25zdCBmaWxsQ29sb3JzID0gZ2VuZXJhdGVIdWVzKHBvbHlTaWRlcylcblxuICAgIGNvbnN0IHNoYXBlID0gcG9seWdvblRyaWFuZ2xlcyhcbiAgICAgIHBvbHlTaWRlcywgd2lkdGggLyAyLCBoZWlnaHQgLyAyLCBtaW5TaWRlIC8gNCwgcG9seVJvdGF0aW9uXG4gICAgKVxuXG4gICAgY29uc3QgZnJhbWVUaW1lID0gc3RhdGUudGltZS5nZXRGcmFtZVRpbWUoKVxuICAgIGNvbnN0IHJvdGF0ZUJ5ID0gMC4wMDEgKiBmcmFtZVRpbWVcblxuICAgIGNvbnN0IHN0cm9rZUxpbmUgPSAobGluZTogVDQsIGNvbG9yOiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHB0cyA9IGJyZXNlbmhhbUxpbmUoLi4ubGluZSlcbiAgICAgIGNvbnN0IGluZGljZXMgPSBwb2ludHNUb0luZGljZXMod2lkdGgsIGhlaWdodCwgMSkocHRzKVxuXG4gICAgICBmaWxsSW5kaWNlcyhpbmRpY2VzLCBidWZmZXIsIGNvbG9yKVxuICAgIH1cblxuICAgIGNvbnN0IHN0cm9rZVRyaSA9ICh0cmk6IFQzPFQyPiwgY29sb3I6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgbGluZTA6IFQ0ID0gW3RyaVswXVswXSwgdHJpWzBdWzFdLCB0cmlbMV1bMF0sIHRyaVsxXVsxXV1cbiAgICAgIGNvbnN0IGxpbmUxOiBUNCA9IFt0cmlbMV1bMF0sIHRyaVsxXVsxXSwgdHJpWzJdWzBdLCB0cmlbMl1bMV1dXG4gICAgICBjb25zdCBsaW5lMjogVDQgPSBbdHJpWzJdWzBdLCB0cmlbMl1bMV0sIHRyaVswXVswXSwgdHJpWzBdWzFdXVxuXG4gICAgICBzdHJva2VMaW5lKGxpbmUwLCBjb2xvcilcbiAgICAgIHN0cm9rZUxpbmUobGluZTEsIGNvbG9yKVxuICAgICAgc3Ryb2tlTGluZShsaW5lMiwgY29sb3IpXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2x5U2lkZXM7IGkrKykge1xuICAgICAgY29uc3QgY29sb3IgPSBmaWxsQ29sb3JzW2kgJSBmaWxsQ29sb3JzLmxlbmd0aF1cbiAgICAgIGNvbnN0IHRyaSA9IHNoYXBlW2ldXG5cbiAgICAgIGNvbnN0IHB0cmlSb3dzID0gdHJpYW5nbGVUb1Jvd3MoLi4udHJpKVxuICAgICAgZmlsbFJvd3MocHRyaVJvd3MsIGJ1ZmZlciwgY29sb3IpXG4gICAgfVxuXG4gICAgY29uc3Qgc3Ryb2tlQ29sb3JzID0gc3Ryb2tlUG9seSA/IGdlbmVyYXRlSHVlcyhwb2x5U2lkZXMsIDUwKSA6IGZpbGxDb2xvcnNcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9seVNpZGVzOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvbG9yID0gc3Ryb2tlQ29sb3JzW2kgJSBzdHJva2VDb2xvcnMubGVuZ3RoXVxuICAgICAgY29uc3QgdHJpID0gc2hhcGVbaV1cblxuICAgICAgc3Ryb2tlVHJpKHRyaSwgY29sb3IpXG4gICAgfVxuXG4gICAgLy8gc2hvdyBjdXN0b20gY3Vyc29yXG5cbiAgICBpZiAoc3RhdGUubW91c2UuaXNJbkJvdW5kcygpKSB7XG4gICAgICBjb21wb3NpdGUoXG4gICAgICAgIGN1cnNvciwgYnVmZmVyLFxuICAgICAgICBbMCwgMCwgY3Vyc29yLndpZHRoLCBjdXJzb3IuaGVpZ2h0LCBzdGF0ZS5tb3VzZS5nZXRYKCksIHN0YXRlLm1vdXNlLmdldFkoKV1cbiAgICAgIClcbiAgICB9XG5cbiAgICAvL1xuXG4gICAgcG9seVJvdGF0aW9uICs9IHJvdGF0ZUJ5XG5cbiAgICBmcmFtZSsrXG4gIH1cblxuICBjb25zdCBxdWl0ID0gYXN5bmMgKHN0YXRlOiBTdGF0ZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdxdWl0dGluZyBkZWJ1ZyBzY2VuZScpXG5cbiAgICByZWxlYXNlTW91c2UoKVxuICB9XG5cbiAgY29uc3Qgc2V0QWN0aXZlID0gKGFjdGl2ZTogYm9vbGVhbikgPT4ge1xuICAgIC8vIHdlIGp1c3QgZ290IGZvY3VzXG4gICAgaWYgKGFjdGl2ZSAmJiAhaXNBY3RpdmUpIHtcbiAgICAgIHRha2VNb3VzZSgpXG4gICAgfVxuXG4gICAgLy8gd2UganVzdCBsb3N0IGZvY3VzIFxuICAgIGlmICghYWN0aXZlICYmIGlzQWN0aXZlKSB7XG4gICAgICByZWxlYXNlTW91c2UoKVxuICAgIH1cblxuICAgIGlzQWN0aXZlID0gYWN0aXZlXG4gIH1cblxuICByZXR1cm4geyBpbml0LCB1cGRhdGUsIHF1aXQsIHNldEFjdGl2ZSB9XG59XG4iXX0=